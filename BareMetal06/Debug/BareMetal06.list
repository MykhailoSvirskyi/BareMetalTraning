
BareMetal06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c4  08004bfc  08004bfc  00014bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fc0  08004fc0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004fc0  08004fc0  00014fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fc8  08004fc8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fc8  08004fc8  00014fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fcc  08004fcc  00014fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004fd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000550  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005c4  200005c4  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bc04  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c3b  00000000  00000000  0002bca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000978  00000000  00000000  0002d8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000958  00000000  00000000  0002e260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020ab2  00000000  00000000  0002ebb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d47d  00000000  00000000  0004f66a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c411e  00000000  00000000  0005cae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00120c05  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f9c  00000000  00000000  00120c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004be4 	.word	0x08004be4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08004be4 	.word	0x08004be4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	; 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2uiz>:
 800086c:	004a      	lsls	r2, r1, #1
 800086e:	d211      	bcs.n	8000894 <__aeabi_d2uiz+0x28>
 8000870:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000874:	d211      	bcs.n	800089a <__aeabi_d2uiz+0x2e>
 8000876:	d50d      	bpl.n	8000894 <__aeabi_d2uiz+0x28>
 8000878:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800087c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000880:	d40e      	bmi.n	80008a0 <__aeabi_d2uiz+0x34>
 8000882:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000886:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800088a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800088e:	fa23 f002 	lsr.w	r0, r3, r2
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800089e:	d102      	bne.n	80008a6 <__aeabi_d2uiz+0x3a>
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295
 80008a4:	4770      	bx	lr
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	4770      	bx	lr

080008ac <__aeabi_uldivmod>:
 80008ac:	b953      	cbnz	r3, 80008c4 <__aeabi_uldivmod+0x18>
 80008ae:	b94a      	cbnz	r2, 80008c4 <__aeabi_uldivmod+0x18>
 80008b0:	2900      	cmp	r1, #0
 80008b2:	bf08      	it	eq
 80008b4:	2800      	cmpeq	r0, #0
 80008b6:	bf1c      	itt	ne
 80008b8:	f04f 31ff 	movne.w	r1, #4294967295
 80008bc:	f04f 30ff 	movne.w	r0, #4294967295
 80008c0:	f000 b974 	b.w	8000bac <__aeabi_idiv0>
 80008c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008cc:	f000 f806 	bl	80008dc <__udivmoddi4>
 80008d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008d8:	b004      	add	sp, #16
 80008da:	4770      	bx	lr

080008dc <__udivmoddi4>:
 80008dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008e0:	9d08      	ldr	r5, [sp, #32]
 80008e2:	4604      	mov	r4, r0
 80008e4:	468e      	mov	lr, r1
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d14d      	bne.n	8000986 <__udivmoddi4+0xaa>
 80008ea:	428a      	cmp	r2, r1
 80008ec:	4694      	mov	ip, r2
 80008ee:	d969      	bls.n	80009c4 <__udivmoddi4+0xe8>
 80008f0:	fab2 f282 	clz	r2, r2
 80008f4:	b152      	cbz	r2, 800090c <__udivmoddi4+0x30>
 80008f6:	fa01 f302 	lsl.w	r3, r1, r2
 80008fa:	f1c2 0120 	rsb	r1, r2, #32
 80008fe:	fa20 f101 	lsr.w	r1, r0, r1
 8000902:	fa0c fc02 	lsl.w	ip, ip, r2
 8000906:	ea41 0e03 	orr.w	lr, r1, r3
 800090a:	4094      	lsls	r4, r2
 800090c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000910:	0c21      	lsrs	r1, r4, #16
 8000912:	fbbe f6f8 	udiv	r6, lr, r8
 8000916:	fa1f f78c 	uxth.w	r7, ip
 800091a:	fb08 e316 	mls	r3, r8, r6, lr
 800091e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000922:	fb06 f107 	mul.w	r1, r6, r7
 8000926:	4299      	cmp	r1, r3
 8000928:	d90a      	bls.n	8000940 <__udivmoddi4+0x64>
 800092a:	eb1c 0303 	adds.w	r3, ip, r3
 800092e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000932:	f080 811f 	bcs.w	8000b74 <__udivmoddi4+0x298>
 8000936:	4299      	cmp	r1, r3
 8000938:	f240 811c 	bls.w	8000b74 <__udivmoddi4+0x298>
 800093c:	3e02      	subs	r6, #2
 800093e:	4463      	add	r3, ip
 8000940:	1a5b      	subs	r3, r3, r1
 8000942:	b2a4      	uxth	r4, r4
 8000944:	fbb3 f0f8 	udiv	r0, r3, r8
 8000948:	fb08 3310 	mls	r3, r8, r0, r3
 800094c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000950:	fb00 f707 	mul.w	r7, r0, r7
 8000954:	42a7      	cmp	r7, r4
 8000956:	d90a      	bls.n	800096e <__udivmoddi4+0x92>
 8000958:	eb1c 0404 	adds.w	r4, ip, r4
 800095c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000960:	f080 810a 	bcs.w	8000b78 <__udivmoddi4+0x29c>
 8000964:	42a7      	cmp	r7, r4
 8000966:	f240 8107 	bls.w	8000b78 <__udivmoddi4+0x29c>
 800096a:	4464      	add	r4, ip
 800096c:	3802      	subs	r0, #2
 800096e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000972:	1be4      	subs	r4, r4, r7
 8000974:	2600      	movs	r6, #0
 8000976:	b11d      	cbz	r5, 8000980 <__udivmoddi4+0xa4>
 8000978:	40d4      	lsrs	r4, r2
 800097a:	2300      	movs	r3, #0
 800097c:	e9c5 4300 	strd	r4, r3, [r5]
 8000980:	4631      	mov	r1, r6
 8000982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000986:	428b      	cmp	r3, r1
 8000988:	d909      	bls.n	800099e <__udivmoddi4+0xc2>
 800098a:	2d00      	cmp	r5, #0
 800098c:	f000 80ef 	beq.w	8000b6e <__udivmoddi4+0x292>
 8000990:	2600      	movs	r6, #0
 8000992:	e9c5 0100 	strd	r0, r1, [r5]
 8000996:	4630      	mov	r0, r6
 8000998:	4631      	mov	r1, r6
 800099a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800099e:	fab3 f683 	clz	r6, r3
 80009a2:	2e00      	cmp	r6, #0
 80009a4:	d14a      	bne.n	8000a3c <__udivmoddi4+0x160>
 80009a6:	428b      	cmp	r3, r1
 80009a8:	d302      	bcc.n	80009b0 <__udivmoddi4+0xd4>
 80009aa:	4282      	cmp	r2, r0
 80009ac:	f200 80f9 	bhi.w	8000ba2 <__udivmoddi4+0x2c6>
 80009b0:	1a84      	subs	r4, r0, r2
 80009b2:	eb61 0303 	sbc.w	r3, r1, r3
 80009b6:	2001      	movs	r0, #1
 80009b8:	469e      	mov	lr, r3
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d0e0      	beq.n	8000980 <__udivmoddi4+0xa4>
 80009be:	e9c5 4e00 	strd	r4, lr, [r5]
 80009c2:	e7dd      	b.n	8000980 <__udivmoddi4+0xa4>
 80009c4:	b902      	cbnz	r2, 80009c8 <__udivmoddi4+0xec>
 80009c6:	deff      	udf	#255	; 0xff
 80009c8:	fab2 f282 	clz	r2, r2
 80009cc:	2a00      	cmp	r2, #0
 80009ce:	f040 8092 	bne.w	8000af6 <__udivmoddi4+0x21a>
 80009d2:	eba1 010c 	sub.w	r1, r1, ip
 80009d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009da:	fa1f fe8c 	uxth.w	lr, ip
 80009de:	2601      	movs	r6, #1
 80009e0:	0c20      	lsrs	r0, r4, #16
 80009e2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009e6:	fb07 1113 	mls	r1, r7, r3, r1
 80009ea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009ee:	fb0e f003 	mul.w	r0, lr, r3
 80009f2:	4288      	cmp	r0, r1
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x12c>
 80009f6:	eb1c 0101 	adds.w	r1, ip, r1
 80009fa:	f103 38ff 	add.w	r8, r3, #4294967295
 80009fe:	d202      	bcs.n	8000a06 <__udivmoddi4+0x12a>
 8000a00:	4288      	cmp	r0, r1
 8000a02:	f200 80cb 	bhi.w	8000b9c <__udivmoddi4+0x2c0>
 8000a06:	4643      	mov	r3, r8
 8000a08:	1a09      	subs	r1, r1, r0
 8000a0a:	b2a4      	uxth	r4, r4
 8000a0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a10:	fb07 1110 	mls	r1, r7, r0, r1
 8000a14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a18:	fb0e fe00 	mul.w	lr, lr, r0
 8000a1c:	45a6      	cmp	lr, r4
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x156>
 8000a20:	eb1c 0404 	adds.w	r4, ip, r4
 8000a24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a28:	d202      	bcs.n	8000a30 <__udivmoddi4+0x154>
 8000a2a:	45a6      	cmp	lr, r4
 8000a2c:	f200 80bb 	bhi.w	8000ba6 <__udivmoddi4+0x2ca>
 8000a30:	4608      	mov	r0, r1
 8000a32:	eba4 040e 	sub.w	r4, r4, lr
 8000a36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a3a:	e79c      	b.n	8000976 <__udivmoddi4+0x9a>
 8000a3c:	f1c6 0720 	rsb	r7, r6, #32
 8000a40:	40b3      	lsls	r3, r6
 8000a42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a52:	431c      	orrs	r4, r3
 8000a54:	40f9      	lsrs	r1, r7
 8000a56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a62:	0c20      	lsrs	r0, r4, #16
 8000a64:	fa1f fe8c 	uxth.w	lr, ip
 8000a68:	fb09 1118 	mls	r1, r9, r8, r1
 8000a6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a70:	fb08 f00e 	mul.w	r0, r8, lr
 8000a74:	4288      	cmp	r0, r1
 8000a76:	fa02 f206 	lsl.w	r2, r2, r6
 8000a7a:	d90b      	bls.n	8000a94 <__udivmoddi4+0x1b8>
 8000a7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a84:	f080 8088 	bcs.w	8000b98 <__udivmoddi4+0x2bc>
 8000a88:	4288      	cmp	r0, r1
 8000a8a:	f240 8085 	bls.w	8000b98 <__udivmoddi4+0x2bc>
 8000a8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a92:	4461      	add	r1, ip
 8000a94:	1a09      	subs	r1, r1, r0
 8000a96:	b2a4      	uxth	r4, r4
 8000a98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000aa0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000aa4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000aa8:	458e      	cmp	lr, r1
 8000aaa:	d908      	bls.n	8000abe <__udivmoddi4+0x1e2>
 8000aac:	eb1c 0101 	adds.w	r1, ip, r1
 8000ab0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ab4:	d26c      	bcs.n	8000b90 <__udivmoddi4+0x2b4>
 8000ab6:	458e      	cmp	lr, r1
 8000ab8:	d96a      	bls.n	8000b90 <__udivmoddi4+0x2b4>
 8000aba:	3802      	subs	r0, #2
 8000abc:	4461      	add	r1, ip
 8000abe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ac2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ac6:	eba1 010e 	sub.w	r1, r1, lr
 8000aca:	42a1      	cmp	r1, r4
 8000acc:	46c8      	mov	r8, r9
 8000ace:	46a6      	mov	lr, r4
 8000ad0:	d356      	bcc.n	8000b80 <__udivmoddi4+0x2a4>
 8000ad2:	d053      	beq.n	8000b7c <__udivmoddi4+0x2a0>
 8000ad4:	b15d      	cbz	r5, 8000aee <__udivmoddi4+0x212>
 8000ad6:	ebb3 0208 	subs.w	r2, r3, r8
 8000ada:	eb61 010e 	sbc.w	r1, r1, lr
 8000ade:	fa01 f707 	lsl.w	r7, r1, r7
 8000ae2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ae6:	40f1      	lsrs	r1, r6
 8000ae8:	431f      	orrs	r7, r3
 8000aea:	e9c5 7100 	strd	r7, r1, [r5]
 8000aee:	2600      	movs	r6, #0
 8000af0:	4631      	mov	r1, r6
 8000af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af6:	f1c2 0320 	rsb	r3, r2, #32
 8000afa:	40d8      	lsrs	r0, r3
 8000afc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b00:	fa21 f303 	lsr.w	r3, r1, r3
 8000b04:	4091      	lsls	r1, r2
 8000b06:	4301      	orrs	r1, r0
 8000b08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0c:	fa1f fe8c 	uxth.w	lr, ip
 8000b10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b14:	fb07 3610 	mls	r6, r7, r0, r3
 8000b18:	0c0b      	lsrs	r3, r1, #16
 8000b1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b22:	429e      	cmp	r6, r3
 8000b24:	fa04 f402 	lsl.w	r4, r4, r2
 8000b28:	d908      	bls.n	8000b3c <__udivmoddi4+0x260>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b32:	d22f      	bcs.n	8000b94 <__udivmoddi4+0x2b8>
 8000b34:	429e      	cmp	r6, r3
 8000b36:	d92d      	bls.n	8000b94 <__udivmoddi4+0x2b8>
 8000b38:	3802      	subs	r0, #2
 8000b3a:	4463      	add	r3, ip
 8000b3c:	1b9b      	subs	r3, r3, r6
 8000b3e:	b289      	uxth	r1, r1
 8000b40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b44:	fb07 3316 	mls	r3, r7, r6, r3
 8000b48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b50:	428b      	cmp	r3, r1
 8000b52:	d908      	bls.n	8000b66 <__udivmoddi4+0x28a>
 8000b54:	eb1c 0101 	adds.w	r1, ip, r1
 8000b58:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b5c:	d216      	bcs.n	8000b8c <__udivmoddi4+0x2b0>
 8000b5e:	428b      	cmp	r3, r1
 8000b60:	d914      	bls.n	8000b8c <__udivmoddi4+0x2b0>
 8000b62:	3e02      	subs	r6, #2
 8000b64:	4461      	add	r1, ip
 8000b66:	1ac9      	subs	r1, r1, r3
 8000b68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b6c:	e738      	b.n	80009e0 <__udivmoddi4+0x104>
 8000b6e:	462e      	mov	r6, r5
 8000b70:	4628      	mov	r0, r5
 8000b72:	e705      	b.n	8000980 <__udivmoddi4+0xa4>
 8000b74:	4606      	mov	r6, r0
 8000b76:	e6e3      	b.n	8000940 <__udivmoddi4+0x64>
 8000b78:	4618      	mov	r0, r3
 8000b7a:	e6f8      	b.n	800096e <__udivmoddi4+0x92>
 8000b7c:	454b      	cmp	r3, r9
 8000b7e:	d2a9      	bcs.n	8000ad4 <__udivmoddi4+0x1f8>
 8000b80:	ebb9 0802 	subs.w	r8, r9, r2
 8000b84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b88:	3801      	subs	r0, #1
 8000b8a:	e7a3      	b.n	8000ad4 <__udivmoddi4+0x1f8>
 8000b8c:	4646      	mov	r6, r8
 8000b8e:	e7ea      	b.n	8000b66 <__udivmoddi4+0x28a>
 8000b90:	4620      	mov	r0, r4
 8000b92:	e794      	b.n	8000abe <__udivmoddi4+0x1e2>
 8000b94:	4640      	mov	r0, r8
 8000b96:	e7d1      	b.n	8000b3c <__udivmoddi4+0x260>
 8000b98:	46d0      	mov	r8, sl
 8000b9a:	e77b      	b.n	8000a94 <__udivmoddi4+0x1b8>
 8000b9c:	3b02      	subs	r3, #2
 8000b9e:	4461      	add	r1, ip
 8000ba0:	e732      	b.n	8000a08 <__udivmoddi4+0x12c>
 8000ba2:	4630      	mov	r0, r6
 8000ba4:	e709      	b.n	80009ba <__udivmoddi4+0xde>
 8000ba6:	4464      	add	r4, ip
 8000ba8:	3802      	subs	r0, #2
 8000baa:	e742      	b.n	8000a32 <__udivmoddi4+0x156>

08000bac <__aeabi_idiv0>:
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	; 0x28
 8000bb4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
 8000bc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	4b26      	ldr	r3, [pc, #152]	; (8000c64 <MX_GPIO_Init+0xb4>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a25      	ldr	r2, [pc, #148]	; (8000c64 <MX_GPIO_Init+0xb4>)
 8000bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b23      	ldr	r3, [pc, #140]	; (8000c64 <MX_GPIO_Init+0xb4>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <MX_GPIO_Init+0xb4>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a1e      	ldr	r2, [pc, #120]	; (8000c64 <MX_GPIO_Init+0xb4>)
 8000bec:	f043 0308 	orr.w	r3, r3, #8
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <MX_GPIO_Init+0xb4>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0308 	and.w	r3, r3, #8
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <MX_GPIO_Init+0xb4>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a17      	ldr	r2, [pc, #92]	; (8000c64 <MX_GPIO_Init+0xb4>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <MX_GPIO_Init+0xb4>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <MX_GPIO_Init+0xb4>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a10      	ldr	r2, [pc, #64]	; (8000c64 <MX_GPIO_Init+0xb4>)
 8000c24:	f043 0302 	orr.w	r3, r3, #2
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <MX_GPIO_Init+0xb4>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0302 	and.w	r3, r3, #2
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2180      	movs	r1, #128	; 0x80
 8000c3a:	480b      	ldr	r0, [pc, #44]	; (8000c68 <MX_GPIO_Init+0xb8>)
 8000c3c:	f001 f8f6 	bl	8001e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c40:	2380      	movs	r3, #128	; 0x80
 8000c42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4619      	mov	r1, r3
 8000c56:	4804      	ldr	r0, [pc, #16]	; (8000c68 <MX_GPIO_Init+0xb8>)
 8000c58:	f000 ff4c 	bl	8001af4 <HAL_GPIO_Init>

}
 8000c5c:	bf00      	nop
 8000c5e:	3728      	adds	r7, #40	; 0x28
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40020400 	.word	0x40020400

08000c6c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c70:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <MX_I2C1_Init+0x54>)
 8000c72:	4a14      	ldr	r2, [pc, #80]	; (8000cc4 <MX_I2C1_Init+0x58>)
 8000c74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 50000;
 8000c76:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <MX_I2C1_Init+0x54>)
 8000c78:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000c7c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <MX_I2C1_Init+0x54>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c84:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_I2C1_Init+0x54>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c8a:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <MX_I2C1_Init+0x54>)
 8000c8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c90:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <MX_I2C1_Init+0x54>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MX_I2C1_Init+0x54>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <MX_I2C1_Init+0x54>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_I2C1_Init+0x54>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_I2C1_Init+0x54>)
 8000cac:	f001 f8d8 	bl	8001e60 <HAL_I2C_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000cb6:	f000 fa9d 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000090 	.word	0x20000090
 8000cc4:	40005400 	.word	0x40005400

08000cc8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	; 0x28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a19      	ldr	r2, [pc, #100]	; (8000d4c <HAL_I2C_MspInit+0x84>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d12c      	bne.n	8000d44 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <HAL_I2C_MspInit+0x88>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a17      	ldr	r2, [pc, #92]	; (8000d50 <HAL_I2C_MspInit+0x88>)
 8000cf4:	f043 0302 	orr.w	r3, r3, #2
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <HAL_I2C_MspInit+0x88>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000d06:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d0c:	2312      	movs	r3, #18
 8000d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d14:	2303      	movs	r3, #3
 8000d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d18:	2304      	movs	r3, #4
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4619      	mov	r1, r3
 8000d22:	480c      	ldr	r0, [pc, #48]	; (8000d54 <HAL_I2C_MspInit+0x8c>)
 8000d24:	f000 fee6 	bl	8001af4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <HAL_I2C_MspInit+0x88>)
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d30:	4a07      	ldr	r2, [pc, #28]	; (8000d50 <HAL_I2C_MspInit+0x88>)
 8000d32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d36:	6413      	str	r3, [r2, #64]	; 0x40
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <HAL_I2C_MspInit+0x88>)
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d44:	bf00      	nop
 8000d46:	3728      	adds	r7, #40	; 0x28
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40005400 	.word	0x40005400
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40020400 	.word	0x40020400

08000d58 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000d5c:	f000 fd4e 	bl	80017fc <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000d60:	f000 f84e 	bl	8000e00 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000d64:	f7ff ff24 	bl	8000bb0 <MX_GPIO_Init>
    MX_I2C1_Init();
 8000d68:	f7ff ff80 	bl	8000c6c <MX_I2C1_Init>
    MX_USART3_UART_Init();
 8000d6c:	f000 fcaa 	bl	80016c4 <MX_USART3_UART_Init>
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */

    HAL_Delay(200);
 8000d70:	20c8      	movs	r0, #200	; 0xc8
 8000d72:	f000 fdb5 	bl	80018e0 <HAL_Delay>
    snprintf((char *)tx_buf, BUF_SIZE, "comand list:\r\ntrigger <on/off>\r\npulse <0-15> <0-100> (PIN Duty cycle)\r\nfreqmod <24-1526>\r\nslepmod <off/on>\r\n");
 8000d76:	4a1c      	ldr	r2, [pc, #112]	; (8000de8 <main+0x90>)
 8000d78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d7c:	481b      	ldr	r0, [pc, #108]	; (8000dec <main+0x94>)
 8000d7e:	f002 fde9 	bl	8003954 <sniprintf>
    HAL_UART_Transmit(&huart3, tx_buf, strlen((char *)tx_buf), 100);
 8000d82:	481a      	ldr	r0, [pc, #104]	; (8000dec <main+0x94>)
 8000d84:	f7ff fa2e 	bl	80001e4 <strlen>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	2364      	movs	r3, #100	; 0x64
 8000d8e:	4917      	ldr	r1, [pc, #92]	; (8000dec <main+0x94>)
 8000d90:	4817      	ldr	r0, [pc, #92]	; (8000df0 <main+0x98>)
 8000d92:	f002 f996 	bl	80030c2 <HAL_UART_Transmit>
/*    _pwm_reset();*/
    while (1)
    {

        if (HAL_UART_Receive(&huart3, &rx, 1, 10) == HAL_OK)
 8000d96:	230a      	movs	r3, #10
 8000d98:	2201      	movs	r2, #1
 8000d9a:	4916      	ldr	r1, [pc, #88]	; (8000df4 <main+0x9c>)
 8000d9c:	4814      	ldr	r0, [pc, #80]	; (8000df0 <main+0x98>)
 8000d9e:	f002 fa22 	bl	80031e6 <HAL_UART_Receive>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d1f6      	bne.n	8000d96 <main+0x3e>
        {

            do
            {
                cmd[icmd++] = rx;
 8000da8:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <main+0xa0>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	1c5a      	adds	r2, r3, #1
 8000dae:	b2d1      	uxtb	r1, r2
 8000db0:	4a11      	ldr	r2, [pc, #68]	; (8000df8 <main+0xa0>)
 8000db2:	7011      	strb	r1, [r2, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <main+0x9c>)
 8000db8:	7819      	ldrb	r1, [r3, #0]
 8000dba:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <main+0xa4>)
 8000dbc:	5499      	strb	r1, [r3, r2]
            } while (HAL_UART_Receive(&huart3, &rx, 1, 10) == HAL_OK && rx != '\n');
 8000dbe:	230a      	movs	r3, #10
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	490c      	ldr	r1, [pc, #48]	; (8000df4 <main+0x9c>)
 8000dc4:	480a      	ldr	r0, [pc, #40]	; (8000df0 <main+0x98>)
 8000dc6:	f002 fa0e 	bl	80031e6 <HAL_UART_Receive>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d103      	bne.n	8000dd8 <main+0x80>
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <main+0x9c>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b0a      	cmp	r3, #10
 8000dd6:	d1e7      	bne.n	8000da8 <main+0x50>
            icmd = 0;
 8000dd8:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <main+0xa0>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
            Process_Command(cmd);
 8000dde:	4807      	ldr	r0, [pc, #28]	; (8000dfc <main+0xa4>)
 8000de0:	f000 f876 	bl	8000ed0 <Process_Command>
        if (HAL_UART_Receive(&huart3, &rx, 1, 10) == HAL_OK)
 8000de4:	e7d7      	b.n	8000d96 <main+0x3e>
 8000de6:	bf00      	nop
 8000de8:	08004bfc 	.word	0x08004bfc
 8000dec:	20000164 	.word	0x20000164
 8000df0:	2000056c 	.word	0x2000056c
 8000df4:	20000565 	.word	0x20000565
 8000df8:	20000564 	.word	0x20000564
 8000dfc:	200000e4 	.word	0x200000e4

08000e00 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b094      	sub	sp, #80	; 0x50
 8000e04:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e06:	f107 0320 	add.w	r3, r7, #32
 8000e0a:	2230      	movs	r2, #48	; 0x30
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f002 fd98 	bl	8003944 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000e24:	2300      	movs	r3, #0
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	4b27      	ldr	r3, [pc, #156]	; (8000ec8 <SystemClock_Config+0xc8>)
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2c:	4a26      	ldr	r2, [pc, #152]	; (8000ec8 <SystemClock_Config+0xc8>)
 8000e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e32:	6413      	str	r3, [r2, #64]	; 0x40
 8000e34:	4b24      	ldr	r3, [pc, #144]	; (8000ec8 <SystemClock_Config+0xc8>)
 8000e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e40:	2300      	movs	r3, #0
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <SystemClock_Config+0xcc>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a20      	ldr	r2, [pc, #128]	; (8000ecc <SystemClock_Config+0xcc>)
 8000e4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e4e:	6013      	str	r3, [r2, #0]
 8000e50:	4b1e      	ldr	r3, [pc, #120]	; (8000ecc <SystemClock_Config+0xcc>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e66:	2302      	movs	r3, #2
 8000e68:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 4;
 8000e70:	2304      	movs	r3, #4
 8000e72:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 64;
 8000e74:	2340      	movs	r3, #64	; 0x40
 8000e76:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e7c:	2304      	movs	r3, #4
 8000e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e80:	f107 0320 	add.w	r3, r7, #32
 8000e84:	4618      	mov	r0, r3
 8000e86:	f001 fc37 	bl	80026f8 <HAL_RCC_OscConfig>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <SystemClock_Config+0x94>
    {
        Error_Handler();
 8000e90:	f000 f9b0 	bl	80011f4 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000e94:	230f      	movs	r3, #15
 8000e96:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000e9c:	2390      	movs	r3, #144	; 0x90
 8000e9e:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ea0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea4:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000eaa:	f107 030c 	add.w	r3, r7, #12
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f001 fe99 	bl	8002be8 <HAL_RCC_ClockConfig>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <SystemClock_Config+0xc0>
    {
        Error_Handler();
 8000ebc:	f000 f99a 	bl	80011f4 <Error_Handler>
    }
}
 8000ec0:	bf00      	nop
 8000ec2:	3750      	adds	r7, #80	; 0x50
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40007000 	.word	0x40007000

08000ed0 <Process_Command>:

/* USER CODE BEGIN 4 */

void Process_Command(char *command)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b0b8      	sub	sp, #224	; 0xe0
 8000ed4:	af02      	add	r7, sp, #8
 8000ed6:	6078      	str	r0, [r7, #4]
    char cmd[64];
    char args[64];
    char args2[64];
    uint32_t argi, argi2;
    uint8_t parsed = sscanf(command, "%63s %63s %63s", cmd, args, args2);
 8000ed8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000edc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8000ee0:	f107 0308 	add.w	r3, r7, #8
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	49aa      	ldr	r1, [pc, #680]	; (8001194 <Process_Command+0x2c4>)
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f002 fd66 	bl	80039bc <siscanf>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    if (parsed == 3)
 8000ef6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8000efa:	2b03      	cmp	r3, #3
 8000efc:	d167      	bne.n	8000fce <Process_Command+0xfe>
    {
        if (strcmp(cmd, "pulse") == 0)
 8000efe:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000f02:	49a5      	ldr	r1, [pc, #660]	; (8001198 <Process_Command+0x2c8>)
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff f963 	bl	80001d0 <strcmp>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d157      	bne.n	8000fc0 <Process_Command+0xf0>
        {
            snprintf((char *)tx_buf, BUF_SIZE, "OK\r\n");
 8000f10:	4aa2      	ldr	r2, [pc, #648]	; (800119c <Process_Command+0x2cc>)
 8000f12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f16:	48a2      	ldr	r0, [pc, #648]	; (80011a0 <Process_Command+0x2d0>)
 8000f18:	f002 fd1c 	bl	8003954 <sniprintf>
            uint16_t pin = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
            uint16_t duty = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
            if (isdigit(args[0]))
 8000f28:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000f2c:	3b30      	subs	r3, #48	; 0x30
 8000f2e:	2b09      	cmp	r3, #9
 8000f30:	f200 8121 	bhi.w	8001176 <Process_Command+0x2a6>
            {
                argi = strtol(args, (char *)NULL, 10);
 8000f34:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f38:	220a      	movs	r2, #10
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f002 fdef 	bl	8003b20 <strtol>
 8000f42:	4603      	mov	r3, r0
 8000f44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
                if (argi >= 0 && argi <= 15)
 8000f48:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000f4c:	2b0f      	cmp	r3, #15
 8000f4e:	d830      	bhi.n	8000fb2 <Process_Command+0xe2>
                {
                    if (isdigit(args2[0]))
 8000f50:	7a3b      	ldrb	r3, [r7, #8]
 8000f52:	3b30      	subs	r3, #48	; 0x30
 8000f54:	2b09      	cmp	r3, #9
 8000f56:	d825      	bhi.n	8000fa4 <Process_Command+0xd4>
                    {
                        argi2 = strtol(args2, (char *)NULL, 10);
 8000f58:	f107 0308 	add.w	r3, r7, #8
 8000f5c:	220a      	movs	r2, #10
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f002 fddd 	bl	8003b20 <strtol>
 8000f66:	4603      	mov	r3, r0
 8000f68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
                        if (argi2 >= 0 && argi <= 100)
 8000f6c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000f70:	2b64      	cmp	r3, #100	; 0x64
 8000f72:	d810      	bhi.n	8000f96 <Process_Command+0xc6>
                        {

                            _pwm_set_duty_delay(argi, argi2, 0);
 8000f74:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8000f7e:	b2d1      	uxtb	r1, r2
 8000f80:	2200      	movs	r2, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 f93c 	bl	8001200 <_pwm_set_duty_delay>
                            snprintf((char *)tx_buf, BUF_SIZE, "OK\r\n");
 8000f88:	4a84      	ldr	r2, [pc, #528]	; (800119c <Process_Command+0x2cc>)
 8000f8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f8e:	4884      	ldr	r0, [pc, #528]	; (80011a0 <Process_Command+0x2d0>)
 8000f90:	f002 fce0 	bl	8003954 <sniprintf>
 8000f94:	e0ef      	b.n	8001176 <Process_Command+0x2a6>
                        }
                        else
                        {
                            snprintf((char *)tx_buf, BUF_SIZE, "argument out of bounds <0 or >100%\r\n");
 8000f96:	4a83      	ldr	r2, [pc, #524]	; (80011a4 <Process_Command+0x2d4>)
 8000f98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f9c:	4880      	ldr	r0, [pc, #512]	; (80011a0 <Process_Command+0x2d0>)
 8000f9e:	f002 fcd9 	bl	8003954 <sniprintf>
 8000fa2:	e0e8      	b.n	8001176 <Process_Command+0x2a6>
                        }
                    }
                    else
                    {
                        snprintf((char *)tx_buf, BUF_SIZE, "argument out of bounds <0 or >15\r\n");
 8000fa4:	4a80      	ldr	r2, [pc, #512]	; (80011a8 <Process_Command+0x2d8>)
 8000fa6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000faa:	487d      	ldr	r0, [pc, #500]	; (80011a0 <Process_Command+0x2d0>)
 8000fac:	f002 fcd2 	bl	8003954 <sniprintf>
 8000fb0:	e0e1      	b.n	8001176 <Process_Command+0x2a6>
                    }
                }
                else
                {
                    snprintf((char *)tx_buf, BUF_SIZE, "unknown argument\r\n");
 8000fb2:	4a7e      	ldr	r2, [pc, #504]	; (80011ac <Process_Command+0x2dc>)
 8000fb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fb8:	4879      	ldr	r0, [pc, #484]	; (80011a0 <Process_Command+0x2d0>)
 8000fba:	f002 fccb 	bl	8003954 <sniprintf>
 8000fbe:	e0da      	b.n	8001176 <Process_Command+0x2a6>
                }
            }
        }
        else
        {
            snprintf((char *)tx_buf, BUF_SIZE, "command unknown\r\n");
 8000fc0:	4a7b      	ldr	r2, [pc, #492]	; (80011b0 <Process_Command+0x2e0>)
 8000fc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fc6:	4876      	ldr	r0, [pc, #472]	; (80011a0 <Process_Command+0x2d0>)
 8000fc8:	f002 fcc4 	bl	8003954 <sniprintf>
 8000fcc:	e0d3      	b.n	8001176 <Process_Command+0x2a6>
        }
    }

    else if (parsed == 2 || parsed == 1)
 8000fce:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d004      	beq.n	8000fe0 <Process_Command+0x110>
 8000fd6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	f040 80b1 	bne.w	8001142 <Process_Command+0x272>
    {
        if (strcmp(cmd, "trigger") == 0)
 8000fe0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000fe4:	4973      	ldr	r1, [pc, #460]	; (80011b4 <Process_Command+0x2e4>)
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff f8f2 	bl	80001d0 <strcmp>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d12c      	bne.n	800104c <Process_Command+0x17c>
        {
            if (strcmp(args, "on") == 0)
 8000ff2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ff6:	4970      	ldr	r1, [pc, #448]	; (80011b8 <Process_Command+0x2e8>)
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff f8e9 	bl	80001d0 <strcmp>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d109      	bne.n	8001018 <Process_Command+0x148>
            {
                snprintf((char *)tx_buf, BUF_SIZE, "trigger on\r\n"); // adc_buf[1]
 8001004:	4a6d      	ldr	r2, [pc, #436]	; (80011bc <Process_Command+0x2ec>)
 8001006:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800100a:	4865      	ldr	r0, [pc, #404]	; (80011a0 <Process_Command+0x2d0>)
 800100c:	f002 fca2 	bl	8003954 <sniprintf>
                _pwm_out_trigger(ON);
 8001010:	2001      	movs	r0, #1
 8001012:	f000 faa3 	bl	800155c <_pwm_out_trigger>
        if (strcmp(cmd, "trigger") == 0)
 8001016:	e0ae      	b.n	8001176 <Process_Command+0x2a6>
            }
            else if (strcmp(args, "off") == 0)
 8001018:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800101c:	4968      	ldr	r1, [pc, #416]	; (80011c0 <Process_Command+0x2f0>)
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff f8d6 	bl	80001d0 <strcmp>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d109      	bne.n	800103e <Process_Command+0x16e>
            {
                snprintf((char *)tx_buf, BUF_SIZE, "trigger off\r\n"); // adc_buf[0]
 800102a:	4a66      	ldr	r2, [pc, #408]	; (80011c4 <Process_Command+0x2f4>)
 800102c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001030:	485b      	ldr	r0, [pc, #364]	; (80011a0 <Process_Command+0x2d0>)
 8001032:	f002 fc8f 	bl	8003954 <sniprintf>
                _pwm_out_trigger(OFF);
 8001036:	2000      	movs	r0, #0
 8001038:	f000 fa90 	bl	800155c <_pwm_out_trigger>
        if (strcmp(cmd, "trigger") == 0)
 800103c:	e09b      	b.n	8001176 <Process_Command+0x2a6>
            }
            else
            {
                snprintf((char *)tx_buf, BUF_SIZE, "unknown trigger argument\r\n");
 800103e:	4a62      	ldr	r2, [pc, #392]	; (80011c8 <Process_Command+0x2f8>)
 8001040:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001044:	4856      	ldr	r0, [pc, #344]	; (80011a0 <Process_Command+0x2d0>)
 8001046:	f002 fc85 	bl	8003954 <sniprintf>
        if (strcmp(cmd, "trigger") == 0)
 800104a:	e094      	b.n	8001176 <Process_Command+0x2a6>
            }
        }

        else if (strcmp(cmd, "slepmod") == 0)
 800104c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001050:	495e      	ldr	r1, [pc, #376]	; (80011cc <Process_Command+0x2fc>)
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff f8bc 	bl	80001d0 <strcmp>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d12c      	bne.n	80010b8 <Process_Command+0x1e8>
        {
            if (strcmp(args, "off") == 0)
 800105e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001062:	4957      	ldr	r1, [pc, #348]	; (80011c0 <Process_Command+0x2f0>)
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff f8b3 	bl	80001d0 <strcmp>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d109      	bne.n	8001084 <Process_Command+0x1b4>
            {
                snprintf((char *)tx_buf, BUF_SIZE, "wake\r\n"); // adc_buf[1]
 8001070:	4a57      	ldr	r2, [pc, #348]	; (80011d0 <Process_Command+0x300>)
 8001072:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001076:	484a      	ldr	r0, [pc, #296]	; (80011a0 <Process_Command+0x2d0>)
 8001078:	f002 fc6c 	bl	8003954 <sniprintf>
                _pwm_sleep(wake);
 800107c:	2001      	movs	r0, #1
 800107e:	f000 fa45 	bl	800150c <_pwm_sleep>
        if (strcmp(cmd, "trigger") == 0)
 8001082:	e078      	b.n	8001176 <Process_Command+0x2a6>
            }
            else if (strcmp(args, "on") == 0)
 8001084:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001088:	494b      	ldr	r1, [pc, #300]	; (80011b8 <Process_Command+0x2e8>)
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff f8a0 	bl	80001d0 <strcmp>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d109      	bne.n	80010aa <Process_Command+0x1da>
            {
                snprintf((char *)tx_buf, BUF_SIZE, "sleep\r\n"); // adc_buf[0]
 8001096:	4a4f      	ldr	r2, [pc, #316]	; (80011d4 <Process_Command+0x304>)
 8001098:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800109c:	4840      	ldr	r0, [pc, #256]	; (80011a0 <Process_Command+0x2d0>)
 800109e:	f002 fc59 	bl	8003954 <sniprintf>
                _pwm_sleep(sleep);
 80010a2:	2000      	movs	r0, #0
 80010a4:	f000 fa32 	bl	800150c <_pwm_sleep>
        if (strcmp(cmd, "trigger") == 0)
 80010a8:	e065      	b.n	8001176 <Process_Command+0x2a6>
            }
            else
            {
                snprintf((char *)tx_buf, BUF_SIZE, "unknown sleepmode argument\r\n");
 80010aa:	4a4b      	ldr	r2, [pc, #300]	; (80011d8 <Process_Command+0x308>)
 80010ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010b0:	483b      	ldr	r0, [pc, #236]	; (80011a0 <Process_Command+0x2d0>)
 80010b2:	f002 fc4f 	bl	8003954 <sniprintf>
        if (strcmp(cmd, "trigger") == 0)
 80010b6:	e05e      	b.n	8001176 <Process_Command+0x2a6>
            }
        }

        else if (strcmp(cmd, "freqmod"
 80010b8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80010bc:	4947      	ldr	r1, [pc, #284]	; (80011dc <Process_Command+0x30c>)
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff f886 	bl	80001d0 <strcmp>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d134      	bne.n	8001134 <Process_Command+0x264>
                             "") == 0)
        {
            if (isdigit(args[0]))
 80010ca:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80010ce:	3b30      	subs	r3, #48	; 0x30
 80010d0:	2b09      	cmp	r3, #9
 80010d2:	d828      	bhi.n	8001126 <Process_Command+0x256>
            {
                argi = strtol(args, (char *)NULL, 10);
 80010d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010d8:	220a      	movs	r2, #10
 80010da:	2100      	movs	r1, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f002 fd1f 	bl	8003b20 <strtol>
 80010e2:	4603      	mov	r3, r0
 80010e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
                if (argi >= 24 && argi <= 1526)
 80010e8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80010ec:	2b17      	cmp	r3, #23
 80010ee:	d913      	bls.n	8001118 <Process_Command+0x248>
 80010f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80010f4:	f240 52f6 	movw	r2, #1526	; 0x5f6
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d80d      	bhi.n	8001118 <Process_Command+0x248>
                {
                    _pwm_set_freq(argi);
 80010fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001100:	b29b      	uxth	r3, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f000 f94e 	bl	80013a4 <_pwm_set_freq>
                    /*					ledPWM = argi;
                                        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, ledPWM * 100);*/
                    snprintf((char *)tx_buf, BUF_SIZE, "OK\r\n");
 8001108:	4a24      	ldr	r2, [pc, #144]	; (800119c <Process_Command+0x2cc>)
 800110a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800110e:	4824      	ldr	r0, [pc, #144]	; (80011a0 <Process_Command+0x2d0>)
 8001110:	f002 fc20 	bl	8003954 <sniprintf>
                {
 8001114:	bf00      	nop
        if (strcmp(cmd, "trigger") == 0)
 8001116:	e02e      	b.n	8001176 <Process_Command+0x2a6>
                }
                else
                {
                    snprintf((char *)tx_buf, BUF_SIZE, "argument out of bounds <24 or >1526\r\n");
 8001118:	4a31      	ldr	r2, [pc, #196]	; (80011e0 <Process_Command+0x310>)
 800111a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800111e:	4820      	ldr	r0, [pc, #128]	; (80011a0 <Process_Command+0x2d0>)
 8001120:	f002 fc18 	bl	8003954 <sniprintf>
        if (strcmp(cmd, "trigger") == 0)
 8001124:	e027      	b.n	8001176 <Process_Command+0x2a6>
                }
            }
            else
            {
                snprintf((char *)tx_buf, BUF_SIZE, "freqmod unknown argument\r\n");
 8001126:	4a2f      	ldr	r2, [pc, #188]	; (80011e4 <Process_Command+0x314>)
 8001128:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800112c:	481c      	ldr	r0, [pc, #112]	; (80011a0 <Process_Command+0x2d0>)
 800112e:	f002 fc11 	bl	8003954 <sniprintf>
        if (strcmp(cmd, "trigger") == 0)
 8001132:	e020      	b.n	8001176 <Process_Command+0x2a6>
            }
        }

        else
        {
            snprintf((char *)tx_buf, BUF_SIZE, "command unknown2\r\n");
 8001134:	4a2c      	ldr	r2, [pc, #176]	; (80011e8 <Process_Command+0x318>)
 8001136:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800113a:	4819      	ldr	r0, [pc, #100]	; (80011a0 <Process_Command+0x2d0>)
 800113c:	f002 fc0a 	bl	8003954 <sniprintf>
        if (strcmp(cmd, "trigger") == 0)
 8001140:	e019      	b.n	8001176 <Process_Command+0x2a6>
        }
    }

    else if (parsed == 1 && strcmp(cmd, "clear") == 0)
 8001142:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8001146:	2b01      	cmp	r3, #1
 8001148:	d10f      	bne.n	800116a <Process_Command+0x29a>
 800114a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800114e:	4927      	ldr	r1, [pc, #156]	; (80011ec <Process_Command+0x31c>)
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff f83d 	bl	80001d0 <strcmp>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d106      	bne.n	800116a <Process_Command+0x29a>
    {

        snprintf((char *)tx_buf, BUF_SIZE, "OK\r\n");
 800115c:	4a0f      	ldr	r2, [pc, #60]	; (800119c <Process_Command+0x2cc>)
 800115e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001162:	480f      	ldr	r0, [pc, #60]	; (80011a0 <Process_Command+0x2d0>)
 8001164:	f002 fbf6 	bl	8003954 <sniprintf>
    {
 8001168:	e005      	b.n	8001176 <Process_Command+0x2a6>
    }
    else
    {
        snprintf((char *)tx_buf, BUF_SIZE, "command unknown\r\n");
 800116a:	4a11      	ldr	r2, [pc, #68]	; (80011b0 <Process_Command+0x2e0>)
 800116c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001170:	480b      	ldr	r0, [pc, #44]	; (80011a0 <Process_Command+0x2d0>)
 8001172:	f002 fbef 	bl	8003954 <sniprintf>
    }
    HAL_UART_Transmit(&huart3, tx_buf, strlen((char *)tx_buf), 100);
 8001176:	480a      	ldr	r0, [pc, #40]	; (80011a0 <Process_Command+0x2d0>)
 8001178:	f7ff f834 	bl	80001e4 <strlen>
 800117c:	4603      	mov	r3, r0
 800117e:	b29a      	uxth	r2, r3
 8001180:	2364      	movs	r3, #100	; 0x64
 8001182:	4907      	ldr	r1, [pc, #28]	; (80011a0 <Process_Command+0x2d0>)
 8001184:	481a      	ldr	r0, [pc, #104]	; (80011f0 <Process_Command+0x320>)
 8001186:	f001 ff9c 	bl	80030c2 <HAL_UART_Transmit>
    // LCD_Printf("<< %s", tx_buf);
}
 800118a:	bf00      	nop
 800118c:	37d8      	adds	r7, #216	; 0xd8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	08004c6c 	.word	0x08004c6c
 8001198:	08004c7c 	.word	0x08004c7c
 800119c:	08004c84 	.word	0x08004c84
 80011a0:	20000164 	.word	0x20000164
 80011a4:	08004c8c 	.word	0x08004c8c
 80011a8:	08004cb4 	.word	0x08004cb4
 80011ac:	08004cd8 	.word	0x08004cd8
 80011b0:	08004cec 	.word	0x08004cec
 80011b4:	08004d00 	.word	0x08004d00
 80011b8:	08004d08 	.word	0x08004d08
 80011bc:	08004d0c 	.word	0x08004d0c
 80011c0:	08004d1c 	.word	0x08004d1c
 80011c4:	08004d20 	.word	0x08004d20
 80011c8:	08004d30 	.word	0x08004d30
 80011cc:	08004d4c 	.word	0x08004d4c
 80011d0:	08004d54 	.word	0x08004d54
 80011d4:	08004d5c 	.word	0x08004d5c
 80011d8:	08004d64 	.word	0x08004d64
 80011dc:	08004d84 	.word	0x08004d84
 80011e0:	08004d8c 	.word	0x08004d8c
 80011e4:	08004db4 	.word	0x08004db4
 80011e8:	08004dd0 	.word	0x08004dd0
 80011ec:	08004de4 	.word	0x08004de4
 80011f0:	2000056c 	.word	0x2000056c

080011f4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f8:	b672      	cpsid	i
}
 80011fa:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80011fc:	e7fe      	b.n	80011fc <Error_Handler+0x8>
	...

08001200 <_pwm_set_duty_delay>:
}*/

void _pwm_set_duty_delay(uint8_t PIN, uint8_t dyty_cycle,
                         uint8_t start_delay_percent) // if start_delay_percent + dyty_cycle>100%, dyty_cycle has range 0-99% and start_delay_percent 0-100%
                                                      // if start_delay_percent + dyty_cycle<=100% dyty_cycle has range 0-100% and start_delay_percent 0-100%
{
 8001200:	b5b0      	push	{r4, r5, r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
 800120a:	460b      	mov	r3, r1
 800120c:	71bb      	strb	r3, [r7, #6]
 800120e:	4613      	mov	r3, r2
 8001210:	717b      	strb	r3, [r7, #5]
    uint16_t on = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	81fb      	strh	r3, [r7, #14]
    uint16_t off = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	81bb      	strh	r3, [r7, #12]
    uint16_t off2 = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	817b      	strh	r3, [r7, #10]
    if ((dyty_cycle + start_delay_percent) <= 100) // if dyty_cycle+start_delay_percent<=100%
 800121e:	79ba      	ldrb	r2, [r7, #6]
 8001220:	797b      	ldrb	r3, [r7, #5]
 8001222:	4413      	add	r3, r2
 8001224:	2b64      	cmp	r3, #100	; 0x64
 8001226:	dc70      	bgt.n	800130a <_pwm_set_duty_delay+0x10a>
    {
        if (start_delay_percent != 0)
 8001228:	797b      	ldrb	r3, [r7, #5]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d042      	beq.n	80012b4 <_pwm_set_duty_delay+0xb4>
        {
            on = LED_ON(start_delay_percent);
 800122e:	797b      	ldrb	r3, [r7, #5]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fab1 	bl	8000798 <__aeabi_i2d>
 8001236:	a358      	add	r3, pc, #352	; (adr r3, 8001398 <_pwm_set_duty_delay+0x198>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	f7ff f830 	bl	80002a0 <__aeabi_dmul>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4610      	mov	r0, r2
 8001246:	4619      	mov	r1, r3
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	4b54      	ldr	r3, [pc, #336]	; (80013a0 <_pwm_set_duty_delay+0x1a0>)
 800124e:	f7ff f955 	bl	80004fc <__aeabi_dsub>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4610      	mov	r0, r2
 8001258:	4619      	mov	r1, r3
 800125a:	f7ff fb07 	bl	800086c <__aeabi_d2uiz>
 800125e:	4603      	mov	r3, r0
 8001260:	81fb      	strh	r3, [r7, #14]
            off = LED_OFF(dyty_cycle, on);
 8001262:	79bb      	ldrb	r3, [r7, #6]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fa97 	bl	8000798 <__aeabi_i2d>
 800126a:	a34b      	add	r3, pc, #300	; (adr r3, 8001398 <_pwm_set_duty_delay+0x198>)
 800126c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001270:	f7ff f816 	bl	80002a0 <__aeabi_dmul>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4614      	mov	r4, r2
 800127a:	461d      	mov	r5, r3
 800127c:	89fb      	ldrh	r3, [r7, #14]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fa8a 	bl	8000798 <__aeabi_i2d>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4620      	mov	r0, r4
 800128a:	4629      	mov	r1, r5
 800128c:	f7ff f938 	bl	8000500 <__adddf3>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4610      	mov	r0, r2
 8001296:	4619      	mov	r1, r3
 8001298:	f04f 0200 	mov.w	r2, #0
 800129c:	4b40      	ldr	r3, [pc, #256]	; (80013a0 <_pwm_set_duty_delay+0x1a0>)
 800129e:	f7ff f92d 	bl	80004fc <__aeabi_dsub>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4610      	mov	r0, r2
 80012a8:	4619      	mov	r1, r3
 80012aa:	f7ff fadf 	bl	800086c <__aeabi_d2uiz>
 80012ae:	4603      	mov	r3, r0
 80012b0:	81bb      	strh	r3, [r7, #12]
 80012b2:	e065      	b.n	8001380 <_pwm_set_duty_delay+0x180>
        }
        else
        {
            on = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	81fb      	strh	r3, [r7, #14]
            off = LED_OFF(dyty_cycle, on);
 80012b8:	79bb      	ldrb	r3, [r7, #6]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fa6c 	bl	8000798 <__aeabi_i2d>
 80012c0:	a335      	add	r3, pc, #212	; (adr r3, 8001398 <_pwm_set_duty_delay+0x198>)
 80012c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c6:	f7fe ffeb 	bl	80002a0 <__aeabi_dmul>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4614      	mov	r4, r2
 80012d0:	461d      	mov	r5, r3
 80012d2:	89fb      	ldrh	r3, [r7, #14]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fa5f 	bl	8000798 <__aeabi_i2d>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4620      	mov	r0, r4
 80012e0:	4629      	mov	r1, r5
 80012e2:	f7ff f90d 	bl	8000500 <__adddf3>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4610      	mov	r0, r2
 80012ec:	4619      	mov	r1, r3
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	4b2b      	ldr	r3, [pc, #172]	; (80013a0 <_pwm_set_duty_delay+0x1a0>)
 80012f4:	f7ff f902 	bl	80004fc <__aeabi_dsub>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	f7ff fab4 	bl	800086c <__aeabi_d2uiz>
 8001304:	4603      	mov	r3, r0
 8001306:	81bb      	strh	r3, [r7, #12]
 8001308:	e03a      	b.n	8001380 <_pwm_set_duty_delay+0x180>
    }
    else
    { // if dyty_cycle+start_delay_percent)>100%
        /*			on=0;
         off=LED_OFF(dyty_cycle,0);*/
        on = LED_ON(start_delay_percent);
 800130a:	797b      	ldrb	r3, [r7, #5]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fa43 	bl	8000798 <__aeabi_i2d>
 8001312:	a321      	add	r3, pc, #132	; (adr r3, 8001398 <_pwm_set_duty_delay+0x198>)
 8001314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001318:	f7fe ffc2 	bl	80002a0 <__aeabi_dmul>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4610      	mov	r0, r2
 8001322:	4619      	mov	r1, r3
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <_pwm_set_duty_delay+0x1a0>)
 800132a:	f7ff f8e7 	bl	80004fc <__aeabi_dsub>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	4610      	mov	r0, r2
 8001334:	4619      	mov	r1, r3
 8001336:	f7ff fa99 	bl	800086c <__aeabi_d2uiz>
 800133a:	4603      	mov	r3, r0
 800133c:	81fb      	strh	r3, [r7, #14]
        off2 = LED_ON(dyty_cycle);
 800133e:	79bb      	ldrb	r3, [r7, #6]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fa29 	bl	8000798 <__aeabi_i2d>
 8001346:	a314      	add	r3, pc, #80	; (adr r3, 8001398 <_pwm_set_duty_delay+0x198>)
 8001348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134c:	f7fe ffa8 	bl	80002a0 <__aeabi_dmul>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4610      	mov	r0, r2
 8001356:	4619      	mov	r1, r3
 8001358:	f04f 0200 	mov.w	r2, #0
 800135c:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <_pwm_set_duty_delay+0x1a0>)
 800135e:	f7ff f8cd 	bl	80004fc <__aeabi_dsub>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4610      	mov	r0, r2
 8001368:	4619      	mov	r1, r3
 800136a:	f7ff fa7f 	bl	800086c <__aeabi_d2uiz>
 800136e:	4603      	mov	r3, r0
 8001370:	817b      	strh	r3, [r7, #10]
        off = (on + off2) - 4095;
 8001372:	89fa      	ldrh	r2, [r7, #14]
 8001374:	897b      	ldrh	r3, [r7, #10]
 8001376:	4413      	add	r3, r2
 8001378:	b29b      	uxth	r3, r3
 800137a:	f6a3 73ff 	subw	r3, r3, #4095	; 0xfff
 800137e:	81bb      	strh	r3, [r7, #12]
    }
    pwm_writefunc(PIN, on, off);
 8001380:	89ba      	ldrh	r2, [r7, #12]
 8001382:	89f9      	ldrh	r1, [r7, #14]
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	4618      	mov	r0, r3
 8001388:	f000 f848 	bl	800141c <pwm_writefunc>
};
 800138c:	bf00      	nop
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bdb0      	pop	{r4, r5, r7, pc}
 8001394:	f3af 8000 	nop.w
 8001398:	47ae147b 	.word	0x47ae147b
 800139c:	40447ae1 	.word	0x40447ae1
 80013a0:	3ff00000 	.word	0x3ff00000

080013a4 <_pwm_set_freq>:
void _pwm_set_freq(uint16_t freq)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af02      	add	r7, sp, #8
 80013aa:	4603      	mov	r3, r0
 80013ac:	80fb      	strh	r3, [r7, #6]
    if (freq <= 1526 && freq >= 24)
 80013ae:	88fb      	ldrh	r3, [r7, #6]
 80013b0:	f240 52f6 	movw	r2, #1526	; 0x5f6
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d827      	bhi.n	8001408 <_pwm_set_freq+0x64>
 80013b8:	88fb      	ldrh	r3, [r7, #6]
 80013ba:	2b17      	cmp	r3, #23
 80013bc:	d924      	bls.n	8001408 <_pwm_set_freq+0x64>
    {
        _pwm_sleep(sleep);
 80013be:	2000      	movs	r0, #0
 80013c0:	f000 f8a4 	bl	800150c <_pwm_sleep>
        uint16_t prescaler;
        prescaler = (OSC_CLOCK / (4096 * freq)) - 1;
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	031b      	lsls	r3, r3, #12
 80013c8:	4a11      	ldr	r2, [pc, #68]	; (8001410 <_pwm_set_freq+0x6c>)
 80013ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	3b01      	subs	r3, #1
 80013d2:	81fb      	strh	r3, [r7, #14]
        uint8_t TxBuffer[2] = {0};
 80013d4:	2300      	movs	r3, #0
 80013d6:	81bb      	strh	r3, [r7, #12]
        TxBuffer[0] = 0xFE; // PRE_SCALE
 80013d8:	23fe      	movs	r3, #254	; 0xfe
 80013da:	733b      	strb	r3, [r7, #12]
        TxBuffer[1] = (prescaler > 0x03) ? prescaler : 0x03;
 80013dc:	89fb      	ldrh	r3, [r7, #14]
 80013de:	2b03      	cmp	r3, #3
 80013e0:	bf38      	it	cc
 80013e2:	2303      	movcc	r3, #3
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	737b      	strb	r3, [r7, #13]
        HAL_I2C_Master_Transmit(&hi2c1, dewId, (uint8_t *)&TxBuffer, 2, 1000);
 80013ea:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <_pwm_set_freq+0x70>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	b299      	uxth	r1, r3
 80013f0:	f107 020c 	add.w	r2, r7, #12
 80013f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	2302      	movs	r3, #2
 80013fc:	4806      	ldr	r0, [pc, #24]	; (8001418 <_pwm_set_freq+0x74>)
 80013fe:	f000 fe73 	bl	80020e8 <HAL_I2C_Master_Transmit>
        _pwm_sleep(wake);
 8001402:	2001      	movs	r0, #1
 8001404:	f000 f882 	bl	800150c <_pwm_sleep>
    }
}
 8001408:	bf00      	nop
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	017d7840 	.word	0x017d7840
 8001414:	20000000 	.word	0x20000000
 8001418:	20000090 	.word	0x20000090

0800141c <pwm_writefunc>:

uint8_t pwm_writefunc(uint8_t PIN, uint16_t HIGH, uint16_t LOW)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af02      	add	r7, sp, #8
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
 8001426:	460b      	mov	r3, r1
 8001428:	80bb      	strh	r3, [r7, #4]
 800142a:	4613      	mov	r3, r2
 800142c:	807b      	strh	r3, [r7, #2]
    uint8_t start_ledaddr = 0x06; // led0 ON LOW byte address + 1 ON HIGH byte address, and if start_ledaddr+2 its LOW byte address
 800142e:	2306      	movs	r3, #6
 8001430:	75fb      	strb	r3, [r7, #23]

    if (PIN < 0 && PIN > 15)
    {
        return (1);
    }
    if (HIGH > 0xFFF)
 8001432:	88bb      	ldrh	r3, [r7, #4]
 8001434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001438:	d301      	bcc.n	800143e <pwm_writefunc+0x22>
    {
        return (2);
 800143a:	2302      	movs	r3, #2
 800143c:	e05e      	b.n	80014fc <pwm_writefunc+0xe0>
    }
    if (LOW > 0xFFF)
 800143e:	887b      	ldrh	r3, [r7, #2]
 8001440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001444:	d301      	bcc.n	800144a <pwm_writefunc+0x2e>
    {
        return (3);
 8001446:	2303      	movs	r3, #3
 8001448:	e058      	b.n	80014fc <pwm_writefunc+0xe0>
    }
    uint8_t TxBuffer[8] = {0};
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]

    start_ledaddr = start_ledaddr + 4 * PIN; // add to address +4 every next pin
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	b2da      	uxtb	r2, r3
 8001458:	7dfb      	ldrb	r3, [r7, #23]
 800145a:	4413      	add	r3, r2
 800145c:	75fb      	strb	r3, [r7, #23]

    TxBuffer[0] = start_ledaddr; // LED_ON_L
 800145e:	7dfb      	ldrb	r3, [r7, #23]
 8001460:	733b      	strb	r3, [r7, #12]
    TxBuffer[1] = HIGH & 0xff;   // write LOW byte
 8001462:	88bb      	ldrh	r3, [r7, #4]
 8001464:	b2db      	uxtb	r3, r3
 8001466:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, dewId, (uint8_t *)&TxBuffer, 2, 1000);
 8001468:	4b26      	ldr	r3, [pc, #152]	; (8001504 <pwm_writefunc+0xe8>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	b299      	uxth	r1, r3
 800146e:	f107 020c 	add.w	r2, r7, #12
 8001472:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	2302      	movs	r3, #2
 800147a:	4823      	ldr	r0, [pc, #140]	; (8001508 <pwm_writefunc+0xec>)
 800147c:	f000 fe34 	bl	80020e8 <HAL_I2C_Master_Transmit>

    TxBuffer[0] = start_ledaddr + 1; // LED_ON_H
 8001480:	7dfb      	ldrb	r3, [r7, #23]
 8001482:	3301      	adds	r3, #1
 8001484:	b2db      	uxtb	r3, r3
 8001486:	733b      	strb	r3, [r7, #12]
    TxBuffer[1] = HIGH >> 8;         // werite High byte
 8001488:	88bb      	ldrh	r3, [r7, #4]
 800148a:	0a1b      	lsrs	r3, r3, #8
 800148c:	b29b      	uxth	r3, r3
 800148e:	b2db      	uxtb	r3, r3
 8001490:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, dewId, (uint8_t *)&TxBuffer, 2, 1000);
 8001492:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <pwm_writefunc+0xe8>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	b299      	uxth	r1, r3
 8001498:	f107 020c 	add.w	r2, r7, #12
 800149c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	2302      	movs	r3, #2
 80014a4:	4818      	ldr	r0, [pc, #96]	; (8001508 <pwm_writefunc+0xec>)
 80014a6:	f000 fe1f 	bl	80020e8 <HAL_I2C_Master_Transmit>

    TxBuffer[0] = start_ledaddr + 2; // LED_ON_L
 80014aa:	7dfb      	ldrb	r3, [r7, #23]
 80014ac:	3302      	adds	r3, #2
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	733b      	strb	r3, [r7, #12]
    TxBuffer[1] = LOW & 0xff;        // write LOW byte
 80014b2:	887b      	ldrh	r3, [r7, #2]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, dewId, (uint8_t *)&TxBuffer, 2, 1000);
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <pwm_writefunc+0xe8>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	b299      	uxth	r1, r3
 80014be:	f107 020c 	add.w	r2, r7, #12
 80014c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	2302      	movs	r3, #2
 80014ca:	480f      	ldr	r0, [pc, #60]	; (8001508 <pwm_writefunc+0xec>)
 80014cc:	f000 fe0c 	bl	80020e8 <HAL_I2C_Master_Transmit>

    TxBuffer[0] = start_ledaddr + 3; // LED_ON_H
 80014d0:	7dfb      	ldrb	r3, [r7, #23]
 80014d2:	3303      	adds	r3, #3
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	733b      	strb	r3, [r7, #12]
    TxBuffer[1] = LOW >> 8;          // werite High byte
 80014d8:	887b      	ldrh	r3, [r7, #2]
 80014da:	0a1b      	lsrs	r3, r3, #8
 80014dc:	b29b      	uxth	r3, r3
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, dewId, (uint8_t *)&TxBuffer, 2, 1000);
 80014e2:	4b08      	ldr	r3, [pc, #32]	; (8001504 <pwm_writefunc+0xe8>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	b299      	uxth	r1, r3
 80014e8:	f107 020c 	add.w	r2, r7, #12
 80014ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f0:	9300      	str	r3, [sp, #0]
 80014f2:	2302      	movs	r3, #2
 80014f4:	4804      	ldr	r0, [pc, #16]	; (8001508 <pwm_writefunc+0xec>)
 80014f6:	f000 fdf7 	bl	80020e8 <HAL_I2C_Master_Transmit>

    return (0);
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000000 	.word	0x20000000
 8001508:	20000090 	.word	0x20000090

0800150c <_pwm_sleep>:
    TxBuffer[0] = 0x00; // MODE0
    TxBuffer[1] = 0x01;
    HAL_I2C_Master_Transmit(&hi2c1, dewId, (uint8_t *)&TxBuffer, 2, 1000);
};
void _pwm_sleep(STATE status)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af02      	add	r7, sp, #8
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
    uint8_t TxBuffer[8] = {0};
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
    TxBuffer[0] = 0x00; // address
 800151e:	2300      	movs	r3, #0
 8001520:	723b      	strb	r3, [r7, #8]
    if (status == sleep)
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d102      	bne.n	800152e <_pwm_sleep+0x22>
    {
        TxBuffer[1] = 0x11; // sleep on
 8001528:	2311      	movs	r3, #17
 800152a:	727b      	strb	r3, [r7, #9]
 800152c:	e001      	b.n	8001532 <_pwm_sleep+0x26>
    }
    else
    {
        TxBuffer[1] = 0x01;
 800152e:	2301      	movs	r3, #1
 8001530:	727b      	strb	r3, [r7, #9]
    }
    HAL_I2C_Master_Transmit(&hi2c1, dewId, (uint8_t *)&TxBuffer, 2, 1000);
 8001532:	4b08      	ldr	r3, [pc, #32]	; (8001554 <_pwm_sleep+0x48>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	b299      	uxth	r1, r3
 8001538:	f107 0208 	add.w	r2, r7, #8
 800153c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	2302      	movs	r3, #2
 8001544:	4804      	ldr	r0, [pc, #16]	; (8001558 <_pwm_sleep+0x4c>)
 8001546:	f000 fdcf 	bl	80020e8 <HAL_I2C_Master_Transmit>
};
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000000 	.word	0x20000000
 8001558:	20000090 	.word	0x20000090

0800155c <_pwm_out_trigger>:
void _pwm_out_trigger(TRIGG status) // turn OFF/ON all pwm pin
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
    if (status == OFF)
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d105      	bne.n	8001578 <_pwm_out_trigger+0x1c>
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800156c:	2201      	movs	r2, #1
 800156e:	2180      	movs	r1, #128	; 0x80
 8001570:	4806      	ldr	r0, [pc, #24]	; (800158c <_pwm_out_trigger+0x30>)
 8001572:	f000 fc5b 	bl	8001e2c <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
    }
};
 8001576:	e004      	b.n	8001582 <_pwm_out_trigger+0x26>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001578:	2200      	movs	r2, #0
 800157a:	2180      	movs	r1, #128	; 0x80
 800157c:	4803      	ldr	r0, [pc, #12]	; (800158c <_pwm_out_trigger+0x30>)
 800157e:	f000 fc55 	bl	8001e2c <HAL_GPIO_WritePin>
};
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40020400 	.word	0x40020400

08001590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <HAL_MspInit+0x4c>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	4a0f      	ldr	r2, [pc, #60]	; (80015dc <HAL_MspInit+0x4c>)
 80015a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a4:	6453      	str	r3, [r2, #68]	; 0x44
 80015a6:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <HAL_MspInit+0x4c>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	603b      	str	r3, [r7, #0]
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <HAL_MspInit+0x4c>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	4a08      	ldr	r2, [pc, #32]	; (80015dc <HAL_MspInit+0x4c>)
 80015bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c0:	6413      	str	r3, [r2, #64]	; 0x40
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <HAL_MspInit+0x4c>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ca:	603b      	str	r3, [r7, #0]
 80015cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800

080015e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <NMI_Handler+0x4>

080015e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ea:	e7fe      	b.n	80015ea <HardFault_Handler+0x4>

080015ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <MemManage_Handler+0x4>

080015f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f6:	e7fe      	b.n	80015f6 <BusFault_Handler+0x4>

080015f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015fc:	e7fe      	b.n	80015fc <UsageFault_Handler+0x4>

080015fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800162c:	f000 f938 	bl	80018a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}

08001634 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800163c:	4a14      	ldr	r2, [pc, #80]	; (8001690 <_sbrk+0x5c>)
 800163e:	4b15      	ldr	r3, [pc, #84]	; (8001694 <_sbrk+0x60>)
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001648:	4b13      	ldr	r3, [pc, #76]	; (8001698 <_sbrk+0x64>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d102      	bne.n	8001656 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001650:	4b11      	ldr	r3, [pc, #68]	; (8001698 <_sbrk+0x64>)
 8001652:	4a12      	ldr	r2, [pc, #72]	; (800169c <_sbrk+0x68>)
 8001654:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <_sbrk+0x64>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4413      	add	r3, r2
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	429a      	cmp	r2, r3
 8001662:	d207      	bcs.n	8001674 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001664:	f002 f944 	bl	80038f0 <__errno>
 8001668:	4603      	mov	r3, r0
 800166a:	220c      	movs	r2, #12
 800166c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800166e:	f04f 33ff 	mov.w	r3, #4294967295
 8001672:	e009      	b.n	8001688 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <_sbrk+0x64>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800167a:	4b07      	ldr	r3, [pc, #28]	; (8001698 <_sbrk+0x64>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	4a05      	ldr	r2, [pc, #20]	; (8001698 <_sbrk+0x64>)
 8001684:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001686:	68fb      	ldr	r3, [r7, #12]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20020000 	.word	0x20020000
 8001694:	00000400 	.word	0x00000400
 8001698:	20000568 	.word	0x20000568
 800169c:	200005c8 	.word	0x200005c8

080016a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <SystemInit+0x20>)
 80016a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016aa:	4a05      	ldr	r2, [pc, #20]	; (80016c0 <SystemInit+0x20>)
 80016ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <MX_USART3_UART_Init+0x4c>)
 80016ca:	4a12      	ldr	r2, [pc, #72]	; (8001714 <MX_USART3_UART_Init+0x50>)
 80016cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <MX_USART3_UART_Init+0x4c>)
 80016d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <MX_USART3_UART_Init+0x4c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <MX_USART3_UART_Init+0x4c>)
 80016de:	2200      	movs	r2, #0
 80016e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <MX_USART3_UART_Init+0x4c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016e8:	4b09      	ldr	r3, [pc, #36]	; (8001710 <MX_USART3_UART_Init+0x4c>)
 80016ea:	220c      	movs	r2, #12
 80016ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <MX_USART3_UART_Init+0x4c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <MX_USART3_UART_Init+0x4c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016fa:	4805      	ldr	r0, [pc, #20]	; (8001710 <MX_USART3_UART_Init+0x4c>)
 80016fc:	f001 fc94 	bl	8003028 <HAL_UART_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001706:	f7ff fd75 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	2000056c 	.word	0x2000056c
 8001714:	40004800 	.word	0x40004800

08001718 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08a      	sub	sp, #40	; 0x28
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a19      	ldr	r2, [pc, #100]	; (800179c <HAL_UART_MspInit+0x84>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d12c      	bne.n	8001794 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <HAL_UART_MspInit+0x88>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	4a17      	ldr	r2, [pc, #92]	; (80017a0 <HAL_UART_MspInit+0x88>)
 8001744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001748:	6413      	str	r3, [r2, #64]	; 0x40
 800174a:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <HAL_UART_MspInit+0x88>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <HAL_UART_MspInit+0x88>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a10      	ldr	r2, [pc, #64]	; (80017a0 <HAL_UART_MspInit+0x88>)
 8001760:	f043 0308 	orr.w	r3, r3, #8
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <HAL_UART_MspInit+0x88>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0308 	and.w	r3, r3, #8
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001772:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001778:	2302      	movs	r3, #2
 800177a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001780:	2303      	movs	r3, #3
 8001782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001784:	2307      	movs	r3, #7
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4619      	mov	r1, r3
 800178e:	4805      	ldr	r0, [pc, #20]	; (80017a4 <HAL_UART_MspInit+0x8c>)
 8001790:	f000 f9b0 	bl	8001af4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001794:	bf00      	nop
 8001796:	3728      	adds	r7, #40	; 0x28
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40004800 	.word	0x40004800
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40020c00 	.word	0x40020c00

080017a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017ac:	480d      	ldr	r0, [pc, #52]	; (80017e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017ae:	490e      	ldr	r1, [pc, #56]	; (80017e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017b0:	4a0e      	ldr	r2, [pc, #56]	; (80017ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b4:	e002      	b.n	80017bc <LoopCopyDataInit>

080017b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ba:	3304      	adds	r3, #4

080017bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c0:	d3f9      	bcc.n	80017b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017c2:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017c4:	4c0b      	ldr	r4, [pc, #44]	; (80017f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c8:	e001      	b.n	80017ce <LoopFillZerobss>

080017ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017cc:	3204      	adds	r2, #4

080017ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d0:	d3fb      	bcc.n	80017ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017d2:	f7ff ff65 	bl	80016a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017d6:	f002 f891 	bl	80038fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017da:	f7ff fabd 	bl	8000d58 <main>
  bx  lr    
 80017de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80017ec:	08004fd0 	.word	0x08004fd0
  ldr r2, =_sbss
 80017f0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80017f4:	200005c4 	.word	0x200005c4

080017f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017f8:	e7fe      	b.n	80017f8 <ADC_IRQHandler>
	...

080017fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001800:	4b0e      	ldr	r3, [pc, #56]	; (800183c <HAL_Init+0x40>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a0d      	ldr	r2, [pc, #52]	; (800183c <HAL_Init+0x40>)
 8001806:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800180a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800180c:	4b0b      	ldr	r3, [pc, #44]	; (800183c <HAL_Init+0x40>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a0a      	ldr	r2, [pc, #40]	; (800183c <HAL_Init+0x40>)
 8001812:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001816:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001818:	4b08      	ldr	r3, [pc, #32]	; (800183c <HAL_Init+0x40>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a07      	ldr	r2, [pc, #28]	; (800183c <HAL_Init+0x40>)
 800181e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001822:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001824:	2003      	movs	r0, #3
 8001826:	f000 f931 	bl	8001a8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800182a:	200f      	movs	r0, #15
 800182c:	f000 f808 	bl	8001840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001830:	f7ff feae 	bl	8001590 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40023c00 	.word	0x40023c00

08001840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001848:	4b12      	ldr	r3, [pc, #72]	; (8001894 <HAL_InitTick+0x54>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <HAL_InitTick+0x58>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	4619      	mov	r1, r3
 8001852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001856:	fbb3 f3f1 	udiv	r3, r3, r1
 800185a:	fbb2 f3f3 	udiv	r3, r2, r3
 800185e:	4618      	mov	r0, r3
 8001860:	f000 f93b 	bl	8001ada <HAL_SYSTICK_Config>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e00e      	b.n	800188c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b0f      	cmp	r3, #15
 8001872:	d80a      	bhi.n	800188a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001874:	2200      	movs	r2, #0
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	f04f 30ff 	mov.w	r0, #4294967295
 800187c:	f000 f911 	bl	8001aa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001880:	4a06      	ldr	r2, [pc, #24]	; (800189c <HAL_InitTick+0x5c>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001886:	2300      	movs	r3, #0
 8001888:	e000      	b.n	800188c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
}
 800188c:	4618      	mov	r0, r3
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000004 	.word	0x20000004
 8001898:	2000000c 	.word	0x2000000c
 800189c:	20000008 	.word	0x20000008

080018a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a4:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <HAL_IncTick+0x20>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	461a      	mov	r2, r3
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_IncTick+0x24>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4413      	add	r3, r2
 80018b0:	4a04      	ldr	r2, [pc, #16]	; (80018c4 <HAL_IncTick+0x24>)
 80018b2:	6013      	str	r3, [r2, #0]
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	2000000c 	.word	0x2000000c
 80018c4:	200005b0 	.word	0x200005b0

080018c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return uwTick;
 80018cc:	4b03      	ldr	r3, [pc, #12]	; (80018dc <HAL_GetTick+0x14>)
 80018ce:	681b      	ldr	r3, [r3, #0]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	200005b0 	.word	0x200005b0

080018e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018e8:	f7ff ffee 	bl	80018c8 <HAL_GetTick>
 80018ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f8:	d005      	beq.n	8001906 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018fa:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <HAL_Delay+0x44>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	461a      	mov	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4413      	add	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001906:	bf00      	nop
 8001908:	f7ff ffde 	bl	80018c8 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	429a      	cmp	r2, r3
 8001916:	d8f7      	bhi.n	8001908 <HAL_Delay+0x28>
  {
  }
}
 8001918:	bf00      	nop
 800191a:	bf00      	nop
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	2000000c 	.word	0x2000000c

08001928 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001938:	4b0c      	ldr	r3, [pc, #48]	; (800196c <__NVIC_SetPriorityGrouping+0x44>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001944:	4013      	ands	r3, r2
 8001946:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001950:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800195a:	4a04      	ldr	r2, [pc, #16]	; (800196c <__NVIC_SetPriorityGrouping+0x44>)
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	60d3      	str	r3, [r2, #12]
}
 8001960:	bf00      	nop
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001974:	4b04      	ldr	r3, [pc, #16]	; (8001988 <__NVIC_GetPriorityGrouping+0x18>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	0a1b      	lsrs	r3, r3, #8
 800197a:	f003 0307 	and.w	r3, r3, #7
}
 800197e:	4618      	mov	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	6039      	str	r1, [r7, #0]
 8001996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199c:	2b00      	cmp	r3, #0
 800199e:	db0a      	blt.n	80019b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	490c      	ldr	r1, [pc, #48]	; (80019d8 <__NVIC_SetPriority+0x4c>)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	0112      	lsls	r2, r2, #4
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	440b      	add	r3, r1
 80019b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b4:	e00a      	b.n	80019cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	4908      	ldr	r1, [pc, #32]	; (80019dc <__NVIC_SetPriority+0x50>)
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	3b04      	subs	r3, #4
 80019c4:	0112      	lsls	r2, r2, #4
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	440b      	add	r3, r1
 80019ca:	761a      	strb	r2, [r3, #24]
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000e100 	.word	0xe000e100
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b089      	sub	sp, #36	; 0x24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f1c3 0307 	rsb	r3, r3, #7
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	bf28      	it	cs
 80019fe:	2304      	movcs	r3, #4
 8001a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3304      	adds	r3, #4
 8001a06:	2b06      	cmp	r3, #6
 8001a08:	d902      	bls.n	8001a10 <NVIC_EncodePriority+0x30>
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3b03      	subs	r3, #3
 8001a0e:	e000      	b.n	8001a12 <NVIC_EncodePriority+0x32>
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a14:	f04f 32ff 	mov.w	r2, #4294967295
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43da      	mvns	r2, r3
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	401a      	ands	r2, r3
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a28:	f04f 31ff 	mov.w	r1, #4294967295
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a32:	43d9      	mvns	r1, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a38:	4313      	orrs	r3, r2
         );
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3724      	adds	r7, #36	; 0x24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
	...

08001a48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a58:	d301      	bcc.n	8001a5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e00f      	b.n	8001a7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a5e:	4a0a      	ldr	r2, [pc, #40]	; (8001a88 <SysTick_Config+0x40>)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a66:	210f      	movs	r1, #15
 8001a68:	f04f 30ff 	mov.w	r0, #4294967295
 8001a6c:	f7ff ff8e 	bl	800198c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a70:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <SysTick_Config+0x40>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a76:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <SysTick_Config+0x40>)
 8001a78:	2207      	movs	r2, #7
 8001a7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	e000e010 	.word	0xe000e010

08001a8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff ff47 	bl	8001928 <__NVIC_SetPriorityGrouping>
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b086      	sub	sp, #24
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	607a      	str	r2, [r7, #4]
 8001aae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab4:	f7ff ff5c 	bl	8001970 <__NVIC_GetPriorityGrouping>
 8001ab8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	68b9      	ldr	r1, [r7, #8]
 8001abe:	6978      	ldr	r0, [r7, #20]
 8001ac0:	f7ff ff8e 	bl	80019e0 <NVIC_EncodePriority>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aca:	4611      	mov	r1, r2
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff ff5d 	bl	800198c <__NVIC_SetPriority>
}
 8001ad2:	bf00      	nop
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff ffb0 	bl	8001a48 <SysTick_Config>
 8001ae8:	4603      	mov	r3, r0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b089      	sub	sp, #36	; 0x24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
 8001b0e:	e16b      	b.n	8001de8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b10:	2201      	movs	r2, #1
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	4013      	ands	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	f040 815a 	bne.w	8001de2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 0303 	and.w	r3, r3, #3
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d005      	beq.n	8001b46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d130      	bne.n	8001ba8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	2203      	movs	r2, #3
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43db      	mvns	r3, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	68da      	ldr	r2, [r3, #12]
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	091b      	lsrs	r3, r3, #4
 8001b92:	f003 0201 	and.w	r2, r3, #1
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	2b03      	cmp	r3, #3
 8001bb2:	d017      	beq.n	8001be4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 0303 	and.w	r3, r3, #3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d123      	bne.n	8001c38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	08da      	lsrs	r2, r3, #3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3208      	adds	r2, #8
 8001bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	220f      	movs	r2, #15
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	691a      	ldr	r2, [r3, #16]
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	08da      	lsrs	r2, r3, #3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	3208      	adds	r2, #8
 8001c32:	69b9      	ldr	r1, [r7, #24]
 8001c34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	2203      	movs	r2, #3
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 0203 	and.w	r2, r3, #3
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 80b4 	beq.w	8001de2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	4b60      	ldr	r3, [pc, #384]	; (8001e00 <HAL_GPIO_Init+0x30c>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	4a5f      	ldr	r2, [pc, #380]	; (8001e00 <HAL_GPIO_Init+0x30c>)
 8001c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c88:	6453      	str	r3, [r2, #68]	; 0x44
 8001c8a:	4b5d      	ldr	r3, [pc, #372]	; (8001e00 <HAL_GPIO_Init+0x30c>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c96:	4a5b      	ldr	r2, [pc, #364]	; (8001e04 <HAL_GPIO_Init+0x310>)
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	089b      	lsrs	r3, r3, #2
 8001c9c:	3302      	adds	r3, #2
 8001c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	220f      	movs	r2, #15
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a52      	ldr	r2, [pc, #328]	; (8001e08 <HAL_GPIO_Init+0x314>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d02b      	beq.n	8001d1a <HAL_GPIO_Init+0x226>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a51      	ldr	r2, [pc, #324]	; (8001e0c <HAL_GPIO_Init+0x318>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d025      	beq.n	8001d16 <HAL_GPIO_Init+0x222>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a50      	ldr	r2, [pc, #320]	; (8001e10 <HAL_GPIO_Init+0x31c>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d01f      	beq.n	8001d12 <HAL_GPIO_Init+0x21e>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a4f      	ldr	r2, [pc, #316]	; (8001e14 <HAL_GPIO_Init+0x320>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d019      	beq.n	8001d0e <HAL_GPIO_Init+0x21a>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a4e      	ldr	r2, [pc, #312]	; (8001e18 <HAL_GPIO_Init+0x324>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d013      	beq.n	8001d0a <HAL_GPIO_Init+0x216>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a4d      	ldr	r2, [pc, #308]	; (8001e1c <HAL_GPIO_Init+0x328>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d00d      	beq.n	8001d06 <HAL_GPIO_Init+0x212>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a4c      	ldr	r2, [pc, #304]	; (8001e20 <HAL_GPIO_Init+0x32c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d007      	beq.n	8001d02 <HAL_GPIO_Init+0x20e>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a4b      	ldr	r2, [pc, #300]	; (8001e24 <HAL_GPIO_Init+0x330>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d101      	bne.n	8001cfe <HAL_GPIO_Init+0x20a>
 8001cfa:	2307      	movs	r3, #7
 8001cfc:	e00e      	b.n	8001d1c <HAL_GPIO_Init+0x228>
 8001cfe:	2308      	movs	r3, #8
 8001d00:	e00c      	b.n	8001d1c <HAL_GPIO_Init+0x228>
 8001d02:	2306      	movs	r3, #6
 8001d04:	e00a      	b.n	8001d1c <HAL_GPIO_Init+0x228>
 8001d06:	2305      	movs	r3, #5
 8001d08:	e008      	b.n	8001d1c <HAL_GPIO_Init+0x228>
 8001d0a:	2304      	movs	r3, #4
 8001d0c:	e006      	b.n	8001d1c <HAL_GPIO_Init+0x228>
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e004      	b.n	8001d1c <HAL_GPIO_Init+0x228>
 8001d12:	2302      	movs	r3, #2
 8001d14:	e002      	b.n	8001d1c <HAL_GPIO_Init+0x228>
 8001d16:	2301      	movs	r3, #1
 8001d18:	e000      	b.n	8001d1c <HAL_GPIO_Init+0x228>
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	69fa      	ldr	r2, [r7, #28]
 8001d1e:	f002 0203 	and.w	r2, r2, #3
 8001d22:	0092      	lsls	r2, r2, #2
 8001d24:	4093      	lsls	r3, r2
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d2c:	4935      	ldr	r1, [pc, #212]	; (8001e04 <HAL_GPIO_Init+0x310>)
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	089b      	lsrs	r3, r3, #2
 8001d32:	3302      	adds	r3, #2
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d3a:	4b3b      	ldr	r3, [pc, #236]	; (8001e28 <HAL_GPIO_Init+0x334>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	43db      	mvns	r3, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4013      	ands	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d5e:	4a32      	ldr	r2, [pc, #200]	; (8001e28 <HAL_GPIO_Init+0x334>)
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d64:	4b30      	ldr	r3, [pc, #192]	; (8001e28 <HAL_GPIO_Init+0x334>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d88:	4a27      	ldr	r2, [pc, #156]	; (8001e28 <HAL_GPIO_Init+0x334>)
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d8e:	4b26      	ldr	r3, [pc, #152]	; (8001e28 <HAL_GPIO_Init+0x334>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	43db      	mvns	r3, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001db2:	4a1d      	ldr	r2, [pc, #116]	; (8001e28 <HAL_GPIO_Init+0x334>)
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001db8:	4b1b      	ldr	r3, [pc, #108]	; (8001e28 <HAL_GPIO_Init+0x334>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ddc:	4a12      	ldr	r2, [pc, #72]	; (8001e28 <HAL_GPIO_Init+0x334>)
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3301      	adds	r3, #1
 8001de6:	61fb      	str	r3, [r7, #28]
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	2b0f      	cmp	r3, #15
 8001dec:	f67f ae90 	bls.w	8001b10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001df0:	bf00      	nop
 8001df2:	bf00      	nop
 8001df4:	3724      	adds	r7, #36	; 0x24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40013800 	.word	0x40013800
 8001e08:	40020000 	.word	0x40020000
 8001e0c:	40020400 	.word	0x40020400
 8001e10:	40020800 	.word	0x40020800
 8001e14:	40020c00 	.word	0x40020c00
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	40021400 	.word	0x40021400
 8001e20:	40021800 	.word	0x40021800
 8001e24:	40021c00 	.word	0x40021c00
 8001e28:	40013c00 	.word	0x40013c00

08001e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	807b      	strh	r3, [r7, #2]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e3c:	787b      	ldrb	r3, [r7, #1]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e42:	887a      	ldrh	r2, [r7, #2]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e48:	e003      	b.n	8001e52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e4a:	887b      	ldrh	r3, [r7, #2]
 8001e4c:	041a      	lsls	r2, r3, #16
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	619a      	str	r2, [r3, #24]
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e12b      	b.n	80020ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d106      	bne.n	8001e8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7fe ff1e 	bl	8000cc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2224      	movs	r2, #36	; 0x24
 8001e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f022 0201 	bic.w	r2, r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ec2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ec4:	f001 f888 	bl	8002fd8 <HAL_RCC_GetPCLK1Freq>
 8001ec8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	4a81      	ldr	r2, [pc, #516]	; (80020d4 <HAL_I2C_Init+0x274>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d807      	bhi.n	8001ee4 <HAL_I2C_Init+0x84>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4a80      	ldr	r2, [pc, #512]	; (80020d8 <HAL_I2C_Init+0x278>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	bf94      	ite	ls
 8001edc:	2301      	movls	r3, #1
 8001ede:	2300      	movhi	r3, #0
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	e006      	b.n	8001ef2 <HAL_I2C_Init+0x92>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4a7d      	ldr	r2, [pc, #500]	; (80020dc <HAL_I2C_Init+0x27c>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	bf94      	ite	ls
 8001eec:	2301      	movls	r3, #1
 8001eee:	2300      	movhi	r3, #0
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e0e7      	b.n	80020ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	4a78      	ldr	r2, [pc, #480]	; (80020e0 <HAL_I2C_Init+0x280>)
 8001efe:	fba2 2303 	umull	r2, r3, r2, r3
 8001f02:	0c9b      	lsrs	r3, r3, #18
 8001f04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	4a6a      	ldr	r2, [pc, #424]	; (80020d4 <HAL_I2C_Init+0x274>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d802      	bhi.n	8001f34 <HAL_I2C_Init+0xd4>
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	3301      	adds	r3, #1
 8001f32:	e009      	b.n	8001f48 <HAL_I2C_Init+0xe8>
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f3a:	fb02 f303 	mul.w	r3, r2, r3
 8001f3e:	4a69      	ldr	r2, [pc, #420]	; (80020e4 <HAL_I2C_Init+0x284>)
 8001f40:	fba2 2303 	umull	r2, r3, r2, r3
 8001f44:	099b      	lsrs	r3, r3, #6
 8001f46:	3301      	adds	r3, #1
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	430b      	orrs	r3, r1
 8001f4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	495c      	ldr	r1, [pc, #368]	; (80020d4 <HAL_I2C_Init+0x274>)
 8001f64:	428b      	cmp	r3, r1
 8001f66:	d819      	bhi.n	8001f9c <HAL_I2C_Init+0x13c>
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	1e59      	subs	r1, r3, #1
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f76:	1c59      	adds	r1, r3, #1
 8001f78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f7c:	400b      	ands	r3, r1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00a      	beq.n	8001f98 <HAL_I2C_Init+0x138>
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	1e59      	subs	r1, r3, #1
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f90:	3301      	adds	r3, #1
 8001f92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f96:	e051      	b.n	800203c <HAL_I2C_Init+0x1dc>
 8001f98:	2304      	movs	r3, #4
 8001f9a:	e04f      	b.n	800203c <HAL_I2C_Init+0x1dc>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d111      	bne.n	8001fc8 <HAL_I2C_Init+0x168>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	1e58      	subs	r0, r3, #1
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6859      	ldr	r1, [r3, #4]
 8001fac:	460b      	mov	r3, r1
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	440b      	add	r3, r1
 8001fb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	bf0c      	ite	eq
 8001fc0:	2301      	moveq	r3, #1
 8001fc2:	2300      	movne	r3, #0
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	e012      	b.n	8001fee <HAL_I2C_Init+0x18e>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	1e58      	subs	r0, r3, #1
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6859      	ldr	r1, [r3, #4]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	0099      	lsls	r1, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fde:	3301      	adds	r3, #1
 8001fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	bf0c      	ite	eq
 8001fe8:	2301      	moveq	r3, #1
 8001fea:	2300      	movne	r3, #0
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <HAL_I2C_Init+0x196>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e022      	b.n	800203c <HAL_I2C_Init+0x1dc>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10e      	bne.n	800201c <HAL_I2C_Init+0x1bc>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	1e58      	subs	r0, r3, #1
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6859      	ldr	r1, [r3, #4]
 8002006:	460b      	mov	r3, r1
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	440b      	add	r3, r1
 800200c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002010:	3301      	adds	r3, #1
 8002012:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800201a:	e00f      	b.n	800203c <HAL_I2C_Init+0x1dc>
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	1e58      	subs	r0, r3, #1
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6859      	ldr	r1, [r3, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	440b      	add	r3, r1
 800202a:	0099      	lsls	r1, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002032:	3301      	adds	r3, #1
 8002034:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002038:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	6809      	ldr	r1, [r1, #0]
 8002040:	4313      	orrs	r3, r2
 8002042:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69da      	ldr	r2, [r3, #28]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	431a      	orrs	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800206a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6911      	ldr	r1, [r2, #16]
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	68d2      	ldr	r2, [r2, #12]
 8002076:	4311      	orrs	r1, r2
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6812      	ldr	r2, [r2, #0]
 800207c:	430b      	orrs	r3, r1
 800207e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	695a      	ldr	r2, [r3, #20]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	431a      	orrs	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0201 	orr.w	r2, r2, #1
 80020aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2220      	movs	r2, #32
 80020b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	000186a0 	.word	0x000186a0
 80020d8:	001e847f 	.word	0x001e847f
 80020dc:	003d08ff 	.word	0x003d08ff
 80020e0:	431bde83 	.word	0x431bde83
 80020e4:	10624dd3 	.word	0x10624dd3

080020e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b088      	sub	sp, #32
 80020ec:	af02      	add	r7, sp, #8
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	607a      	str	r2, [r7, #4]
 80020f2:	461a      	mov	r2, r3
 80020f4:	460b      	mov	r3, r1
 80020f6:	817b      	strh	r3, [r7, #10]
 80020f8:	4613      	mov	r3, r2
 80020fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020fc:	f7ff fbe4 	bl	80018c8 <HAL_GetTick>
 8002100:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b20      	cmp	r3, #32
 800210c:	f040 80e0 	bne.w	80022d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	2319      	movs	r3, #25
 8002116:	2201      	movs	r2, #1
 8002118:	4970      	ldr	r1, [pc, #448]	; (80022dc <HAL_I2C_Master_Transmit+0x1f4>)
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 f964 	bl	80023e8 <I2C_WaitOnFlagUntilTimeout>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002126:	2302      	movs	r3, #2
 8002128:	e0d3      	b.n	80022d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002130:	2b01      	cmp	r3, #1
 8002132:	d101      	bne.n	8002138 <HAL_I2C_Master_Transmit+0x50>
 8002134:	2302      	movs	r3, #2
 8002136:	e0cc      	b.n	80022d2 <HAL_I2C_Master_Transmit+0x1ea>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b01      	cmp	r3, #1
 800214c:	d007      	beq.n	800215e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f042 0201 	orr.w	r2, r2, #1
 800215c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800216c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2221      	movs	r2, #33	; 0x21
 8002172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2210      	movs	r2, #16
 800217a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	893a      	ldrh	r2, [r7, #8]
 800218e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002194:	b29a      	uxth	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	4a50      	ldr	r2, [pc, #320]	; (80022e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800219e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021a0:	8979      	ldrh	r1, [r7, #10]
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	6a3a      	ldr	r2, [r7, #32]
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 f89c 	bl	80022e4 <I2C_MasterRequestWrite>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e08d      	b.n	80022d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021b6:	2300      	movs	r3, #0
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	695b      	ldr	r3, [r3, #20]
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	613b      	str	r3, [r7, #16]
 80021ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80021cc:	e066      	b.n	800229c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	6a39      	ldr	r1, [r7, #32]
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 f9de 	bl	8002594 <I2C_WaitOnTXEFlagUntilTimeout>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00d      	beq.n	80021fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d107      	bne.n	80021f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e06b      	b.n	80022d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	781a      	ldrb	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	1c5a      	adds	r2, r3, #1
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002214:	b29b      	uxth	r3, r3
 8002216:	3b01      	subs	r3, #1
 8002218:	b29a      	uxth	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002222:	3b01      	subs	r3, #1
 8002224:	b29a      	uxth	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b04      	cmp	r3, #4
 8002236:	d11b      	bne.n	8002270 <HAL_I2C_Master_Transmit+0x188>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223c:	2b00      	cmp	r3, #0
 800223e:	d017      	beq.n	8002270 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	781a      	ldrb	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	1c5a      	adds	r2, r3, #1
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225a:	b29b      	uxth	r3, r3
 800225c:	3b01      	subs	r3, #1
 800225e:	b29a      	uxth	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002268:	3b01      	subs	r3, #1
 800226a:	b29a      	uxth	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	6a39      	ldr	r1, [r7, #32]
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f000 f9ce 	bl	8002616 <I2C_WaitOnBTFFlagUntilTimeout>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00d      	beq.n	800229c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	2b04      	cmp	r3, #4
 8002286:	d107      	bne.n	8002298 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002296:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e01a      	b.n	80022d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d194      	bne.n	80021ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2220      	movs	r2, #32
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	e000      	b.n	80022d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80022d0:	2302      	movs	r3, #2
  }
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	00100002 	.word	0x00100002
 80022e0:	ffff0000 	.word	0xffff0000

080022e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b088      	sub	sp, #32
 80022e8:	af02      	add	r7, sp, #8
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	607a      	str	r2, [r7, #4]
 80022ee:	603b      	str	r3, [r7, #0]
 80022f0:	460b      	mov	r3, r1
 80022f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	2b08      	cmp	r3, #8
 80022fe:	d006      	beq.n	800230e <I2C_MasterRequestWrite+0x2a>
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d003      	beq.n	800230e <I2C_MasterRequestWrite+0x2a>
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800230c:	d108      	bne.n	8002320 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	e00b      	b.n	8002338 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002324:	2b12      	cmp	r3, #18
 8002326:	d107      	bne.n	8002338 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002336:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 f84f 	bl	80023e8 <I2C_WaitOnFlagUntilTimeout>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00d      	beq.n	800236c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800235e:	d103      	bne.n	8002368 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002366:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e035      	b.n	80023d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002374:	d108      	bne.n	8002388 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002376:	897b      	ldrh	r3, [r7, #10]
 8002378:	b2db      	uxtb	r3, r3
 800237a:	461a      	mov	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002384:	611a      	str	r2, [r3, #16]
 8002386:	e01b      	b.n	80023c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002388:	897b      	ldrh	r3, [r7, #10]
 800238a:	11db      	asrs	r3, r3, #7
 800238c:	b2db      	uxtb	r3, r3
 800238e:	f003 0306 	and.w	r3, r3, #6
 8002392:	b2db      	uxtb	r3, r3
 8002394:	f063 030f 	orn	r3, r3, #15
 8002398:	b2da      	uxtb	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	490e      	ldr	r1, [pc, #56]	; (80023e0 <I2C_MasterRequestWrite+0xfc>)
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 f875 	bl	8002496 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e010      	b.n	80023d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023b6:	897b      	ldrh	r3, [r7, #10]
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	4907      	ldr	r1, [pc, #28]	; (80023e4 <I2C_MasterRequestWrite+0x100>)
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f000 f865 	bl	8002496 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	00010008 	.word	0x00010008
 80023e4:	00010002 	.word	0x00010002

080023e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	603b      	str	r3, [r7, #0]
 80023f4:	4613      	mov	r3, r2
 80023f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023f8:	e025      	b.n	8002446 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002400:	d021      	beq.n	8002446 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002402:	f7ff fa61 	bl	80018c8 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	429a      	cmp	r2, r3
 8002410:	d302      	bcc.n	8002418 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d116      	bne.n	8002446 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2220      	movs	r2, #32
 8002422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f043 0220 	orr.w	r2, r3, #32
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e023      	b.n	800248e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	0c1b      	lsrs	r3, r3, #16
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b01      	cmp	r3, #1
 800244e:	d10d      	bne.n	800246c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	43da      	mvns	r2, r3
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	4013      	ands	r3, r2
 800245c:	b29b      	uxth	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	bf0c      	ite	eq
 8002462:	2301      	moveq	r3, #1
 8002464:	2300      	movne	r3, #0
 8002466:	b2db      	uxtb	r3, r3
 8002468:	461a      	mov	r2, r3
 800246a:	e00c      	b.n	8002486 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	43da      	mvns	r2, r3
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	4013      	ands	r3, r2
 8002478:	b29b      	uxth	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	bf0c      	ite	eq
 800247e:	2301      	moveq	r3, #1
 8002480:	2300      	movne	r3, #0
 8002482:	b2db      	uxtb	r3, r3
 8002484:	461a      	mov	r2, r3
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	429a      	cmp	r2, r3
 800248a:	d0b6      	beq.n	80023fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b084      	sub	sp, #16
 800249a:	af00      	add	r7, sp, #0
 800249c:	60f8      	str	r0, [r7, #12]
 800249e:	60b9      	str	r1, [r7, #8]
 80024a0:	607a      	str	r2, [r7, #4]
 80024a2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024a4:	e051      	b.n	800254a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024b4:	d123      	bne.n	80024fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024c4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024ce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2220      	movs	r2, #32
 80024da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	f043 0204 	orr.w	r2, r3, #4
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e046      	b.n	800258c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002504:	d021      	beq.n	800254a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002506:	f7ff f9df 	bl	80018c8 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	429a      	cmp	r2, r3
 8002514:	d302      	bcc.n	800251c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d116      	bne.n	800254a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2220      	movs	r2, #32
 8002526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	f043 0220 	orr.w	r2, r3, #32
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e020      	b.n	800258c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	0c1b      	lsrs	r3, r3, #16
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b01      	cmp	r3, #1
 8002552:	d10c      	bne.n	800256e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	43da      	mvns	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	4013      	ands	r3, r2
 8002560:	b29b      	uxth	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	bf14      	ite	ne
 8002566:	2301      	movne	r3, #1
 8002568:	2300      	moveq	r3, #0
 800256a:	b2db      	uxtb	r3, r3
 800256c:	e00b      	b.n	8002586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	43da      	mvns	r2, r3
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	4013      	ands	r3, r2
 800257a:	b29b      	uxth	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	bf14      	ite	ne
 8002580:	2301      	movne	r3, #1
 8002582:	2300      	moveq	r3, #0
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d18d      	bne.n	80024a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025a0:	e02d      	b.n	80025fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 f878 	bl	8002698 <I2C_IsAcknowledgeFailed>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e02d      	b.n	800260e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b8:	d021      	beq.n	80025fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ba:	f7ff f985 	bl	80018c8 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d302      	bcc.n	80025d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d116      	bne.n	80025fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2220      	movs	r2, #32
 80025da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	f043 0220 	orr.w	r2, r3, #32
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e007      	b.n	800260e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002608:	2b80      	cmp	r3, #128	; 0x80
 800260a:	d1ca      	bne.n	80025a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b084      	sub	sp, #16
 800261a:	af00      	add	r7, sp, #0
 800261c:	60f8      	str	r0, [r7, #12]
 800261e:	60b9      	str	r1, [r7, #8]
 8002620:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002622:	e02d      	b.n	8002680 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f000 f837 	bl	8002698 <I2C_IsAcknowledgeFailed>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e02d      	b.n	8002690 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263a:	d021      	beq.n	8002680 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800263c:	f7ff f944 	bl	80018c8 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	429a      	cmp	r2, r3
 800264a:	d302      	bcc.n	8002652 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d116      	bne.n	8002680 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2220      	movs	r2, #32
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266c:	f043 0220 	orr.w	r2, r3, #32
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e007      	b.n	8002690 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	f003 0304 	and.w	r3, r3, #4
 800268a:	2b04      	cmp	r3, #4
 800268c:	d1ca      	bne.n	8002624 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ae:	d11b      	bne.n	80026e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2220      	movs	r2, #32
 80026c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d4:	f043 0204 	orr.w	r2, r3, #4
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e000      	b.n	80026ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
	...

080026f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e267      	b.n	8002bda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d075      	beq.n	8002802 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002716:	4b88      	ldr	r3, [pc, #544]	; (8002938 <HAL_RCC_OscConfig+0x240>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 030c 	and.w	r3, r3, #12
 800271e:	2b04      	cmp	r3, #4
 8002720:	d00c      	beq.n	800273c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002722:	4b85      	ldr	r3, [pc, #532]	; (8002938 <HAL_RCC_OscConfig+0x240>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800272a:	2b08      	cmp	r3, #8
 800272c:	d112      	bne.n	8002754 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800272e:	4b82      	ldr	r3, [pc, #520]	; (8002938 <HAL_RCC_OscConfig+0x240>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002736:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800273a:	d10b      	bne.n	8002754 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800273c:	4b7e      	ldr	r3, [pc, #504]	; (8002938 <HAL_RCC_OscConfig+0x240>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d05b      	beq.n	8002800 <HAL_RCC_OscConfig+0x108>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d157      	bne.n	8002800 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e242      	b.n	8002bda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800275c:	d106      	bne.n	800276c <HAL_RCC_OscConfig+0x74>
 800275e:	4b76      	ldr	r3, [pc, #472]	; (8002938 <HAL_RCC_OscConfig+0x240>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a75      	ldr	r2, [pc, #468]	; (8002938 <HAL_RCC_OscConfig+0x240>)
 8002764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	e01d      	b.n	80027a8 <HAL_RCC_OscConfig+0xb0>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002774:	d10c      	bne.n	8002790 <HAL_RCC_OscConfig+0x98>
 8002776:	4b70      	ldr	r3, [pc, #448]	; (8002938 <HAL_RCC_OscConfig+0x240>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a6f      	ldr	r2, [pc, #444]	; (8002938 <HAL_RCC_OscConfig+0x240>)
 800277c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002780:	6013      	str	r3, [r2, #0]
 8002782:	4b6d      	ldr	r3, [pc, #436]	; (8002938 <HAL_RCC_OscConfig+0x240>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a6c      	ldr	r2, [pc, #432]	; (8002938 <HAL_RCC_OscConfig+0x240>)
 8002788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	e00b      	b.n	80027a8 <HAL_RCC_OscConfig+0xb0>
 8002790:	4b69      	ldr	r3, [pc, #420]	; (8002938 <HAL_RCC_OscConfig+0x240>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a68      	ldr	r2, [pc, #416]	; (8002938 <HAL_RCC_OscConfig+0x240>)
 8002796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800279a:	6013      	str	r3, [r2, #0]
 800279c:	4b66      	ldr	r3, [pc, #408]	; (8002938 <HAL_RCC_OscConfig+0x240>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a65      	ldr	r2, [pc, #404]	; (8002938 <HAL_RCC_OscConfig+0x240>)
 80027a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d013      	beq.n	80027d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b0:	f7ff f88a 	bl	80018c8 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027b8:	f7ff f886 	bl	80018c8 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b64      	cmp	r3, #100	; 0x64
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e207      	b.n	8002bda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ca:	4b5b      	ldr	r3, [pc, #364]	; (8002938 <HAL_RCC_OscConfig+0x240>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0f0      	beq.n	80027b8 <HAL_RCC_OscConfig+0xc0>
 80027d6:	e014      	b.n	8002802 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d8:	f7ff f876 	bl	80018c8 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027e0:	f7ff f872 	bl	80018c8 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b64      	cmp	r3, #100	; 0x64
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e1f3      	b.n	8002bda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027f2:	4b51      	ldr	r3, [pc, #324]	; (8002938 <HAL_RCC_OscConfig+0x240>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_OscConfig+0xe8>
 80027fe:	e000      	b.n	8002802 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002800:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d063      	beq.n	80028d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800280e:	4b4a      	ldr	r3, [pc, #296]	; (8002938 <HAL_RCC_OscConfig+0x240>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 030c 	and.w	r3, r3, #12
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00b      	beq.n	8002832 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800281a:	4b47      	ldr	r3, [pc, #284]	; (8002938 <HAL_RCC_OscConfig+0x240>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002822:	2b08      	cmp	r3, #8
 8002824:	d11c      	bne.n	8002860 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002826:	4b44      	ldr	r3, [pc, #272]	; (8002938 <HAL_RCC_OscConfig+0x240>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d116      	bne.n	8002860 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002832:	4b41      	ldr	r3, [pc, #260]	; (8002938 <HAL_RCC_OscConfig+0x240>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d005      	beq.n	800284a <HAL_RCC_OscConfig+0x152>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d001      	beq.n	800284a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e1c7      	b.n	8002bda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800284a:	4b3b      	ldr	r3, [pc, #236]	; (8002938 <HAL_RCC_OscConfig+0x240>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	4937      	ldr	r1, [pc, #220]	; (8002938 <HAL_RCC_OscConfig+0x240>)
 800285a:	4313      	orrs	r3, r2
 800285c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800285e:	e03a      	b.n	80028d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d020      	beq.n	80028aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002868:	4b34      	ldr	r3, [pc, #208]	; (800293c <HAL_RCC_OscConfig+0x244>)
 800286a:	2201      	movs	r2, #1
 800286c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286e:	f7ff f82b 	bl	80018c8 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002876:	f7ff f827 	bl	80018c8 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e1a8      	b.n	8002bda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002888:	4b2b      	ldr	r3, [pc, #172]	; (8002938 <HAL_RCC_OscConfig+0x240>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0f0      	beq.n	8002876 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002894:	4b28      	ldr	r3, [pc, #160]	; (8002938 <HAL_RCC_OscConfig+0x240>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	4925      	ldr	r1, [pc, #148]	; (8002938 <HAL_RCC_OscConfig+0x240>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	600b      	str	r3, [r1, #0]
 80028a8:	e015      	b.n	80028d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028aa:	4b24      	ldr	r3, [pc, #144]	; (800293c <HAL_RCC_OscConfig+0x244>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b0:	f7ff f80a 	bl	80018c8 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028b8:	f7ff f806 	bl	80018c8 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e187      	b.n	8002bda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ca:	4b1b      	ldr	r3, [pc, #108]	; (8002938 <HAL_RCC_OscConfig+0x240>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f0      	bne.n	80028b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0308 	and.w	r3, r3, #8
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d036      	beq.n	8002950 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d016      	beq.n	8002918 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ea:	4b15      	ldr	r3, [pc, #84]	; (8002940 <HAL_RCC_OscConfig+0x248>)
 80028ec:	2201      	movs	r2, #1
 80028ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f0:	f7fe ffea 	bl	80018c8 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028f8:	f7fe ffe6 	bl	80018c8 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e167      	b.n	8002bda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800290a:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <HAL_RCC_OscConfig+0x240>)
 800290c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCC_OscConfig+0x200>
 8002916:	e01b      	b.n	8002950 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002918:	4b09      	ldr	r3, [pc, #36]	; (8002940 <HAL_RCC_OscConfig+0x248>)
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800291e:	f7fe ffd3 	bl	80018c8 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002924:	e00e      	b.n	8002944 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002926:	f7fe ffcf 	bl	80018c8 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d907      	bls.n	8002944 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e150      	b.n	8002bda <HAL_RCC_OscConfig+0x4e2>
 8002938:	40023800 	.word	0x40023800
 800293c:	42470000 	.word	0x42470000
 8002940:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002944:	4b88      	ldr	r3, [pc, #544]	; (8002b68 <HAL_RCC_OscConfig+0x470>)
 8002946:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1ea      	bne.n	8002926 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 8097 	beq.w	8002a8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800295e:	2300      	movs	r3, #0
 8002960:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002962:	4b81      	ldr	r3, [pc, #516]	; (8002b68 <HAL_RCC_OscConfig+0x470>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10f      	bne.n	800298e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800296e:	2300      	movs	r3, #0
 8002970:	60bb      	str	r3, [r7, #8]
 8002972:	4b7d      	ldr	r3, [pc, #500]	; (8002b68 <HAL_RCC_OscConfig+0x470>)
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	4a7c      	ldr	r2, [pc, #496]	; (8002b68 <HAL_RCC_OscConfig+0x470>)
 8002978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800297c:	6413      	str	r3, [r2, #64]	; 0x40
 800297e:	4b7a      	ldr	r3, [pc, #488]	; (8002b68 <HAL_RCC_OscConfig+0x470>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002986:	60bb      	str	r3, [r7, #8]
 8002988:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800298a:	2301      	movs	r3, #1
 800298c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800298e:	4b77      	ldr	r3, [pc, #476]	; (8002b6c <HAL_RCC_OscConfig+0x474>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002996:	2b00      	cmp	r3, #0
 8002998:	d118      	bne.n	80029cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800299a:	4b74      	ldr	r3, [pc, #464]	; (8002b6c <HAL_RCC_OscConfig+0x474>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a73      	ldr	r2, [pc, #460]	; (8002b6c <HAL_RCC_OscConfig+0x474>)
 80029a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029a6:	f7fe ff8f 	bl	80018c8 <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ac:	e008      	b.n	80029c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ae:	f7fe ff8b 	bl	80018c8 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e10c      	b.n	8002bda <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c0:	4b6a      	ldr	r3, [pc, #424]	; (8002b6c <HAL_RCC_OscConfig+0x474>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0f0      	beq.n	80029ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d106      	bne.n	80029e2 <HAL_RCC_OscConfig+0x2ea>
 80029d4:	4b64      	ldr	r3, [pc, #400]	; (8002b68 <HAL_RCC_OscConfig+0x470>)
 80029d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d8:	4a63      	ldr	r2, [pc, #396]	; (8002b68 <HAL_RCC_OscConfig+0x470>)
 80029da:	f043 0301 	orr.w	r3, r3, #1
 80029de:	6713      	str	r3, [r2, #112]	; 0x70
 80029e0:	e01c      	b.n	8002a1c <HAL_RCC_OscConfig+0x324>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	2b05      	cmp	r3, #5
 80029e8:	d10c      	bne.n	8002a04 <HAL_RCC_OscConfig+0x30c>
 80029ea:	4b5f      	ldr	r3, [pc, #380]	; (8002b68 <HAL_RCC_OscConfig+0x470>)
 80029ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ee:	4a5e      	ldr	r2, [pc, #376]	; (8002b68 <HAL_RCC_OscConfig+0x470>)
 80029f0:	f043 0304 	orr.w	r3, r3, #4
 80029f4:	6713      	str	r3, [r2, #112]	; 0x70
 80029f6:	4b5c      	ldr	r3, [pc, #368]	; (8002b68 <HAL_RCC_OscConfig+0x470>)
 80029f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fa:	4a5b      	ldr	r2, [pc, #364]	; (8002b68 <HAL_RCC_OscConfig+0x470>)
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	6713      	str	r3, [r2, #112]	; 0x70
 8002a02:	e00b      	b.n	8002a1c <HAL_RCC_OscConfig+0x324>
 8002a04:	4b58      	ldr	r3, [pc, #352]	; (8002b68 <HAL_RCC_OscConfig+0x470>)
 8002a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a08:	4a57      	ldr	r2, [pc, #348]	; (8002b68 <HAL_RCC_OscConfig+0x470>)
 8002a0a:	f023 0301 	bic.w	r3, r3, #1
 8002a0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a10:	4b55      	ldr	r3, [pc, #340]	; (8002b68 <HAL_RCC_OscConfig+0x470>)
 8002a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a14:	4a54      	ldr	r2, [pc, #336]	; (8002b68 <HAL_RCC_OscConfig+0x470>)
 8002a16:	f023 0304 	bic.w	r3, r3, #4
 8002a1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d015      	beq.n	8002a50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a24:	f7fe ff50 	bl	80018c8 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a2a:	e00a      	b.n	8002a42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a2c:	f7fe ff4c 	bl	80018c8 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e0cb      	b.n	8002bda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a42:	4b49      	ldr	r3, [pc, #292]	; (8002b68 <HAL_RCC_OscConfig+0x470>)
 8002a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0ee      	beq.n	8002a2c <HAL_RCC_OscConfig+0x334>
 8002a4e:	e014      	b.n	8002a7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a50:	f7fe ff3a 	bl	80018c8 <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a56:	e00a      	b.n	8002a6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a58:	f7fe ff36 	bl	80018c8 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e0b5      	b.n	8002bda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a6e:	4b3e      	ldr	r3, [pc, #248]	; (8002b68 <HAL_RCC_OscConfig+0x470>)
 8002a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1ee      	bne.n	8002a58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a7a:	7dfb      	ldrb	r3, [r7, #23]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d105      	bne.n	8002a8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a80:	4b39      	ldr	r3, [pc, #228]	; (8002b68 <HAL_RCC_OscConfig+0x470>)
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	4a38      	ldr	r2, [pc, #224]	; (8002b68 <HAL_RCC_OscConfig+0x470>)
 8002a86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 80a1 	beq.w	8002bd8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a96:	4b34      	ldr	r3, [pc, #208]	; (8002b68 <HAL_RCC_OscConfig+0x470>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 030c 	and.w	r3, r3, #12
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d05c      	beq.n	8002b5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d141      	bne.n	8002b2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aaa:	4b31      	ldr	r3, [pc, #196]	; (8002b70 <HAL_RCC_OscConfig+0x478>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab0:	f7fe ff0a 	bl	80018c8 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ab8:	f7fe ff06 	bl	80018c8 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e087      	b.n	8002bda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aca:	4b27      	ldr	r3, [pc, #156]	; (8002b68 <HAL_RCC_OscConfig+0x470>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f0      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69da      	ldr	r2, [r3, #28]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	019b      	lsls	r3, r3, #6
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aec:	085b      	lsrs	r3, r3, #1
 8002aee:	3b01      	subs	r3, #1
 8002af0:	041b      	lsls	r3, r3, #16
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af8:	061b      	lsls	r3, r3, #24
 8002afa:	491b      	ldr	r1, [pc, #108]	; (8002b68 <HAL_RCC_OscConfig+0x470>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b00:	4b1b      	ldr	r3, [pc, #108]	; (8002b70 <HAL_RCC_OscConfig+0x478>)
 8002b02:	2201      	movs	r2, #1
 8002b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b06:	f7fe fedf 	bl	80018c8 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b0e:	f7fe fedb 	bl	80018c8 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e05c      	b.n	8002bda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b20:	4b11      	ldr	r3, [pc, #68]	; (8002b68 <HAL_RCC_OscConfig+0x470>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0f0      	beq.n	8002b0e <HAL_RCC_OscConfig+0x416>
 8002b2c:	e054      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b2e:	4b10      	ldr	r3, [pc, #64]	; (8002b70 <HAL_RCC_OscConfig+0x478>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b34:	f7fe fec8 	bl	80018c8 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b3c:	f7fe fec4 	bl	80018c8 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e045      	b.n	8002bda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b4e:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <HAL_RCC_OscConfig+0x470>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1f0      	bne.n	8002b3c <HAL_RCC_OscConfig+0x444>
 8002b5a:	e03d      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d107      	bne.n	8002b74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e038      	b.n	8002bda <HAL_RCC_OscConfig+0x4e2>
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	40007000 	.word	0x40007000
 8002b70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b74:	4b1b      	ldr	r3, [pc, #108]	; (8002be4 <HAL_RCC_OscConfig+0x4ec>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d028      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d121      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d11a      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002baa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d111      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bba:	085b      	lsrs	r3, r3, #1
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d107      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d001      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e000      	b.n	8002bda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	40023800 	.word	0x40023800

08002be8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e0cc      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bfc:	4b68      	ldr	r3, [pc, #416]	; (8002da0 <HAL_RCC_ClockConfig+0x1b8>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d90c      	bls.n	8002c24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0a:	4b65      	ldr	r3, [pc, #404]	; (8002da0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c12:	4b63      	ldr	r3, [pc, #396]	; (8002da0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d001      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e0b8      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d020      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d005      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c3c:	4b59      	ldr	r3, [pc, #356]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	4a58      	ldr	r2, [pc, #352]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0308 	and.w	r3, r3, #8
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d005      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c54:	4b53      	ldr	r3, [pc, #332]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	4a52      	ldr	r2, [pc, #328]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c60:	4b50      	ldr	r3, [pc, #320]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	494d      	ldr	r1, [pc, #308]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d044      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d107      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c86:	4b47      	ldr	r3, [pc, #284]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d119      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e07f      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d003      	beq.n	8002ca6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ca2:	2b03      	cmp	r3, #3
 8002ca4:	d107      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca6:	4b3f      	ldr	r3, [pc, #252]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d109      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e06f      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb6:	4b3b      	ldr	r3, [pc, #236]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e067      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cc6:	4b37      	ldr	r3, [pc, #220]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f023 0203 	bic.w	r2, r3, #3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	4934      	ldr	r1, [pc, #208]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cd8:	f7fe fdf6 	bl	80018c8 <HAL_GetTick>
 8002cdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cde:	e00a      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce0:	f7fe fdf2 	bl	80018c8 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e04f      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf6:	4b2b      	ldr	r3, [pc, #172]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 020c 	and.w	r2, r3, #12
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d1eb      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d08:	4b25      	ldr	r3, [pc, #148]	; (8002da0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d20c      	bcs.n	8002d30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d16:	4b22      	ldr	r3, [pc, #136]	; (8002da0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1e:	4b20      	ldr	r3, [pc, #128]	; (8002da0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d001      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e032      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d008      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d3c:	4b19      	ldr	r3, [pc, #100]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	4916      	ldr	r1, [pc, #88]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d009      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d5a:	4b12      	ldr	r3, [pc, #72]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	490e      	ldr	r1, [pc, #56]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d6e:	f000 f821 	bl	8002db4 <HAL_RCC_GetSysClockFreq>
 8002d72:	4602      	mov	r2, r0
 8002d74:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	091b      	lsrs	r3, r3, #4
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	490a      	ldr	r1, [pc, #40]	; (8002da8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d80:	5ccb      	ldrb	r3, [r1, r3]
 8002d82:	fa22 f303 	lsr.w	r3, r2, r3
 8002d86:	4a09      	ldr	r2, [pc, #36]	; (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002d88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d8a:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fe fd56 	bl	8001840 <HAL_InitTick>

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40023c00 	.word	0x40023c00
 8002da4:	40023800 	.word	0x40023800
 8002da8:	08004df8 	.word	0x08004df8
 8002dac:	20000004 	.word	0x20000004
 8002db0:	20000008 	.word	0x20000008

08002db4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002db4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002db8:	b094      	sub	sp, #80	; 0x50
 8002dba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	647b      	str	r3, [r7, #68]	; 0x44
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dcc:	4b79      	ldr	r3, [pc, #484]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f003 030c 	and.w	r3, r3, #12
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d00d      	beq.n	8002df4 <HAL_RCC_GetSysClockFreq+0x40>
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	f200 80e1 	bhi.w	8002fa0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <HAL_RCC_GetSysClockFreq+0x34>
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	d003      	beq.n	8002dee <HAL_RCC_GetSysClockFreq+0x3a>
 8002de6:	e0db      	b.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002de8:	4b73      	ldr	r3, [pc, #460]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002dea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002dec:	e0db      	b.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dee:	4b73      	ldr	r3, [pc, #460]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x208>)
 8002df0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002df2:	e0d8      	b.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002df4:	4b6f      	ldr	r3, [pc, #444]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dfc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dfe:	4b6d      	ldr	r3, [pc, #436]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d063      	beq.n	8002ed2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e0a:	4b6a      	ldr	r3, [pc, #424]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	099b      	lsrs	r3, r3, #6
 8002e10:	2200      	movs	r2, #0
 8002e12:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e1c:	633b      	str	r3, [r7, #48]	; 0x30
 8002e1e:	2300      	movs	r3, #0
 8002e20:	637b      	str	r3, [r7, #52]	; 0x34
 8002e22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e26:	4622      	mov	r2, r4
 8002e28:	462b      	mov	r3, r5
 8002e2a:	f04f 0000 	mov.w	r0, #0
 8002e2e:	f04f 0100 	mov.w	r1, #0
 8002e32:	0159      	lsls	r1, r3, #5
 8002e34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e38:	0150      	lsls	r0, r2, #5
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	4621      	mov	r1, r4
 8002e40:	1a51      	subs	r1, r2, r1
 8002e42:	6139      	str	r1, [r7, #16]
 8002e44:	4629      	mov	r1, r5
 8002e46:	eb63 0301 	sbc.w	r3, r3, r1
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	f04f 0300 	mov.w	r3, #0
 8002e54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e58:	4659      	mov	r1, fp
 8002e5a:	018b      	lsls	r3, r1, #6
 8002e5c:	4651      	mov	r1, sl
 8002e5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e62:	4651      	mov	r1, sl
 8002e64:	018a      	lsls	r2, r1, #6
 8002e66:	4651      	mov	r1, sl
 8002e68:	ebb2 0801 	subs.w	r8, r2, r1
 8002e6c:	4659      	mov	r1, fp
 8002e6e:	eb63 0901 	sbc.w	r9, r3, r1
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e86:	4690      	mov	r8, r2
 8002e88:	4699      	mov	r9, r3
 8002e8a:	4623      	mov	r3, r4
 8002e8c:	eb18 0303 	adds.w	r3, r8, r3
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	462b      	mov	r3, r5
 8002e94:	eb49 0303 	adc.w	r3, r9, r3
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	f04f 0300 	mov.w	r3, #0
 8002ea2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ea6:	4629      	mov	r1, r5
 8002ea8:	024b      	lsls	r3, r1, #9
 8002eaa:	4621      	mov	r1, r4
 8002eac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002eb0:	4621      	mov	r1, r4
 8002eb2:	024a      	lsls	r2, r1, #9
 8002eb4:	4610      	mov	r0, r2
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eba:	2200      	movs	r2, #0
 8002ebc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ebe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ec0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ec4:	f7fd fcf2 	bl	80008ac <__aeabi_uldivmod>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	460b      	mov	r3, r1
 8002ecc:	4613      	mov	r3, r2
 8002ece:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ed0:	e058      	b.n	8002f84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ed2:	4b38      	ldr	r3, [pc, #224]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	099b      	lsrs	r3, r3, #6
 8002ed8:	2200      	movs	r2, #0
 8002eda:	4618      	mov	r0, r3
 8002edc:	4611      	mov	r1, r2
 8002ede:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ee2:	623b      	str	r3, [r7, #32]
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002eec:	4642      	mov	r2, r8
 8002eee:	464b      	mov	r3, r9
 8002ef0:	f04f 0000 	mov.w	r0, #0
 8002ef4:	f04f 0100 	mov.w	r1, #0
 8002ef8:	0159      	lsls	r1, r3, #5
 8002efa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002efe:	0150      	lsls	r0, r2, #5
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4641      	mov	r1, r8
 8002f06:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f0a:	4649      	mov	r1, r9
 8002f0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f10:	f04f 0200 	mov.w	r2, #0
 8002f14:	f04f 0300 	mov.w	r3, #0
 8002f18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f24:	ebb2 040a 	subs.w	r4, r2, sl
 8002f28:	eb63 050b 	sbc.w	r5, r3, fp
 8002f2c:	f04f 0200 	mov.w	r2, #0
 8002f30:	f04f 0300 	mov.w	r3, #0
 8002f34:	00eb      	lsls	r3, r5, #3
 8002f36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f3a:	00e2      	lsls	r2, r4, #3
 8002f3c:	4614      	mov	r4, r2
 8002f3e:	461d      	mov	r5, r3
 8002f40:	4643      	mov	r3, r8
 8002f42:	18e3      	adds	r3, r4, r3
 8002f44:	603b      	str	r3, [r7, #0]
 8002f46:	464b      	mov	r3, r9
 8002f48:	eb45 0303 	adc.w	r3, r5, r3
 8002f4c:	607b      	str	r3, [r7, #4]
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	f04f 0300 	mov.w	r3, #0
 8002f56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f5a:	4629      	mov	r1, r5
 8002f5c:	028b      	lsls	r3, r1, #10
 8002f5e:	4621      	mov	r1, r4
 8002f60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f64:	4621      	mov	r1, r4
 8002f66:	028a      	lsls	r2, r1, #10
 8002f68:	4610      	mov	r0, r2
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f6e:	2200      	movs	r2, #0
 8002f70:	61bb      	str	r3, [r7, #24]
 8002f72:	61fa      	str	r2, [r7, #28]
 8002f74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f78:	f7fd fc98 	bl	80008ac <__aeabi_uldivmod>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4613      	mov	r3, r2
 8002f82:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	0c1b      	lsrs	r3, r3, #16
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	3301      	adds	r3, #1
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002f94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f9e:	e002      	b.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fa0:	4b05      	ldr	r3, [pc, #20]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fa2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3750      	adds	r7, #80	; 0x50
 8002fac:	46bd      	mov	sp, r7
 8002fae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	00f42400 	.word	0x00f42400
 8002fbc:	007a1200 	.word	0x007a1200

08002fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fc4:	4b03      	ldr	r3, [pc, #12]	; (8002fd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	20000004 	.word	0x20000004

08002fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002fdc:	f7ff fff0 	bl	8002fc0 <HAL_RCC_GetHCLKFreq>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	0a9b      	lsrs	r3, r3, #10
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	4903      	ldr	r1, [pc, #12]	; (8002ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fee:	5ccb      	ldrb	r3, [r1, r3]
 8002ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	08004e08 	.word	0x08004e08

08003000 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003004:	f7ff ffdc 	bl	8002fc0 <HAL_RCC_GetHCLKFreq>
 8003008:	4602      	mov	r2, r0
 800300a:	4b05      	ldr	r3, [pc, #20]	; (8003020 <HAL_RCC_GetPCLK2Freq+0x20>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	0b5b      	lsrs	r3, r3, #13
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	4903      	ldr	r1, [pc, #12]	; (8003024 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003016:	5ccb      	ldrb	r3, [r1, r3]
 8003018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800301c:	4618      	mov	r0, r3
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40023800 	.word	0x40023800
 8003024:	08004e08 	.word	0x08004e08

08003028 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e03f      	b.n	80030ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d106      	bne.n	8003054 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7fe fb62 	bl	8001718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2224      	movs	r2, #36	; 0x24
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800306a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f9cb 	bl	8003408 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	691a      	ldr	r2, [r3, #16]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003080:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	695a      	ldr	r2, [r3, #20]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003090:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68da      	ldr	r2, [r3, #12]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2220      	movs	r2, #32
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b08a      	sub	sp, #40	; 0x28
 80030c6:	af02      	add	r7, sp, #8
 80030c8:	60f8      	str	r0, [r7, #12]
 80030ca:	60b9      	str	r1, [r7, #8]
 80030cc:	603b      	str	r3, [r7, #0]
 80030ce:	4613      	mov	r3, r2
 80030d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b20      	cmp	r3, #32
 80030e0:	d17c      	bne.n	80031dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d002      	beq.n	80030ee <HAL_UART_Transmit+0x2c>
 80030e8:	88fb      	ldrh	r3, [r7, #6]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e075      	b.n	80031de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <HAL_UART_Transmit+0x3e>
 80030fc:	2302      	movs	r3, #2
 80030fe:	e06e      	b.n	80031de <HAL_UART_Transmit+0x11c>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2221      	movs	r2, #33	; 0x21
 8003112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003116:	f7fe fbd7 	bl	80018c8 <HAL_GetTick>
 800311a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	88fa      	ldrh	r2, [r7, #6]
 8003120:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	88fa      	ldrh	r2, [r7, #6]
 8003126:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003130:	d108      	bne.n	8003144 <HAL_UART_Transmit+0x82>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d104      	bne.n	8003144 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800313a:	2300      	movs	r3, #0
 800313c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	61bb      	str	r3, [r7, #24]
 8003142:	e003      	b.n	800314c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003148:	2300      	movs	r3, #0
 800314a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003154:	e02a      	b.n	80031ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	2200      	movs	r2, #0
 800315e:	2180      	movs	r1, #128	; 0x80
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 f8e2 	bl	800332a <UART_WaitOnFlagUntilTimeout>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e036      	b.n	80031de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10b      	bne.n	800318e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	461a      	mov	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003184:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	3302      	adds	r3, #2
 800318a:	61bb      	str	r3, [r7, #24]
 800318c:	e007      	b.n	800319e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	781a      	ldrb	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	3301      	adds	r3, #1
 800319c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	3b01      	subs	r3, #1
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1cf      	bne.n	8003156 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	2200      	movs	r2, #0
 80031be:	2140      	movs	r1, #64	; 0x40
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 f8b2 	bl	800332a <UART_WaitOnFlagUntilTimeout>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e006      	b.n	80031de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2220      	movs	r2, #32
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80031d8:	2300      	movs	r3, #0
 80031da:	e000      	b.n	80031de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80031dc:	2302      	movs	r3, #2
  }
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3720      	adds	r7, #32
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b08a      	sub	sp, #40	; 0x28
 80031ea:	af02      	add	r7, sp, #8
 80031ec:	60f8      	str	r0, [r7, #12]
 80031ee:	60b9      	str	r1, [r7, #8]
 80031f0:	603b      	str	r3, [r7, #0]
 80031f2:	4613      	mov	r3, r2
 80031f4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b20      	cmp	r3, #32
 8003204:	f040 808c 	bne.w	8003320 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d002      	beq.n	8003214 <HAL_UART_Receive+0x2e>
 800320e:	88fb      	ldrh	r3, [r7, #6]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e084      	b.n	8003322 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800321e:	2b01      	cmp	r3, #1
 8003220:	d101      	bne.n	8003226 <HAL_UART_Receive+0x40>
 8003222:	2302      	movs	r3, #2
 8003224:	e07d      	b.n	8003322 <HAL_UART_Receive+0x13c>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2222      	movs	r2, #34	; 0x22
 8003238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003242:	f7fe fb41 	bl	80018c8 <HAL_GetTick>
 8003246:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	88fa      	ldrh	r2, [r7, #6]
 800324c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	88fa      	ldrh	r2, [r7, #6]
 8003252:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800325c:	d108      	bne.n	8003270 <HAL_UART_Receive+0x8a>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d104      	bne.n	8003270 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003266:	2300      	movs	r3, #0
 8003268:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	61bb      	str	r3, [r7, #24]
 800326e:	e003      	b.n	8003278 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003274:	2300      	movs	r3, #0
 8003276:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003280:	e043      	b.n	800330a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2200      	movs	r2, #0
 800328a:	2120      	movs	r1, #32
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 f84c 	bl	800332a <UART_WaitOnFlagUntilTimeout>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e042      	b.n	8003322 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10c      	bne.n	80032bc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	3302      	adds	r3, #2
 80032b8:	61bb      	str	r3, [r7, #24]
 80032ba:	e01f      	b.n	80032fc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032c4:	d007      	beq.n	80032d6 <HAL_UART_Receive+0xf0>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10a      	bne.n	80032e4 <HAL_UART_Receive+0xfe>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d106      	bne.n	80032e4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	701a      	strb	r2, [r3, #0]
 80032e2:	e008      	b.n	80032f6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	3301      	adds	r3, #1
 80032fa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003300:	b29b      	uxth	r3, r3
 8003302:	3b01      	subs	r3, #1
 8003304:	b29a      	uxth	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800330e:	b29b      	uxth	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1b6      	bne.n	8003282 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2220      	movs	r2, #32
 8003318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800331c:	2300      	movs	r3, #0
 800331e:	e000      	b.n	8003322 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003320:	2302      	movs	r3, #2
  }
}
 8003322:	4618      	mov	r0, r3
 8003324:	3720      	adds	r7, #32
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b090      	sub	sp, #64	; 0x40
 800332e:	af00      	add	r7, sp, #0
 8003330:	60f8      	str	r0, [r7, #12]
 8003332:	60b9      	str	r1, [r7, #8]
 8003334:	603b      	str	r3, [r7, #0]
 8003336:	4613      	mov	r3, r2
 8003338:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800333a:	e050      	b.n	80033de <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800333c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800333e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003342:	d04c      	beq.n	80033de <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003346:	2b00      	cmp	r3, #0
 8003348:	d007      	beq.n	800335a <UART_WaitOnFlagUntilTimeout+0x30>
 800334a:	f7fe fabd 	bl	80018c8 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003356:	429a      	cmp	r2, r3
 8003358:	d241      	bcs.n	80033de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	330c      	adds	r3, #12
 8003360:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003364:	e853 3f00 	ldrex	r3, [r3]
 8003368:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003370:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	330c      	adds	r3, #12
 8003378:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800337a:	637a      	str	r2, [r7, #52]	; 0x34
 800337c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003380:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003382:	e841 2300 	strex	r3, r2, [r1]
 8003386:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1e5      	bne.n	800335a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	3314      	adds	r3, #20
 8003394:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	e853 3f00 	ldrex	r3, [r3]
 800339c:	613b      	str	r3, [r7, #16]
   return(result);
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	f023 0301 	bic.w	r3, r3, #1
 80033a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	3314      	adds	r3, #20
 80033ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033ae:	623a      	str	r2, [r7, #32]
 80033b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b2:	69f9      	ldr	r1, [r7, #28]
 80033b4:	6a3a      	ldr	r2, [r7, #32]
 80033b6:	e841 2300 	strex	r3, r2, [r1]
 80033ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1e5      	bne.n	800338e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2220      	movs	r2, #32
 80033c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2220      	movs	r2, #32
 80033ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e00f      	b.n	80033fe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	4013      	ands	r3, r2
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	bf0c      	ite	eq
 80033ee:	2301      	moveq	r3, #1
 80033f0:	2300      	movne	r3, #0
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	461a      	mov	r2, r3
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d09f      	beq.n	800333c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3740      	adds	r7, #64	; 0x40
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800340c:	b0c0      	sub	sp, #256	; 0x100
 800340e:	af00      	add	r7, sp, #0
 8003410:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003424:	68d9      	ldr	r1, [r3, #12]
 8003426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	ea40 0301 	orr.w	r3, r0, r1
 8003430:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	431a      	orrs	r2, r3
 8003440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	431a      	orrs	r2, r3
 8003448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	4313      	orrs	r3, r2
 8003450:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003460:	f021 010c 	bic.w	r1, r1, #12
 8003464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800346e:	430b      	orrs	r3, r1
 8003470:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800347e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003482:	6999      	ldr	r1, [r3, #24]
 8003484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	ea40 0301 	orr.w	r3, r0, r1
 800348e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	4b8f      	ldr	r3, [pc, #572]	; (80036d4 <UART_SetConfig+0x2cc>)
 8003498:	429a      	cmp	r2, r3
 800349a:	d005      	beq.n	80034a8 <UART_SetConfig+0xa0>
 800349c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	4b8d      	ldr	r3, [pc, #564]	; (80036d8 <UART_SetConfig+0x2d0>)
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d104      	bne.n	80034b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034a8:	f7ff fdaa 	bl	8003000 <HAL_RCC_GetPCLK2Freq>
 80034ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80034b0:	e003      	b.n	80034ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034b2:	f7ff fd91 	bl	8002fd8 <HAL_RCC_GetPCLK1Freq>
 80034b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034c4:	f040 810c 	bne.w	80036e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034cc:	2200      	movs	r2, #0
 80034ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80034d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80034da:	4622      	mov	r2, r4
 80034dc:	462b      	mov	r3, r5
 80034de:	1891      	adds	r1, r2, r2
 80034e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80034e2:	415b      	adcs	r3, r3
 80034e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80034ea:	4621      	mov	r1, r4
 80034ec:	eb12 0801 	adds.w	r8, r2, r1
 80034f0:	4629      	mov	r1, r5
 80034f2:	eb43 0901 	adc.w	r9, r3, r1
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	f04f 0300 	mov.w	r3, #0
 80034fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003502:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003506:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800350a:	4690      	mov	r8, r2
 800350c:	4699      	mov	r9, r3
 800350e:	4623      	mov	r3, r4
 8003510:	eb18 0303 	adds.w	r3, r8, r3
 8003514:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003518:	462b      	mov	r3, r5
 800351a:	eb49 0303 	adc.w	r3, r9, r3
 800351e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800352e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003532:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003536:	460b      	mov	r3, r1
 8003538:	18db      	adds	r3, r3, r3
 800353a:	653b      	str	r3, [r7, #80]	; 0x50
 800353c:	4613      	mov	r3, r2
 800353e:	eb42 0303 	adc.w	r3, r2, r3
 8003542:	657b      	str	r3, [r7, #84]	; 0x54
 8003544:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003548:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800354c:	f7fd f9ae 	bl	80008ac <__aeabi_uldivmod>
 8003550:	4602      	mov	r2, r0
 8003552:	460b      	mov	r3, r1
 8003554:	4b61      	ldr	r3, [pc, #388]	; (80036dc <UART_SetConfig+0x2d4>)
 8003556:	fba3 2302 	umull	r2, r3, r3, r2
 800355a:	095b      	lsrs	r3, r3, #5
 800355c:	011c      	lsls	r4, r3, #4
 800355e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003562:	2200      	movs	r2, #0
 8003564:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003568:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800356c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003570:	4642      	mov	r2, r8
 8003572:	464b      	mov	r3, r9
 8003574:	1891      	adds	r1, r2, r2
 8003576:	64b9      	str	r1, [r7, #72]	; 0x48
 8003578:	415b      	adcs	r3, r3
 800357a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800357c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003580:	4641      	mov	r1, r8
 8003582:	eb12 0a01 	adds.w	sl, r2, r1
 8003586:	4649      	mov	r1, r9
 8003588:	eb43 0b01 	adc.w	fp, r3, r1
 800358c:	f04f 0200 	mov.w	r2, #0
 8003590:	f04f 0300 	mov.w	r3, #0
 8003594:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003598:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800359c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035a0:	4692      	mov	sl, r2
 80035a2:	469b      	mov	fp, r3
 80035a4:	4643      	mov	r3, r8
 80035a6:	eb1a 0303 	adds.w	r3, sl, r3
 80035aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035ae:	464b      	mov	r3, r9
 80035b0:	eb4b 0303 	adc.w	r3, fp, r3
 80035b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80035b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80035c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80035cc:	460b      	mov	r3, r1
 80035ce:	18db      	adds	r3, r3, r3
 80035d0:	643b      	str	r3, [r7, #64]	; 0x40
 80035d2:	4613      	mov	r3, r2
 80035d4:	eb42 0303 	adc.w	r3, r2, r3
 80035d8:	647b      	str	r3, [r7, #68]	; 0x44
 80035da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80035e2:	f7fd f963 	bl	80008ac <__aeabi_uldivmod>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	4611      	mov	r1, r2
 80035ec:	4b3b      	ldr	r3, [pc, #236]	; (80036dc <UART_SetConfig+0x2d4>)
 80035ee:	fba3 2301 	umull	r2, r3, r3, r1
 80035f2:	095b      	lsrs	r3, r3, #5
 80035f4:	2264      	movs	r2, #100	; 0x64
 80035f6:	fb02 f303 	mul.w	r3, r2, r3
 80035fa:	1acb      	subs	r3, r1, r3
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003602:	4b36      	ldr	r3, [pc, #216]	; (80036dc <UART_SetConfig+0x2d4>)
 8003604:	fba3 2302 	umull	r2, r3, r3, r2
 8003608:	095b      	lsrs	r3, r3, #5
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003610:	441c      	add	r4, r3
 8003612:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003616:	2200      	movs	r2, #0
 8003618:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800361c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003620:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003624:	4642      	mov	r2, r8
 8003626:	464b      	mov	r3, r9
 8003628:	1891      	adds	r1, r2, r2
 800362a:	63b9      	str	r1, [r7, #56]	; 0x38
 800362c:	415b      	adcs	r3, r3
 800362e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003630:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003634:	4641      	mov	r1, r8
 8003636:	1851      	adds	r1, r2, r1
 8003638:	6339      	str	r1, [r7, #48]	; 0x30
 800363a:	4649      	mov	r1, r9
 800363c:	414b      	adcs	r3, r1
 800363e:	637b      	str	r3, [r7, #52]	; 0x34
 8003640:	f04f 0200 	mov.w	r2, #0
 8003644:	f04f 0300 	mov.w	r3, #0
 8003648:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800364c:	4659      	mov	r1, fp
 800364e:	00cb      	lsls	r3, r1, #3
 8003650:	4651      	mov	r1, sl
 8003652:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003656:	4651      	mov	r1, sl
 8003658:	00ca      	lsls	r2, r1, #3
 800365a:	4610      	mov	r0, r2
 800365c:	4619      	mov	r1, r3
 800365e:	4603      	mov	r3, r0
 8003660:	4642      	mov	r2, r8
 8003662:	189b      	adds	r3, r3, r2
 8003664:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003668:	464b      	mov	r3, r9
 800366a:	460a      	mov	r2, r1
 800366c:	eb42 0303 	adc.w	r3, r2, r3
 8003670:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003680:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003684:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003688:	460b      	mov	r3, r1
 800368a:	18db      	adds	r3, r3, r3
 800368c:	62bb      	str	r3, [r7, #40]	; 0x28
 800368e:	4613      	mov	r3, r2
 8003690:	eb42 0303 	adc.w	r3, r2, r3
 8003694:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003696:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800369a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800369e:	f7fd f905 	bl	80008ac <__aeabi_uldivmod>
 80036a2:	4602      	mov	r2, r0
 80036a4:	460b      	mov	r3, r1
 80036a6:	4b0d      	ldr	r3, [pc, #52]	; (80036dc <UART_SetConfig+0x2d4>)
 80036a8:	fba3 1302 	umull	r1, r3, r3, r2
 80036ac:	095b      	lsrs	r3, r3, #5
 80036ae:	2164      	movs	r1, #100	; 0x64
 80036b0:	fb01 f303 	mul.w	r3, r1, r3
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	3332      	adds	r3, #50	; 0x32
 80036ba:	4a08      	ldr	r2, [pc, #32]	; (80036dc <UART_SetConfig+0x2d4>)
 80036bc:	fba2 2303 	umull	r2, r3, r2, r3
 80036c0:	095b      	lsrs	r3, r3, #5
 80036c2:	f003 0207 	and.w	r2, r3, #7
 80036c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4422      	add	r2, r4
 80036ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036d0:	e105      	b.n	80038de <UART_SetConfig+0x4d6>
 80036d2:	bf00      	nop
 80036d4:	40011000 	.word	0x40011000
 80036d8:	40011400 	.word	0x40011400
 80036dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036e4:	2200      	movs	r2, #0
 80036e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80036ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80036ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80036f2:	4642      	mov	r2, r8
 80036f4:	464b      	mov	r3, r9
 80036f6:	1891      	adds	r1, r2, r2
 80036f8:	6239      	str	r1, [r7, #32]
 80036fa:	415b      	adcs	r3, r3
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
 80036fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003702:	4641      	mov	r1, r8
 8003704:	1854      	adds	r4, r2, r1
 8003706:	4649      	mov	r1, r9
 8003708:	eb43 0501 	adc.w	r5, r3, r1
 800370c:	f04f 0200 	mov.w	r2, #0
 8003710:	f04f 0300 	mov.w	r3, #0
 8003714:	00eb      	lsls	r3, r5, #3
 8003716:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800371a:	00e2      	lsls	r2, r4, #3
 800371c:	4614      	mov	r4, r2
 800371e:	461d      	mov	r5, r3
 8003720:	4643      	mov	r3, r8
 8003722:	18e3      	adds	r3, r4, r3
 8003724:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003728:	464b      	mov	r3, r9
 800372a:	eb45 0303 	adc.w	r3, r5, r3
 800372e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800373e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003742:	f04f 0200 	mov.w	r2, #0
 8003746:	f04f 0300 	mov.w	r3, #0
 800374a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800374e:	4629      	mov	r1, r5
 8003750:	008b      	lsls	r3, r1, #2
 8003752:	4621      	mov	r1, r4
 8003754:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003758:	4621      	mov	r1, r4
 800375a:	008a      	lsls	r2, r1, #2
 800375c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003760:	f7fd f8a4 	bl	80008ac <__aeabi_uldivmod>
 8003764:	4602      	mov	r2, r0
 8003766:	460b      	mov	r3, r1
 8003768:	4b60      	ldr	r3, [pc, #384]	; (80038ec <UART_SetConfig+0x4e4>)
 800376a:	fba3 2302 	umull	r2, r3, r3, r2
 800376e:	095b      	lsrs	r3, r3, #5
 8003770:	011c      	lsls	r4, r3, #4
 8003772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003776:	2200      	movs	r2, #0
 8003778:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800377c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003780:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003784:	4642      	mov	r2, r8
 8003786:	464b      	mov	r3, r9
 8003788:	1891      	adds	r1, r2, r2
 800378a:	61b9      	str	r1, [r7, #24]
 800378c:	415b      	adcs	r3, r3
 800378e:	61fb      	str	r3, [r7, #28]
 8003790:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003794:	4641      	mov	r1, r8
 8003796:	1851      	adds	r1, r2, r1
 8003798:	6139      	str	r1, [r7, #16]
 800379a:	4649      	mov	r1, r9
 800379c:	414b      	adcs	r3, r1
 800379e:	617b      	str	r3, [r7, #20]
 80037a0:	f04f 0200 	mov.w	r2, #0
 80037a4:	f04f 0300 	mov.w	r3, #0
 80037a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037ac:	4659      	mov	r1, fp
 80037ae:	00cb      	lsls	r3, r1, #3
 80037b0:	4651      	mov	r1, sl
 80037b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037b6:	4651      	mov	r1, sl
 80037b8:	00ca      	lsls	r2, r1, #3
 80037ba:	4610      	mov	r0, r2
 80037bc:	4619      	mov	r1, r3
 80037be:	4603      	mov	r3, r0
 80037c0:	4642      	mov	r2, r8
 80037c2:	189b      	adds	r3, r3, r2
 80037c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037c8:	464b      	mov	r3, r9
 80037ca:	460a      	mov	r2, r1
 80037cc:	eb42 0303 	adc.w	r3, r2, r3
 80037d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80037de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80037e0:	f04f 0200 	mov.w	r2, #0
 80037e4:	f04f 0300 	mov.w	r3, #0
 80037e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80037ec:	4649      	mov	r1, r9
 80037ee:	008b      	lsls	r3, r1, #2
 80037f0:	4641      	mov	r1, r8
 80037f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037f6:	4641      	mov	r1, r8
 80037f8:	008a      	lsls	r2, r1, #2
 80037fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80037fe:	f7fd f855 	bl	80008ac <__aeabi_uldivmod>
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	4b39      	ldr	r3, [pc, #228]	; (80038ec <UART_SetConfig+0x4e4>)
 8003808:	fba3 1302 	umull	r1, r3, r3, r2
 800380c:	095b      	lsrs	r3, r3, #5
 800380e:	2164      	movs	r1, #100	; 0x64
 8003810:	fb01 f303 	mul.w	r3, r1, r3
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	3332      	adds	r3, #50	; 0x32
 800381a:	4a34      	ldr	r2, [pc, #208]	; (80038ec <UART_SetConfig+0x4e4>)
 800381c:	fba2 2303 	umull	r2, r3, r2, r3
 8003820:	095b      	lsrs	r3, r3, #5
 8003822:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003826:	441c      	add	r4, r3
 8003828:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800382c:	2200      	movs	r2, #0
 800382e:	673b      	str	r3, [r7, #112]	; 0x70
 8003830:	677a      	str	r2, [r7, #116]	; 0x74
 8003832:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003836:	4642      	mov	r2, r8
 8003838:	464b      	mov	r3, r9
 800383a:	1891      	adds	r1, r2, r2
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	415b      	adcs	r3, r3
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003846:	4641      	mov	r1, r8
 8003848:	1851      	adds	r1, r2, r1
 800384a:	6039      	str	r1, [r7, #0]
 800384c:	4649      	mov	r1, r9
 800384e:	414b      	adcs	r3, r1
 8003850:	607b      	str	r3, [r7, #4]
 8003852:	f04f 0200 	mov.w	r2, #0
 8003856:	f04f 0300 	mov.w	r3, #0
 800385a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800385e:	4659      	mov	r1, fp
 8003860:	00cb      	lsls	r3, r1, #3
 8003862:	4651      	mov	r1, sl
 8003864:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003868:	4651      	mov	r1, sl
 800386a:	00ca      	lsls	r2, r1, #3
 800386c:	4610      	mov	r0, r2
 800386e:	4619      	mov	r1, r3
 8003870:	4603      	mov	r3, r0
 8003872:	4642      	mov	r2, r8
 8003874:	189b      	adds	r3, r3, r2
 8003876:	66bb      	str	r3, [r7, #104]	; 0x68
 8003878:	464b      	mov	r3, r9
 800387a:	460a      	mov	r2, r1
 800387c:	eb42 0303 	adc.w	r3, r2, r3
 8003880:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	663b      	str	r3, [r7, #96]	; 0x60
 800388c:	667a      	str	r2, [r7, #100]	; 0x64
 800388e:	f04f 0200 	mov.w	r2, #0
 8003892:	f04f 0300 	mov.w	r3, #0
 8003896:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800389a:	4649      	mov	r1, r9
 800389c:	008b      	lsls	r3, r1, #2
 800389e:	4641      	mov	r1, r8
 80038a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038a4:	4641      	mov	r1, r8
 80038a6:	008a      	lsls	r2, r1, #2
 80038a8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80038ac:	f7fc fffe 	bl	80008ac <__aeabi_uldivmod>
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	4b0d      	ldr	r3, [pc, #52]	; (80038ec <UART_SetConfig+0x4e4>)
 80038b6:	fba3 1302 	umull	r1, r3, r3, r2
 80038ba:	095b      	lsrs	r3, r3, #5
 80038bc:	2164      	movs	r1, #100	; 0x64
 80038be:	fb01 f303 	mul.w	r3, r1, r3
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	3332      	adds	r3, #50	; 0x32
 80038c8:	4a08      	ldr	r2, [pc, #32]	; (80038ec <UART_SetConfig+0x4e4>)
 80038ca:	fba2 2303 	umull	r2, r3, r2, r3
 80038ce:	095b      	lsrs	r3, r3, #5
 80038d0:	f003 020f 	and.w	r2, r3, #15
 80038d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4422      	add	r2, r4
 80038dc:	609a      	str	r2, [r3, #8]
}
 80038de:	bf00      	nop
 80038e0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80038e4:	46bd      	mov	sp, r7
 80038e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ea:	bf00      	nop
 80038ec:	51eb851f 	.word	0x51eb851f

080038f0 <__errno>:
 80038f0:	4b01      	ldr	r3, [pc, #4]	; (80038f8 <__errno+0x8>)
 80038f2:	6818      	ldr	r0, [r3, #0]
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	20000010 	.word	0x20000010

080038fc <__libc_init_array>:
 80038fc:	b570      	push	{r4, r5, r6, lr}
 80038fe:	4d0d      	ldr	r5, [pc, #52]	; (8003934 <__libc_init_array+0x38>)
 8003900:	4c0d      	ldr	r4, [pc, #52]	; (8003938 <__libc_init_array+0x3c>)
 8003902:	1b64      	subs	r4, r4, r5
 8003904:	10a4      	asrs	r4, r4, #2
 8003906:	2600      	movs	r6, #0
 8003908:	42a6      	cmp	r6, r4
 800390a:	d109      	bne.n	8003920 <__libc_init_array+0x24>
 800390c:	4d0b      	ldr	r5, [pc, #44]	; (800393c <__libc_init_array+0x40>)
 800390e:	4c0c      	ldr	r4, [pc, #48]	; (8003940 <__libc_init_array+0x44>)
 8003910:	f001 f968 	bl	8004be4 <_init>
 8003914:	1b64      	subs	r4, r4, r5
 8003916:	10a4      	asrs	r4, r4, #2
 8003918:	2600      	movs	r6, #0
 800391a:	42a6      	cmp	r6, r4
 800391c:	d105      	bne.n	800392a <__libc_init_array+0x2e>
 800391e:	bd70      	pop	{r4, r5, r6, pc}
 8003920:	f855 3b04 	ldr.w	r3, [r5], #4
 8003924:	4798      	blx	r3
 8003926:	3601      	adds	r6, #1
 8003928:	e7ee      	b.n	8003908 <__libc_init_array+0xc>
 800392a:	f855 3b04 	ldr.w	r3, [r5], #4
 800392e:	4798      	blx	r3
 8003930:	3601      	adds	r6, #1
 8003932:	e7f2      	b.n	800391a <__libc_init_array+0x1e>
 8003934:	08004fc8 	.word	0x08004fc8
 8003938:	08004fc8 	.word	0x08004fc8
 800393c:	08004fc8 	.word	0x08004fc8
 8003940:	08004fcc 	.word	0x08004fcc

08003944 <memset>:
 8003944:	4402      	add	r2, r0
 8003946:	4603      	mov	r3, r0
 8003948:	4293      	cmp	r3, r2
 800394a:	d100      	bne.n	800394e <memset+0xa>
 800394c:	4770      	bx	lr
 800394e:	f803 1b01 	strb.w	r1, [r3], #1
 8003952:	e7f9      	b.n	8003948 <memset+0x4>

08003954 <sniprintf>:
 8003954:	b40c      	push	{r2, r3}
 8003956:	b530      	push	{r4, r5, lr}
 8003958:	4b17      	ldr	r3, [pc, #92]	; (80039b8 <sniprintf+0x64>)
 800395a:	1e0c      	subs	r4, r1, #0
 800395c:	681d      	ldr	r5, [r3, #0]
 800395e:	b09d      	sub	sp, #116	; 0x74
 8003960:	da08      	bge.n	8003974 <sniprintf+0x20>
 8003962:	238b      	movs	r3, #139	; 0x8b
 8003964:	602b      	str	r3, [r5, #0]
 8003966:	f04f 30ff 	mov.w	r0, #4294967295
 800396a:	b01d      	add	sp, #116	; 0x74
 800396c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003970:	b002      	add	sp, #8
 8003972:	4770      	bx	lr
 8003974:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003978:	f8ad 3014 	strh.w	r3, [sp, #20]
 800397c:	bf14      	ite	ne
 800397e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003982:	4623      	moveq	r3, r4
 8003984:	9304      	str	r3, [sp, #16]
 8003986:	9307      	str	r3, [sp, #28]
 8003988:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800398c:	9002      	str	r0, [sp, #8]
 800398e:	9006      	str	r0, [sp, #24]
 8003990:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003994:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003996:	ab21      	add	r3, sp, #132	; 0x84
 8003998:	a902      	add	r1, sp, #8
 800399a:	4628      	mov	r0, r5
 800399c:	9301      	str	r3, [sp, #4]
 800399e:	f000 f925 	bl	8003bec <_svfiprintf_r>
 80039a2:	1c43      	adds	r3, r0, #1
 80039a4:	bfbc      	itt	lt
 80039a6:	238b      	movlt	r3, #139	; 0x8b
 80039a8:	602b      	strlt	r3, [r5, #0]
 80039aa:	2c00      	cmp	r4, #0
 80039ac:	d0dd      	beq.n	800396a <sniprintf+0x16>
 80039ae:	9b02      	ldr	r3, [sp, #8]
 80039b0:	2200      	movs	r2, #0
 80039b2:	701a      	strb	r2, [r3, #0]
 80039b4:	e7d9      	b.n	800396a <sniprintf+0x16>
 80039b6:	bf00      	nop
 80039b8:	20000010 	.word	0x20000010

080039bc <siscanf>:
 80039bc:	b40e      	push	{r1, r2, r3}
 80039be:	b510      	push	{r4, lr}
 80039c0:	b09f      	sub	sp, #124	; 0x7c
 80039c2:	ac21      	add	r4, sp, #132	; 0x84
 80039c4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80039c8:	f854 2b04 	ldr.w	r2, [r4], #4
 80039cc:	9201      	str	r2, [sp, #4]
 80039ce:	f8ad 101c 	strh.w	r1, [sp, #28]
 80039d2:	9004      	str	r0, [sp, #16]
 80039d4:	9008      	str	r0, [sp, #32]
 80039d6:	f7fc fc05 	bl	80001e4 <strlen>
 80039da:	4b0c      	ldr	r3, [pc, #48]	; (8003a0c <siscanf+0x50>)
 80039dc:	9005      	str	r0, [sp, #20]
 80039de:	9009      	str	r0, [sp, #36]	; 0x24
 80039e0:	930d      	str	r3, [sp, #52]	; 0x34
 80039e2:	480b      	ldr	r0, [pc, #44]	; (8003a10 <siscanf+0x54>)
 80039e4:	9a01      	ldr	r2, [sp, #4]
 80039e6:	6800      	ldr	r0, [r0, #0]
 80039e8:	9403      	str	r4, [sp, #12]
 80039ea:	2300      	movs	r3, #0
 80039ec:	9311      	str	r3, [sp, #68]	; 0x44
 80039ee:	9316      	str	r3, [sp, #88]	; 0x58
 80039f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039f4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80039f8:	a904      	add	r1, sp, #16
 80039fa:	4623      	mov	r3, r4
 80039fc:	f000 fa50 	bl	8003ea0 <__ssvfiscanf_r>
 8003a00:	b01f      	add	sp, #124	; 0x7c
 8003a02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a06:	b003      	add	sp, #12
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	08003a15 	.word	0x08003a15
 8003a10:	20000010 	.word	0x20000010

08003a14 <__seofread>:
 8003a14:	2000      	movs	r0, #0
 8003a16:	4770      	bx	lr

08003a18 <_strtol_l.constprop.0>:
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a1e:	d001      	beq.n	8003a24 <_strtol_l.constprop.0+0xc>
 8003a20:	2b24      	cmp	r3, #36	; 0x24
 8003a22:	d906      	bls.n	8003a32 <_strtol_l.constprop.0+0x1a>
 8003a24:	f7ff ff64 	bl	80038f0 <__errno>
 8003a28:	2316      	movs	r3, #22
 8003a2a:	6003      	str	r3, [r0, #0]
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a32:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8003b18 <_strtol_l.constprop.0+0x100>
 8003a36:	460d      	mov	r5, r1
 8003a38:	462e      	mov	r6, r5
 8003a3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003a3e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8003a42:	f017 0708 	ands.w	r7, r7, #8
 8003a46:	d1f7      	bne.n	8003a38 <_strtol_l.constprop.0+0x20>
 8003a48:	2c2d      	cmp	r4, #45	; 0x2d
 8003a4a:	d132      	bne.n	8003ab2 <_strtol_l.constprop.0+0x9a>
 8003a4c:	782c      	ldrb	r4, [r5, #0]
 8003a4e:	2701      	movs	r7, #1
 8003a50:	1cb5      	adds	r5, r6, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d05b      	beq.n	8003b0e <_strtol_l.constprop.0+0xf6>
 8003a56:	2b10      	cmp	r3, #16
 8003a58:	d109      	bne.n	8003a6e <_strtol_l.constprop.0+0x56>
 8003a5a:	2c30      	cmp	r4, #48	; 0x30
 8003a5c:	d107      	bne.n	8003a6e <_strtol_l.constprop.0+0x56>
 8003a5e:	782c      	ldrb	r4, [r5, #0]
 8003a60:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003a64:	2c58      	cmp	r4, #88	; 0x58
 8003a66:	d14d      	bne.n	8003b04 <_strtol_l.constprop.0+0xec>
 8003a68:	786c      	ldrb	r4, [r5, #1]
 8003a6a:	2310      	movs	r3, #16
 8003a6c:	3502      	adds	r5, #2
 8003a6e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8003a72:	f108 38ff 	add.w	r8, r8, #4294967295
 8003a76:	f04f 0c00 	mov.w	ip, #0
 8003a7a:	fbb8 f9f3 	udiv	r9, r8, r3
 8003a7e:	4666      	mov	r6, ip
 8003a80:	fb03 8a19 	mls	sl, r3, r9, r8
 8003a84:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8003a88:	f1be 0f09 	cmp.w	lr, #9
 8003a8c:	d816      	bhi.n	8003abc <_strtol_l.constprop.0+0xa4>
 8003a8e:	4674      	mov	r4, lr
 8003a90:	42a3      	cmp	r3, r4
 8003a92:	dd24      	ble.n	8003ade <_strtol_l.constprop.0+0xc6>
 8003a94:	f1bc 0f00 	cmp.w	ip, #0
 8003a98:	db1e      	blt.n	8003ad8 <_strtol_l.constprop.0+0xc0>
 8003a9a:	45b1      	cmp	r9, r6
 8003a9c:	d31c      	bcc.n	8003ad8 <_strtol_l.constprop.0+0xc0>
 8003a9e:	d101      	bne.n	8003aa4 <_strtol_l.constprop.0+0x8c>
 8003aa0:	45a2      	cmp	sl, r4
 8003aa2:	db19      	blt.n	8003ad8 <_strtol_l.constprop.0+0xc0>
 8003aa4:	fb06 4603 	mla	r6, r6, r3, r4
 8003aa8:	f04f 0c01 	mov.w	ip, #1
 8003aac:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003ab0:	e7e8      	b.n	8003a84 <_strtol_l.constprop.0+0x6c>
 8003ab2:	2c2b      	cmp	r4, #43	; 0x2b
 8003ab4:	bf04      	itt	eq
 8003ab6:	782c      	ldrbeq	r4, [r5, #0]
 8003ab8:	1cb5      	addeq	r5, r6, #2
 8003aba:	e7ca      	b.n	8003a52 <_strtol_l.constprop.0+0x3a>
 8003abc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8003ac0:	f1be 0f19 	cmp.w	lr, #25
 8003ac4:	d801      	bhi.n	8003aca <_strtol_l.constprop.0+0xb2>
 8003ac6:	3c37      	subs	r4, #55	; 0x37
 8003ac8:	e7e2      	b.n	8003a90 <_strtol_l.constprop.0+0x78>
 8003aca:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8003ace:	f1be 0f19 	cmp.w	lr, #25
 8003ad2:	d804      	bhi.n	8003ade <_strtol_l.constprop.0+0xc6>
 8003ad4:	3c57      	subs	r4, #87	; 0x57
 8003ad6:	e7db      	b.n	8003a90 <_strtol_l.constprop.0+0x78>
 8003ad8:	f04f 3cff 	mov.w	ip, #4294967295
 8003adc:	e7e6      	b.n	8003aac <_strtol_l.constprop.0+0x94>
 8003ade:	f1bc 0f00 	cmp.w	ip, #0
 8003ae2:	da05      	bge.n	8003af0 <_strtol_l.constprop.0+0xd8>
 8003ae4:	2322      	movs	r3, #34	; 0x22
 8003ae6:	6003      	str	r3, [r0, #0]
 8003ae8:	4646      	mov	r6, r8
 8003aea:	b942      	cbnz	r2, 8003afe <_strtol_l.constprop.0+0xe6>
 8003aec:	4630      	mov	r0, r6
 8003aee:	e79e      	b.n	8003a2e <_strtol_l.constprop.0+0x16>
 8003af0:	b107      	cbz	r7, 8003af4 <_strtol_l.constprop.0+0xdc>
 8003af2:	4276      	negs	r6, r6
 8003af4:	2a00      	cmp	r2, #0
 8003af6:	d0f9      	beq.n	8003aec <_strtol_l.constprop.0+0xd4>
 8003af8:	f1bc 0f00 	cmp.w	ip, #0
 8003afc:	d000      	beq.n	8003b00 <_strtol_l.constprop.0+0xe8>
 8003afe:	1e69      	subs	r1, r5, #1
 8003b00:	6011      	str	r1, [r2, #0]
 8003b02:	e7f3      	b.n	8003aec <_strtol_l.constprop.0+0xd4>
 8003b04:	2430      	movs	r4, #48	; 0x30
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1b1      	bne.n	8003a6e <_strtol_l.constprop.0+0x56>
 8003b0a:	2308      	movs	r3, #8
 8003b0c:	e7af      	b.n	8003a6e <_strtol_l.constprop.0+0x56>
 8003b0e:	2c30      	cmp	r4, #48	; 0x30
 8003b10:	d0a5      	beq.n	8003a5e <_strtol_l.constprop.0+0x46>
 8003b12:	230a      	movs	r3, #10
 8003b14:	e7ab      	b.n	8003a6e <_strtol_l.constprop.0+0x56>
 8003b16:	bf00      	nop
 8003b18:	08004e11 	.word	0x08004e11

08003b1c <_strtol_r>:
 8003b1c:	f7ff bf7c 	b.w	8003a18 <_strtol_l.constprop.0>

08003b20 <strtol>:
 8003b20:	4613      	mov	r3, r2
 8003b22:	460a      	mov	r2, r1
 8003b24:	4601      	mov	r1, r0
 8003b26:	4802      	ldr	r0, [pc, #8]	; (8003b30 <strtol+0x10>)
 8003b28:	6800      	ldr	r0, [r0, #0]
 8003b2a:	f7ff bf75 	b.w	8003a18 <_strtol_l.constprop.0>
 8003b2e:	bf00      	nop
 8003b30:	20000010 	.word	0x20000010

08003b34 <__ssputs_r>:
 8003b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b38:	688e      	ldr	r6, [r1, #8]
 8003b3a:	429e      	cmp	r6, r3
 8003b3c:	4682      	mov	sl, r0
 8003b3e:	460c      	mov	r4, r1
 8003b40:	4690      	mov	r8, r2
 8003b42:	461f      	mov	r7, r3
 8003b44:	d838      	bhi.n	8003bb8 <__ssputs_r+0x84>
 8003b46:	898a      	ldrh	r2, [r1, #12]
 8003b48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003b4c:	d032      	beq.n	8003bb4 <__ssputs_r+0x80>
 8003b4e:	6825      	ldr	r5, [r4, #0]
 8003b50:	6909      	ldr	r1, [r1, #16]
 8003b52:	eba5 0901 	sub.w	r9, r5, r1
 8003b56:	6965      	ldr	r5, [r4, #20]
 8003b58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b60:	3301      	adds	r3, #1
 8003b62:	444b      	add	r3, r9
 8003b64:	106d      	asrs	r5, r5, #1
 8003b66:	429d      	cmp	r5, r3
 8003b68:	bf38      	it	cc
 8003b6a:	461d      	movcc	r5, r3
 8003b6c:	0553      	lsls	r3, r2, #21
 8003b6e:	d531      	bpl.n	8003bd4 <__ssputs_r+0xa0>
 8003b70:	4629      	mov	r1, r5
 8003b72:	f000 ff6f 	bl	8004a54 <_malloc_r>
 8003b76:	4606      	mov	r6, r0
 8003b78:	b950      	cbnz	r0, 8003b90 <__ssputs_r+0x5c>
 8003b7a:	230c      	movs	r3, #12
 8003b7c:	f8ca 3000 	str.w	r3, [sl]
 8003b80:	89a3      	ldrh	r3, [r4, #12]
 8003b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b86:	81a3      	strh	r3, [r4, #12]
 8003b88:	f04f 30ff 	mov.w	r0, #4294967295
 8003b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b90:	6921      	ldr	r1, [r4, #16]
 8003b92:	464a      	mov	r2, r9
 8003b94:	f000 feca 	bl	800492c <memcpy>
 8003b98:	89a3      	ldrh	r3, [r4, #12]
 8003b9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ba2:	81a3      	strh	r3, [r4, #12]
 8003ba4:	6126      	str	r6, [r4, #16]
 8003ba6:	6165      	str	r5, [r4, #20]
 8003ba8:	444e      	add	r6, r9
 8003baa:	eba5 0509 	sub.w	r5, r5, r9
 8003bae:	6026      	str	r6, [r4, #0]
 8003bb0:	60a5      	str	r5, [r4, #8]
 8003bb2:	463e      	mov	r6, r7
 8003bb4:	42be      	cmp	r6, r7
 8003bb6:	d900      	bls.n	8003bba <__ssputs_r+0x86>
 8003bb8:	463e      	mov	r6, r7
 8003bba:	6820      	ldr	r0, [r4, #0]
 8003bbc:	4632      	mov	r2, r6
 8003bbe:	4641      	mov	r1, r8
 8003bc0:	f000 fec2 	bl	8004948 <memmove>
 8003bc4:	68a3      	ldr	r3, [r4, #8]
 8003bc6:	1b9b      	subs	r3, r3, r6
 8003bc8:	60a3      	str	r3, [r4, #8]
 8003bca:	6823      	ldr	r3, [r4, #0]
 8003bcc:	4433      	add	r3, r6
 8003bce:	6023      	str	r3, [r4, #0]
 8003bd0:	2000      	movs	r0, #0
 8003bd2:	e7db      	b.n	8003b8c <__ssputs_r+0x58>
 8003bd4:	462a      	mov	r2, r5
 8003bd6:	f000 ffb1 	bl	8004b3c <_realloc_r>
 8003bda:	4606      	mov	r6, r0
 8003bdc:	2800      	cmp	r0, #0
 8003bde:	d1e1      	bne.n	8003ba4 <__ssputs_r+0x70>
 8003be0:	6921      	ldr	r1, [r4, #16]
 8003be2:	4650      	mov	r0, sl
 8003be4:	f000 feca 	bl	800497c <_free_r>
 8003be8:	e7c7      	b.n	8003b7a <__ssputs_r+0x46>
	...

08003bec <_svfiprintf_r>:
 8003bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bf0:	4698      	mov	r8, r3
 8003bf2:	898b      	ldrh	r3, [r1, #12]
 8003bf4:	061b      	lsls	r3, r3, #24
 8003bf6:	b09d      	sub	sp, #116	; 0x74
 8003bf8:	4607      	mov	r7, r0
 8003bfa:	460d      	mov	r5, r1
 8003bfc:	4614      	mov	r4, r2
 8003bfe:	d50e      	bpl.n	8003c1e <_svfiprintf_r+0x32>
 8003c00:	690b      	ldr	r3, [r1, #16]
 8003c02:	b963      	cbnz	r3, 8003c1e <_svfiprintf_r+0x32>
 8003c04:	2140      	movs	r1, #64	; 0x40
 8003c06:	f000 ff25 	bl	8004a54 <_malloc_r>
 8003c0a:	6028      	str	r0, [r5, #0]
 8003c0c:	6128      	str	r0, [r5, #16]
 8003c0e:	b920      	cbnz	r0, 8003c1a <_svfiprintf_r+0x2e>
 8003c10:	230c      	movs	r3, #12
 8003c12:	603b      	str	r3, [r7, #0]
 8003c14:	f04f 30ff 	mov.w	r0, #4294967295
 8003c18:	e0d1      	b.n	8003dbe <_svfiprintf_r+0x1d2>
 8003c1a:	2340      	movs	r3, #64	; 0x40
 8003c1c:	616b      	str	r3, [r5, #20]
 8003c1e:	2300      	movs	r3, #0
 8003c20:	9309      	str	r3, [sp, #36]	; 0x24
 8003c22:	2320      	movs	r3, #32
 8003c24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c28:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c2c:	2330      	movs	r3, #48	; 0x30
 8003c2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003dd8 <_svfiprintf_r+0x1ec>
 8003c32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c36:	f04f 0901 	mov.w	r9, #1
 8003c3a:	4623      	mov	r3, r4
 8003c3c:	469a      	mov	sl, r3
 8003c3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c42:	b10a      	cbz	r2, 8003c48 <_svfiprintf_r+0x5c>
 8003c44:	2a25      	cmp	r2, #37	; 0x25
 8003c46:	d1f9      	bne.n	8003c3c <_svfiprintf_r+0x50>
 8003c48:	ebba 0b04 	subs.w	fp, sl, r4
 8003c4c:	d00b      	beq.n	8003c66 <_svfiprintf_r+0x7a>
 8003c4e:	465b      	mov	r3, fp
 8003c50:	4622      	mov	r2, r4
 8003c52:	4629      	mov	r1, r5
 8003c54:	4638      	mov	r0, r7
 8003c56:	f7ff ff6d 	bl	8003b34 <__ssputs_r>
 8003c5a:	3001      	adds	r0, #1
 8003c5c:	f000 80aa 	beq.w	8003db4 <_svfiprintf_r+0x1c8>
 8003c60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c62:	445a      	add	r2, fp
 8003c64:	9209      	str	r2, [sp, #36]	; 0x24
 8003c66:	f89a 3000 	ldrb.w	r3, [sl]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 80a2 	beq.w	8003db4 <_svfiprintf_r+0x1c8>
 8003c70:	2300      	movs	r3, #0
 8003c72:	f04f 32ff 	mov.w	r2, #4294967295
 8003c76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c7a:	f10a 0a01 	add.w	sl, sl, #1
 8003c7e:	9304      	str	r3, [sp, #16]
 8003c80:	9307      	str	r3, [sp, #28]
 8003c82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c86:	931a      	str	r3, [sp, #104]	; 0x68
 8003c88:	4654      	mov	r4, sl
 8003c8a:	2205      	movs	r2, #5
 8003c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c90:	4851      	ldr	r0, [pc, #324]	; (8003dd8 <_svfiprintf_r+0x1ec>)
 8003c92:	f7fc fab5 	bl	8000200 <memchr>
 8003c96:	9a04      	ldr	r2, [sp, #16]
 8003c98:	b9d8      	cbnz	r0, 8003cd2 <_svfiprintf_r+0xe6>
 8003c9a:	06d0      	lsls	r0, r2, #27
 8003c9c:	bf44      	itt	mi
 8003c9e:	2320      	movmi	r3, #32
 8003ca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ca4:	0711      	lsls	r1, r2, #28
 8003ca6:	bf44      	itt	mi
 8003ca8:	232b      	movmi	r3, #43	; 0x2b
 8003caa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cae:	f89a 3000 	ldrb.w	r3, [sl]
 8003cb2:	2b2a      	cmp	r3, #42	; 0x2a
 8003cb4:	d015      	beq.n	8003ce2 <_svfiprintf_r+0xf6>
 8003cb6:	9a07      	ldr	r2, [sp, #28]
 8003cb8:	4654      	mov	r4, sl
 8003cba:	2000      	movs	r0, #0
 8003cbc:	f04f 0c0a 	mov.w	ip, #10
 8003cc0:	4621      	mov	r1, r4
 8003cc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cc6:	3b30      	subs	r3, #48	; 0x30
 8003cc8:	2b09      	cmp	r3, #9
 8003cca:	d94e      	bls.n	8003d6a <_svfiprintf_r+0x17e>
 8003ccc:	b1b0      	cbz	r0, 8003cfc <_svfiprintf_r+0x110>
 8003cce:	9207      	str	r2, [sp, #28]
 8003cd0:	e014      	b.n	8003cfc <_svfiprintf_r+0x110>
 8003cd2:	eba0 0308 	sub.w	r3, r0, r8
 8003cd6:	fa09 f303 	lsl.w	r3, r9, r3
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	9304      	str	r3, [sp, #16]
 8003cde:	46a2      	mov	sl, r4
 8003ce0:	e7d2      	b.n	8003c88 <_svfiprintf_r+0x9c>
 8003ce2:	9b03      	ldr	r3, [sp, #12]
 8003ce4:	1d19      	adds	r1, r3, #4
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	9103      	str	r1, [sp, #12]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	bfbb      	ittet	lt
 8003cee:	425b      	neglt	r3, r3
 8003cf0:	f042 0202 	orrlt.w	r2, r2, #2
 8003cf4:	9307      	strge	r3, [sp, #28]
 8003cf6:	9307      	strlt	r3, [sp, #28]
 8003cf8:	bfb8      	it	lt
 8003cfa:	9204      	strlt	r2, [sp, #16]
 8003cfc:	7823      	ldrb	r3, [r4, #0]
 8003cfe:	2b2e      	cmp	r3, #46	; 0x2e
 8003d00:	d10c      	bne.n	8003d1c <_svfiprintf_r+0x130>
 8003d02:	7863      	ldrb	r3, [r4, #1]
 8003d04:	2b2a      	cmp	r3, #42	; 0x2a
 8003d06:	d135      	bne.n	8003d74 <_svfiprintf_r+0x188>
 8003d08:	9b03      	ldr	r3, [sp, #12]
 8003d0a:	1d1a      	adds	r2, r3, #4
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	9203      	str	r2, [sp, #12]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	bfb8      	it	lt
 8003d14:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d18:	3402      	adds	r4, #2
 8003d1a:	9305      	str	r3, [sp, #20]
 8003d1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003de8 <_svfiprintf_r+0x1fc>
 8003d20:	7821      	ldrb	r1, [r4, #0]
 8003d22:	2203      	movs	r2, #3
 8003d24:	4650      	mov	r0, sl
 8003d26:	f7fc fa6b 	bl	8000200 <memchr>
 8003d2a:	b140      	cbz	r0, 8003d3e <_svfiprintf_r+0x152>
 8003d2c:	2340      	movs	r3, #64	; 0x40
 8003d2e:	eba0 000a 	sub.w	r0, r0, sl
 8003d32:	fa03 f000 	lsl.w	r0, r3, r0
 8003d36:	9b04      	ldr	r3, [sp, #16]
 8003d38:	4303      	orrs	r3, r0
 8003d3a:	3401      	adds	r4, #1
 8003d3c:	9304      	str	r3, [sp, #16]
 8003d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d42:	4826      	ldr	r0, [pc, #152]	; (8003ddc <_svfiprintf_r+0x1f0>)
 8003d44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d48:	2206      	movs	r2, #6
 8003d4a:	f7fc fa59 	bl	8000200 <memchr>
 8003d4e:	2800      	cmp	r0, #0
 8003d50:	d038      	beq.n	8003dc4 <_svfiprintf_r+0x1d8>
 8003d52:	4b23      	ldr	r3, [pc, #140]	; (8003de0 <_svfiprintf_r+0x1f4>)
 8003d54:	bb1b      	cbnz	r3, 8003d9e <_svfiprintf_r+0x1b2>
 8003d56:	9b03      	ldr	r3, [sp, #12]
 8003d58:	3307      	adds	r3, #7
 8003d5a:	f023 0307 	bic.w	r3, r3, #7
 8003d5e:	3308      	adds	r3, #8
 8003d60:	9303      	str	r3, [sp, #12]
 8003d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d64:	4433      	add	r3, r6
 8003d66:	9309      	str	r3, [sp, #36]	; 0x24
 8003d68:	e767      	b.n	8003c3a <_svfiprintf_r+0x4e>
 8003d6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d6e:	460c      	mov	r4, r1
 8003d70:	2001      	movs	r0, #1
 8003d72:	e7a5      	b.n	8003cc0 <_svfiprintf_r+0xd4>
 8003d74:	2300      	movs	r3, #0
 8003d76:	3401      	adds	r4, #1
 8003d78:	9305      	str	r3, [sp, #20]
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	f04f 0c0a 	mov.w	ip, #10
 8003d80:	4620      	mov	r0, r4
 8003d82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d86:	3a30      	subs	r2, #48	; 0x30
 8003d88:	2a09      	cmp	r2, #9
 8003d8a:	d903      	bls.n	8003d94 <_svfiprintf_r+0x1a8>
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0c5      	beq.n	8003d1c <_svfiprintf_r+0x130>
 8003d90:	9105      	str	r1, [sp, #20]
 8003d92:	e7c3      	b.n	8003d1c <_svfiprintf_r+0x130>
 8003d94:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d98:	4604      	mov	r4, r0
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e7f0      	b.n	8003d80 <_svfiprintf_r+0x194>
 8003d9e:	ab03      	add	r3, sp, #12
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	462a      	mov	r2, r5
 8003da4:	4b0f      	ldr	r3, [pc, #60]	; (8003de4 <_svfiprintf_r+0x1f8>)
 8003da6:	a904      	add	r1, sp, #16
 8003da8:	4638      	mov	r0, r7
 8003daa:	f3af 8000 	nop.w
 8003dae:	1c42      	adds	r2, r0, #1
 8003db0:	4606      	mov	r6, r0
 8003db2:	d1d6      	bne.n	8003d62 <_svfiprintf_r+0x176>
 8003db4:	89ab      	ldrh	r3, [r5, #12]
 8003db6:	065b      	lsls	r3, r3, #25
 8003db8:	f53f af2c 	bmi.w	8003c14 <_svfiprintf_r+0x28>
 8003dbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003dbe:	b01d      	add	sp, #116	; 0x74
 8003dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dc4:	ab03      	add	r3, sp, #12
 8003dc6:	9300      	str	r3, [sp, #0]
 8003dc8:	462a      	mov	r2, r5
 8003dca:	4b06      	ldr	r3, [pc, #24]	; (8003de4 <_svfiprintf_r+0x1f8>)
 8003dcc:	a904      	add	r1, sp, #16
 8003dce:	4638      	mov	r0, r7
 8003dd0:	f000 fa4c 	bl	800426c <_printf_i>
 8003dd4:	e7eb      	b.n	8003dae <_svfiprintf_r+0x1c2>
 8003dd6:	bf00      	nop
 8003dd8:	08004f11 	.word	0x08004f11
 8003ddc:	08004f1b 	.word	0x08004f1b
 8003de0:	00000000 	.word	0x00000000
 8003de4:	08003b35 	.word	0x08003b35
 8003de8:	08004f17 	.word	0x08004f17

08003dec <_sungetc_r>:
 8003dec:	b538      	push	{r3, r4, r5, lr}
 8003dee:	1c4b      	adds	r3, r1, #1
 8003df0:	4614      	mov	r4, r2
 8003df2:	d103      	bne.n	8003dfc <_sungetc_r+0x10>
 8003df4:	f04f 35ff 	mov.w	r5, #4294967295
 8003df8:	4628      	mov	r0, r5
 8003dfa:	bd38      	pop	{r3, r4, r5, pc}
 8003dfc:	8993      	ldrh	r3, [r2, #12]
 8003dfe:	f023 0320 	bic.w	r3, r3, #32
 8003e02:	8193      	strh	r3, [r2, #12]
 8003e04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e06:	6852      	ldr	r2, [r2, #4]
 8003e08:	b2cd      	uxtb	r5, r1
 8003e0a:	b18b      	cbz	r3, 8003e30 <_sungetc_r+0x44>
 8003e0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	dd08      	ble.n	8003e24 <_sungetc_r+0x38>
 8003e12:	6823      	ldr	r3, [r4, #0]
 8003e14:	1e5a      	subs	r2, r3, #1
 8003e16:	6022      	str	r2, [r4, #0]
 8003e18:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003e1c:	6863      	ldr	r3, [r4, #4]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	6063      	str	r3, [r4, #4]
 8003e22:	e7e9      	b.n	8003df8 <_sungetc_r+0xc>
 8003e24:	4621      	mov	r1, r4
 8003e26:	f000 fd45 	bl	80048b4 <__submore>
 8003e2a:	2800      	cmp	r0, #0
 8003e2c:	d0f1      	beq.n	8003e12 <_sungetc_r+0x26>
 8003e2e:	e7e1      	b.n	8003df4 <_sungetc_r+0x8>
 8003e30:	6921      	ldr	r1, [r4, #16]
 8003e32:	6823      	ldr	r3, [r4, #0]
 8003e34:	b151      	cbz	r1, 8003e4c <_sungetc_r+0x60>
 8003e36:	4299      	cmp	r1, r3
 8003e38:	d208      	bcs.n	8003e4c <_sungetc_r+0x60>
 8003e3a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8003e3e:	42a9      	cmp	r1, r5
 8003e40:	d104      	bne.n	8003e4c <_sungetc_r+0x60>
 8003e42:	3b01      	subs	r3, #1
 8003e44:	3201      	adds	r2, #1
 8003e46:	6023      	str	r3, [r4, #0]
 8003e48:	6062      	str	r2, [r4, #4]
 8003e4a:	e7d5      	b.n	8003df8 <_sungetc_r+0xc>
 8003e4c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8003e50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e54:	6363      	str	r3, [r4, #52]	; 0x34
 8003e56:	2303      	movs	r3, #3
 8003e58:	63a3      	str	r3, [r4, #56]	; 0x38
 8003e5a:	4623      	mov	r3, r4
 8003e5c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003e60:	6023      	str	r3, [r4, #0]
 8003e62:	2301      	movs	r3, #1
 8003e64:	e7dc      	b.n	8003e20 <_sungetc_r+0x34>

08003e66 <__ssrefill_r>:
 8003e66:	b510      	push	{r4, lr}
 8003e68:	460c      	mov	r4, r1
 8003e6a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003e6c:	b169      	cbz	r1, 8003e8a <__ssrefill_r+0x24>
 8003e6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e72:	4299      	cmp	r1, r3
 8003e74:	d001      	beq.n	8003e7a <__ssrefill_r+0x14>
 8003e76:	f000 fd81 	bl	800497c <_free_r>
 8003e7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e7c:	6063      	str	r3, [r4, #4]
 8003e7e:	2000      	movs	r0, #0
 8003e80:	6360      	str	r0, [r4, #52]	; 0x34
 8003e82:	b113      	cbz	r3, 8003e8a <__ssrefill_r+0x24>
 8003e84:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003e86:	6023      	str	r3, [r4, #0]
 8003e88:	bd10      	pop	{r4, pc}
 8003e8a:	6923      	ldr	r3, [r4, #16]
 8003e8c:	6023      	str	r3, [r4, #0]
 8003e8e:	2300      	movs	r3, #0
 8003e90:	6063      	str	r3, [r4, #4]
 8003e92:	89a3      	ldrh	r3, [r4, #12]
 8003e94:	f043 0320 	orr.w	r3, r3, #32
 8003e98:	81a3      	strh	r3, [r4, #12]
 8003e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e9e:	e7f3      	b.n	8003e88 <__ssrefill_r+0x22>

08003ea0 <__ssvfiscanf_r>:
 8003ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ea4:	460c      	mov	r4, r1
 8003ea6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8003eaa:	2100      	movs	r1, #0
 8003eac:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8003eb0:	49a6      	ldr	r1, [pc, #664]	; (800414c <__ssvfiscanf_r+0x2ac>)
 8003eb2:	91a0      	str	r1, [sp, #640]	; 0x280
 8003eb4:	f10d 0804 	add.w	r8, sp, #4
 8003eb8:	49a5      	ldr	r1, [pc, #660]	; (8004150 <__ssvfiscanf_r+0x2b0>)
 8003eba:	4fa6      	ldr	r7, [pc, #664]	; (8004154 <__ssvfiscanf_r+0x2b4>)
 8003ebc:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8004158 <__ssvfiscanf_r+0x2b8>
 8003ec0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8003ec4:	4606      	mov	r6, r0
 8003ec6:	91a1      	str	r1, [sp, #644]	; 0x284
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	7813      	ldrb	r3, [r2, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 815a 	beq.w	8004186 <__ssvfiscanf_r+0x2e6>
 8003ed2:	5dd9      	ldrb	r1, [r3, r7]
 8003ed4:	f011 0108 	ands.w	r1, r1, #8
 8003ed8:	f102 0501 	add.w	r5, r2, #1
 8003edc:	d019      	beq.n	8003f12 <__ssvfiscanf_r+0x72>
 8003ede:	6863      	ldr	r3, [r4, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	dd0f      	ble.n	8003f04 <__ssvfiscanf_r+0x64>
 8003ee4:	6823      	ldr	r3, [r4, #0]
 8003ee6:	781a      	ldrb	r2, [r3, #0]
 8003ee8:	5cba      	ldrb	r2, [r7, r2]
 8003eea:	0712      	lsls	r2, r2, #28
 8003eec:	d401      	bmi.n	8003ef2 <__ssvfiscanf_r+0x52>
 8003eee:	462a      	mov	r2, r5
 8003ef0:	e7eb      	b.n	8003eca <__ssvfiscanf_r+0x2a>
 8003ef2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003ef4:	3201      	adds	r2, #1
 8003ef6:	9245      	str	r2, [sp, #276]	; 0x114
 8003ef8:	6862      	ldr	r2, [r4, #4]
 8003efa:	3301      	adds	r3, #1
 8003efc:	3a01      	subs	r2, #1
 8003efe:	6062      	str	r2, [r4, #4]
 8003f00:	6023      	str	r3, [r4, #0]
 8003f02:	e7ec      	b.n	8003ede <__ssvfiscanf_r+0x3e>
 8003f04:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003f06:	4621      	mov	r1, r4
 8003f08:	4630      	mov	r0, r6
 8003f0a:	4798      	blx	r3
 8003f0c:	2800      	cmp	r0, #0
 8003f0e:	d0e9      	beq.n	8003ee4 <__ssvfiscanf_r+0x44>
 8003f10:	e7ed      	b.n	8003eee <__ssvfiscanf_r+0x4e>
 8003f12:	2b25      	cmp	r3, #37	; 0x25
 8003f14:	d012      	beq.n	8003f3c <__ssvfiscanf_r+0x9c>
 8003f16:	469a      	mov	sl, r3
 8003f18:	6863      	ldr	r3, [r4, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f340 8091 	ble.w	8004042 <__ssvfiscanf_r+0x1a2>
 8003f20:	6822      	ldr	r2, [r4, #0]
 8003f22:	7813      	ldrb	r3, [r2, #0]
 8003f24:	4553      	cmp	r3, sl
 8003f26:	f040 812e 	bne.w	8004186 <__ssvfiscanf_r+0x2e6>
 8003f2a:	6863      	ldr	r3, [r4, #4]
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	6063      	str	r3, [r4, #4]
 8003f30:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8003f32:	3201      	adds	r2, #1
 8003f34:	3301      	adds	r3, #1
 8003f36:	6022      	str	r2, [r4, #0]
 8003f38:	9345      	str	r3, [sp, #276]	; 0x114
 8003f3a:	e7d8      	b.n	8003eee <__ssvfiscanf_r+0x4e>
 8003f3c:	9141      	str	r1, [sp, #260]	; 0x104
 8003f3e:	9143      	str	r1, [sp, #268]	; 0x10c
 8003f40:	7853      	ldrb	r3, [r2, #1]
 8003f42:	2b2a      	cmp	r3, #42	; 0x2a
 8003f44:	bf02      	ittt	eq
 8003f46:	2310      	moveq	r3, #16
 8003f48:	1c95      	addeq	r5, r2, #2
 8003f4a:	9341      	streq	r3, [sp, #260]	; 0x104
 8003f4c:	220a      	movs	r2, #10
 8003f4e:	46aa      	mov	sl, r5
 8003f50:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8003f54:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8003f58:	2b09      	cmp	r3, #9
 8003f5a:	d91d      	bls.n	8003f98 <__ssvfiscanf_r+0xf8>
 8003f5c:	487e      	ldr	r0, [pc, #504]	; (8004158 <__ssvfiscanf_r+0x2b8>)
 8003f5e:	2203      	movs	r2, #3
 8003f60:	f7fc f94e 	bl	8000200 <memchr>
 8003f64:	b140      	cbz	r0, 8003f78 <__ssvfiscanf_r+0xd8>
 8003f66:	2301      	movs	r3, #1
 8003f68:	eba0 0009 	sub.w	r0, r0, r9
 8003f6c:	fa03 f000 	lsl.w	r0, r3, r0
 8003f70:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003f72:	4318      	orrs	r0, r3
 8003f74:	9041      	str	r0, [sp, #260]	; 0x104
 8003f76:	4655      	mov	r5, sl
 8003f78:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003f7c:	2b78      	cmp	r3, #120	; 0x78
 8003f7e:	d806      	bhi.n	8003f8e <__ssvfiscanf_r+0xee>
 8003f80:	2b57      	cmp	r3, #87	; 0x57
 8003f82:	d810      	bhi.n	8003fa6 <__ssvfiscanf_r+0x106>
 8003f84:	2b25      	cmp	r3, #37	; 0x25
 8003f86:	d0c6      	beq.n	8003f16 <__ssvfiscanf_r+0x76>
 8003f88:	d856      	bhi.n	8004038 <__ssvfiscanf_r+0x198>
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d064      	beq.n	8004058 <__ssvfiscanf_r+0x1b8>
 8003f8e:	2303      	movs	r3, #3
 8003f90:	9347      	str	r3, [sp, #284]	; 0x11c
 8003f92:	230a      	movs	r3, #10
 8003f94:	9342      	str	r3, [sp, #264]	; 0x108
 8003f96:	e071      	b.n	800407c <__ssvfiscanf_r+0x1dc>
 8003f98:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003f9a:	fb02 1103 	mla	r1, r2, r3, r1
 8003f9e:	3930      	subs	r1, #48	; 0x30
 8003fa0:	9143      	str	r1, [sp, #268]	; 0x10c
 8003fa2:	4655      	mov	r5, sl
 8003fa4:	e7d3      	b.n	8003f4e <__ssvfiscanf_r+0xae>
 8003fa6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8003faa:	2a20      	cmp	r2, #32
 8003fac:	d8ef      	bhi.n	8003f8e <__ssvfiscanf_r+0xee>
 8003fae:	a101      	add	r1, pc, #4	; (adr r1, 8003fb4 <__ssvfiscanf_r+0x114>)
 8003fb0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003fb4:	08004067 	.word	0x08004067
 8003fb8:	08003f8f 	.word	0x08003f8f
 8003fbc:	08003f8f 	.word	0x08003f8f
 8003fc0:	080040c5 	.word	0x080040c5
 8003fc4:	08003f8f 	.word	0x08003f8f
 8003fc8:	08003f8f 	.word	0x08003f8f
 8003fcc:	08003f8f 	.word	0x08003f8f
 8003fd0:	08003f8f 	.word	0x08003f8f
 8003fd4:	08003f8f 	.word	0x08003f8f
 8003fd8:	08003f8f 	.word	0x08003f8f
 8003fdc:	08003f8f 	.word	0x08003f8f
 8003fe0:	080040db 	.word	0x080040db
 8003fe4:	080040b1 	.word	0x080040b1
 8003fe8:	0800403f 	.word	0x0800403f
 8003fec:	0800403f 	.word	0x0800403f
 8003ff0:	0800403f 	.word	0x0800403f
 8003ff4:	08003f8f 	.word	0x08003f8f
 8003ff8:	080040b5 	.word	0x080040b5
 8003ffc:	08003f8f 	.word	0x08003f8f
 8004000:	08003f8f 	.word	0x08003f8f
 8004004:	08003f8f 	.word	0x08003f8f
 8004008:	08003f8f 	.word	0x08003f8f
 800400c:	080040eb 	.word	0x080040eb
 8004010:	080040bd 	.word	0x080040bd
 8004014:	0800405f 	.word	0x0800405f
 8004018:	08003f8f 	.word	0x08003f8f
 800401c:	08003f8f 	.word	0x08003f8f
 8004020:	080040e7 	.word	0x080040e7
 8004024:	08003f8f 	.word	0x08003f8f
 8004028:	080040b1 	.word	0x080040b1
 800402c:	08003f8f 	.word	0x08003f8f
 8004030:	08003f8f 	.word	0x08003f8f
 8004034:	08004067 	.word	0x08004067
 8004038:	3b45      	subs	r3, #69	; 0x45
 800403a:	2b02      	cmp	r3, #2
 800403c:	d8a7      	bhi.n	8003f8e <__ssvfiscanf_r+0xee>
 800403e:	2305      	movs	r3, #5
 8004040:	e01b      	b.n	800407a <__ssvfiscanf_r+0x1da>
 8004042:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004044:	4621      	mov	r1, r4
 8004046:	4630      	mov	r0, r6
 8004048:	4798      	blx	r3
 800404a:	2800      	cmp	r0, #0
 800404c:	f43f af68 	beq.w	8003f20 <__ssvfiscanf_r+0x80>
 8004050:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004052:	2800      	cmp	r0, #0
 8004054:	f040 808d 	bne.w	8004172 <__ssvfiscanf_r+0x2d2>
 8004058:	f04f 30ff 	mov.w	r0, #4294967295
 800405c:	e08f      	b.n	800417e <__ssvfiscanf_r+0x2de>
 800405e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004060:	f042 0220 	orr.w	r2, r2, #32
 8004064:	9241      	str	r2, [sp, #260]	; 0x104
 8004066:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004068:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800406c:	9241      	str	r2, [sp, #260]	; 0x104
 800406e:	2210      	movs	r2, #16
 8004070:	2b6f      	cmp	r3, #111	; 0x6f
 8004072:	9242      	str	r2, [sp, #264]	; 0x108
 8004074:	bf34      	ite	cc
 8004076:	2303      	movcc	r3, #3
 8004078:	2304      	movcs	r3, #4
 800407a:	9347      	str	r3, [sp, #284]	; 0x11c
 800407c:	6863      	ldr	r3, [r4, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	dd42      	ble.n	8004108 <__ssvfiscanf_r+0x268>
 8004082:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004084:	0659      	lsls	r1, r3, #25
 8004086:	d404      	bmi.n	8004092 <__ssvfiscanf_r+0x1f2>
 8004088:	6823      	ldr	r3, [r4, #0]
 800408a:	781a      	ldrb	r2, [r3, #0]
 800408c:	5cba      	ldrb	r2, [r7, r2]
 800408e:	0712      	lsls	r2, r2, #28
 8004090:	d441      	bmi.n	8004116 <__ssvfiscanf_r+0x276>
 8004092:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004094:	2b02      	cmp	r3, #2
 8004096:	dc50      	bgt.n	800413a <__ssvfiscanf_r+0x29a>
 8004098:	466b      	mov	r3, sp
 800409a:	4622      	mov	r2, r4
 800409c:	a941      	add	r1, sp, #260	; 0x104
 800409e:	4630      	mov	r0, r6
 80040a0:	f000 fa0a 	bl	80044b8 <_scanf_chars>
 80040a4:	2801      	cmp	r0, #1
 80040a6:	d06e      	beq.n	8004186 <__ssvfiscanf_r+0x2e6>
 80040a8:	2802      	cmp	r0, #2
 80040aa:	f47f af20 	bne.w	8003eee <__ssvfiscanf_r+0x4e>
 80040ae:	e7cf      	b.n	8004050 <__ssvfiscanf_r+0x1b0>
 80040b0:	220a      	movs	r2, #10
 80040b2:	e7dd      	b.n	8004070 <__ssvfiscanf_r+0x1d0>
 80040b4:	2300      	movs	r3, #0
 80040b6:	9342      	str	r3, [sp, #264]	; 0x108
 80040b8:	2303      	movs	r3, #3
 80040ba:	e7de      	b.n	800407a <__ssvfiscanf_r+0x1da>
 80040bc:	2308      	movs	r3, #8
 80040be:	9342      	str	r3, [sp, #264]	; 0x108
 80040c0:	2304      	movs	r3, #4
 80040c2:	e7da      	b.n	800407a <__ssvfiscanf_r+0x1da>
 80040c4:	4629      	mov	r1, r5
 80040c6:	4640      	mov	r0, r8
 80040c8:	f000 fb48 	bl	800475c <__sccl>
 80040cc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80040ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040d2:	9341      	str	r3, [sp, #260]	; 0x104
 80040d4:	4605      	mov	r5, r0
 80040d6:	2301      	movs	r3, #1
 80040d8:	e7cf      	b.n	800407a <__ssvfiscanf_r+0x1da>
 80040da:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80040dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040e0:	9341      	str	r3, [sp, #260]	; 0x104
 80040e2:	2300      	movs	r3, #0
 80040e4:	e7c9      	b.n	800407a <__ssvfiscanf_r+0x1da>
 80040e6:	2302      	movs	r3, #2
 80040e8:	e7c7      	b.n	800407a <__ssvfiscanf_r+0x1da>
 80040ea:	9841      	ldr	r0, [sp, #260]	; 0x104
 80040ec:	06c3      	lsls	r3, r0, #27
 80040ee:	f53f aefe 	bmi.w	8003eee <__ssvfiscanf_r+0x4e>
 80040f2:	9b00      	ldr	r3, [sp, #0]
 80040f4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80040f6:	1d19      	adds	r1, r3, #4
 80040f8:	9100      	str	r1, [sp, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f010 0f01 	tst.w	r0, #1
 8004100:	bf14      	ite	ne
 8004102:	801a      	strhne	r2, [r3, #0]
 8004104:	601a      	streq	r2, [r3, #0]
 8004106:	e6f2      	b.n	8003eee <__ssvfiscanf_r+0x4e>
 8004108:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800410a:	4621      	mov	r1, r4
 800410c:	4630      	mov	r0, r6
 800410e:	4798      	blx	r3
 8004110:	2800      	cmp	r0, #0
 8004112:	d0b6      	beq.n	8004082 <__ssvfiscanf_r+0x1e2>
 8004114:	e79c      	b.n	8004050 <__ssvfiscanf_r+0x1b0>
 8004116:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004118:	3201      	adds	r2, #1
 800411a:	9245      	str	r2, [sp, #276]	; 0x114
 800411c:	6862      	ldr	r2, [r4, #4]
 800411e:	3a01      	subs	r2, #1
 8004120:	2a00      	cmp	r2, #0
 8004122:	6062      	str	r2, [r4, #4]
 8004124:	dd02      	ble.n	800412c <__ssvfiscanf_r+0x28c>
 8004126:	3301      	adds	r3, #1
 8004128:	6023      	str	r3, [r4, #0]
 800412a:	e7ad      	b.n	8004088 <__ssvfiscanf_r+0x1e8>
 800412c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800412e:	4621      	mov	r1, r4
 8004130:	4630      	mov	r0, r6
 8004132:	4798      	blx	r3
 8004134:	2800      	cmp	r0, #0
 8004136:	d0a7      	beq.n	8004088 <__ssvfiscanf_r+0x1e8>
 8004138:	e78a      	b.n	8004050 <__ssvfiscanf_r+0x1b0>
 800413a:	2b04      	cmp	r3, #4
 800413c:	dc0e      	bgt.n	800415c <__ssvfiscanf_r+0x2bc>
 800413e:	466b      	mov	r3, sp
 8004140:	4622      	mov	r2, r4
 8004142:	a941      	add	r1, sp, #260	; 0x104
 8004144:	4630      	mov	r0, r6
 8004146:	f000 fa11 	bl	800456c <_scanf_i>
 800414a:	e7ab      	b.n	80040a4 <__ssvfiscanf_r+0x204>
 800414c:	08003ded 	.word	0x08003ded
 8004150:	08003e67 	.word	0x08003e67
 8004154:	08004e11 	.word	0x08004e11
 8004158:	08004f17 	.word	0x08004f17
 800415c:	4b0b      	ldr	r3, [pc, #44]	; (800418c <__ssvfiscanf_r+0x2ec>)
 800415e:	2b00      	cmp	r3, #0
 8004160:	f43f aec5 	beq.w	8003eee <__ssvfiscanf_r+0x4e>
 8004164:	466b      	mov	r3, sp
 8004166:	4622      	mov	r2, r4
 8004168:	a941      	add	r1, sp, #260	; 0x104
 800416a:	4630      	mov	r0, r6
 800416c:	f3af 8000 	nop.w
 8004170:	e798      	b.n	80040a4 <__ssvfiscanf_r+0x204>
 8004172:	89a3      	ldrh	r3, [r4, #12]
 8004174:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004178:	bf18      	it	ne
 800417a:	f04f 30ff 	movne.w	r0, #4294967295
 800417e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8004182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004186:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004188:	e7f9      	b.n	800417e <__ssvfiscanf_r+0x2de>
 800418a:	bf00      	nop
 800418c:	00000000 	.word	0x00000000

08004190 <_printf_common>:
 8004190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004194:	4616      	mov	r6, r2
 8004196:	4699      	mov	r9, r3
 8004198:	688a      	ldr	r2, [r1, #8]
 800419a:	690b      	ldr	r3, [r1, #16]
 800419c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041a0:	4293      	cmp	r3, r2
 80041a2:	bfb8      	it	lt
 80041a4:	4613      	movlt	r3, r2
 80041a6:	6033      	str	r3, [r6, #0]
 80041a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041ac:	4607      	mov	r7, r0
 80041ae:	460c      	mov	r4, r1
 80041b0:	b10a      	cbz	r2, 80041b6 <_printf_common+0x26>
 80041b2:	3301      	adds	r3, #1
 80041b4:	6033      	str	r3, [r6, #0]
 80041b6:	6823      	ldr	r3, [r4, #0]
 80041b8:	0699      	lsls	r1, r3, #26
 80041ba:	bf42      	ittt	mi
 80041bc:	6833      	ldrmi	r3, [r6, #0]
 80041be:	3302      	addmi	r3, #2
 80041c0:	6033      	strmi	r3, [r6, #0]
 80041c2:	6825      	ldr	r5, [r4, #0]
 80041c4:	f015 0506 	ands.w	r5, r5, #6
 80041c8:	d106      	bne.n	80041d8 <_printf_common+0x48>
 80041ca:	f104 0a19 	add.w	sl, r4, #25
 80041ce:	68e3      	ldr	r3, [r4, #12]
 80041d0:	6832      	ldr	r2, [r6, #0]
 80041d2:	1a9b      	subs	r3, r3, r2
 80041d4:	42ab      	cmp	r3, r5
 80041d6:	dc26      	bgt.n	8004226 <_printf_common+0x96>
 80041d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041dc:	1e13      	subs	r3, r2, #0
 80041de:	6822      	ldr	r2, [r4, #0]
 80041e0:	bf18      	it	ne
 80041e2:	2301      	movne	r3, #1
 80041e4:	0692      	lsls	r2, r2, #26
 80041e6:	d42b      	bmi.n	8004240 <_printf_common+0xb0>
 80041e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041ec:	4649      	mov	r1, r9
 80041ee:	4638      	mov	r0, r7
 80041f0:	47c0      	blx	r8
 80041f2:	3001      	adds	r0, #1
 80041f4:	d01e      	beq.n	8004234 <_printf_common+0xa4>
 80041f6:	6823      	ldr	r3, [r4, #0]
 80041f8:	68e5      	ldr	r5, [r4, #12]
 80041fa:	6832      	ldr	r2, [r6, #0]
 80041fc:	f003 0306 	and.w	r3, r3, #6
 8004200:	2b04      	cmp	r3, #4
 8004202:	bf08      	it	eq
 8004204:	1aad      	subeq	r5, r5, r2
 8004206:	68a3      	ldr	r3, [r4, #8]
 8004208:	6922      	ldr	r2, [r4, #16]
 800420a:	bf0c      	ite	eq
 800420c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004210:	2500      	movne	r5, #0
 8004212:	4293      	cmp	r3, r2
 8004214:	bfc4      	itt	gt
 8004216:	1a9b      	subgt	r3, r3, r2
 8004218:	18ed      	addgt	r5, r5, r3
 800421a:	2600      	movs	r6, #0
 800421c:	341a      	adds	r4, #26
 800421e:	42b5      	cmp	r5, r6
 8004220:	d11a      	bne.n	8004258 <_printf_common+0xc8>
 8004222:	2000      	movs	r0, #0
 8004224:	e008      	b.n	8004238 <_printf_common+0xa8>
 8004226:	2301      	movs	r3, #1
 8004228:	4652      	mov	r2, sl
 800422a:	4649      	mov	r1, r9
 800422c:	4638      	mov	r0, r7
 800422e:	47c0      	blx	r8
 8004230:	3001      	adds	r0, #1
 8004232:	d103      	bne.n	800423c <_printf_common+0xac>
 8004234:	f04f 30ff 	mov.w	r0, #4294967295
 8004238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800423c:	3501      	adds	r5, #1
 800423e:	e7c6      	b.n	80041ce <_printf_common+0x3e>
 8004240:	18e1      	adds	r1, r4, r3
 8004242:	1c5a      	adds	r2, r3, #1
 8004244:	2030      	movs	r0, #48	; 0x30
 8004246:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800424a:	4422      	add	r2, r4
 800424c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004250:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004254:	3302      	adds	r3, #2
 8004256:	e7c7      	b.n	80041e8 <_printf_common+0x58>
 8004258:	2301      	movs	r3, #1
 800425a:	4622      	mov	r2, r4
 800425c:	4649      	mov	r1, r9
 800425e:	4638      	mov	r0, r7
 8004260:	47c0      	blx	r8
 8004262:	3001      	adds	r0, #1
 8004264:	d0e6      	beq.n	8004234 <_printf_common+0xa4>
 8004266:	3601      	adds	r6, #1
 8004268:	e7d9      	b.n	800421e <_printf_common+0x8e>
	...

0800426c <_printf_i>:
 800426c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004270:	7e0f      	ldrb	r7, [r1, #24]
 8004272:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004274:	2f78      	cmp	r7, #120	; 0x78
 8004276:	4691      	mov	r9, r2
 8004278:	4680      	mov	r8, r0
 800427a:	460c      	mov	r4, r1
 800427c:	469a      	mov	sl, r3
 800427e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004282:	d807      	bhi.n	8004294 <_printf_i+0x28>
 8004284:	2f62      	cmp	r7, #98	; 0x62
 8004286:	d80a      	bhi.n	800429e <_printf_i+0x32>
 8004288:	2f00      	cmp	r7, #0
 800428a:	f000 80d8 	beq.w	800443e <_printf_i+0x1d2>
 800428e:	2f58      	cmp	r7, #88	; 0x58
 8004290:	f000 80a3 	beq.w	80043da <_printf_i+0x16e>
 8004294:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004298:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800429c:	e03a      	b.n	8004314 <_printf_i+0xa8>
 800429e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042a2:	2b15      	cmp	r3, #21
 80042a4:	d8f6      	bhi.n	8004294 <_printf_i+0x28>
 80042a6:	a101      	add	r1, pc, #4	; (adr r1, 80042ac <_printf_i+0x40>)
 80042a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042ac:	08004305 	.word	0x08004305
 80042b0:	08004319 	.word	0x08004319
 80042b4:	08004295 	.word	0x08004295
 80042b8:	08004295 	.word	0x08004295
 80042bc:	08004295 	.word	0x08004295
 80042c0:	08004295 	.word	0x08004295
 80042c4:	08004319 	.word	0x08004319
 80042c8:	08004295 	.word	0x08004295
 80042cc:	08004295 	.word	0x08004295
 80042d0:	08004295 	.word	0x08004295
 80042d4:	08004295 	.word	0x08004295
 80042d8:	08004425 	.word	0x08004425
 80042dc:	08004349 	.word	0x08004349
 80042e0:	08004407 	.word	0x08004407
 80042e4:	08004295 	.word	0x08004295
 80042e8:	08004295 	.word	0x08004295
 80042ec:	08004447 	.word	0x08004447
 80042f0:	08004295 	.word	0x08004295
 80042f4:	08004349 	.word	0x08004349
 80042f8:	08004295 	.word	0x08004295
 80042fc:	08004295 	.word	0x08004295
 8004300:	0800440f 	.word	0x0800440f
 8004304:	682b      	ldr	r3, [r5, #0]
 8004306:	1d1a      	adds	r2, r3, #4
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	602a      	str	r2, [r5, #0]
 800430c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004310:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004314:	2301      	movs	r3, #1
 8004316:	e0a3      	b.n	8004460 <_printf_i+0x1f4>
 8004318:	6820      	ldr	r0, [r4, #0]
 800431a:	6829      	ldr	r1, [r5, #0]
 800431c:	0606      	lsls	r6, r0, #24
 800431e:	f101 0304 	add.w	r3, r1, #4
 8004322:	d50a      	bpl.n	800433a <_printf_i+0xce>
 8004324:	680e      	ldr	r6, [r1, #0]
 8004326:	602b      	str	r3, [r5, #0]
 8004328:	2e00      	cmp	r6, #0
 800432a:	da03      	bge.n	8004334 <_printf_i+0xc8>
 800432c:	232d      	movs	r3, #45	; 0x2d
 800432e:	4276      	negs	r6, r6
 8004330:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004334:	485e      	ldr	r0, [pc, #376]	; (80044b0 <_printf_i+0x244>)
 8004336:	230a      	movs	r3, #10
 8004338:	e019      	b.n	800436e <_printf_i+0x102>
 800433a:	680e      	ldr	r6, [r1, #0]
 800433c:	602b      	str	r3, [r5, #0]
 800433e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004342:	bf18      	it	ne
 8004344:	b236      	sxthne	r6, r6
 8004346:	e7ef      	b.n	8004328 <_printf_i+0xbc>
 8004348:	682b      	ldr	r3, [r5, #0]
 800434a:	6820      	ldr	r0, [r4, #0]
 800434c:	1d19      	adds	r1, r3, #4
 800434e:	6029      	str	r1, [r5, #0]
 8004350:	0601      	lsls	r1, r0, #24
 8004352:	d501      	bpl.n	8004358 <_printf_i+0xec>
 8004354:	681e      	ldr	r6, [r3, #0]
 8004356:	e002      	b.n	800435e <_printf_i+0xf2>
 8004358:	0646      	lsls	r6, r0, #25
 800435a:	d5fb      	bpl.n	8004354 <_printf_i+0xe8>
 800435c:	881e      	ldrh	r6, [r3, #0]
 800435e:	4854      	ldr	r0, [pc, #336]	; (80044b0 <_printf_i+0x244>)
 8004360:	2f6f      	cmp	r7, #111	; 0x6f
 8004362:	bf0c      	ite	eq
 8004364:	2308      	moveq	r3, #8
 8004366:	230a      	movne	r3, #10
 8004368:	2100      	movs	r1, #0
 800436a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800436e:	6865      	ldr	r5, [r4, #4]
 8004370:	60a5      	str	r5, [r4, #8]
 8004372:	2d00      	cmp	r5, #0
 8004374:	bfa2      	ittt	ge
 8004376:	6821      	ldrge	r1, [r4, #0]
 8004378:	f021 0104 	bicge.w	r1, r1, #4
 800437c:	6021      	strge	r1, [r4, #0]
 800437e:	b90e      	cbnz	r6, 8004384 <_printf_i+0x118>
 8004380:	2d00      	cmp	r5, #0
 8004382:	d04d      	beq.n	8004420 <_printf_i+0x1b4>
 8004384:	4615      	mov	r5, r2
 8004386:	fbb6 f1f3 	udiv	r1, r6, r3
 800438a:	fb03 6711 	mls	r7, r3, r1, r6
 800438e:	5dc7      	ldrb	r7, [r0, r7]
 8004390:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004394:	4637      	mov	r7, r6
 8004396:	42bb      	cmp	r3, r7
 8004398:	460e      	mov	r6, r1
 800439a:	d9f4      	bls.n	8004386 <_printf_i+0x11a>
 800439c:	2b08      	cmp	r3, #8
 800439e:	d10b      	bne.n	80043b8 <_printf_i+0x14c>
 80043a0:	6823      	ldr	r3, [r4, #0]
 80043a2:	07de      	lsls	r6, r3, #31
 80043a4:	d508      	bpl.n	80043b8 <_printf_i+0x14c>
 80043a6:	6923      	ldr	r3, [r4, #16]
 80043a8:	6861      	ldr	r1, [r4, #4]
 80043aa:	4299      	cmp	r1, r3
 80043ac:	bfde      	ittt	le
 80043ae:	2330      	movle	r3, #48	; 0x30
 80043b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80043b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80043b8:	1b52      	subs	r2, r2, r5
 80043ba:	6122      	str	r2, [r4, #16]
 80043bc:	f8cd a000 	str.w	sl, [sp]
 80043c0:	464b      	mov	r3, r9
 80043c2:	aa03      	add	r2, sp, #12
 80043c4:	4621      	mov	r1, r4
 80043c6:	4640      	mov	r0, r8
 80043c8:	f7ff fee2 	bl	8004190 <_printf_common>
 80043cc:	3001      	adds	r0, #1
 80043ce:	d14c      	bne.n	800446a <_printf_i+0x1fe>
 80043d0:	f04f 30ff 	mov.w	r0, #4294967295
 80043d4:	b004      	add	sp, #16
 80043d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043da:	4835      	ldr	r0, [pc, #212]	; (80044b0 <_printf_i+0x244>)
 80043dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80043e0:	6829      	ldr	r1, [r5, #0]
 80043e2:	6823      	ldr	r3, [r4, #0]
 80043e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80043e8:	6029      	str	r1, [r5, #0]
 80043ea:	061d      	lsls	r5, r3, #24
 80043ec:	d514      	bpl.n	8004418 <_printf_i+0x1ac>
 80043ee:	07df      	lsls	r7, r3, #31
 80043f0:	bf44      	itt	mi
 80043f2:	f043 0320 	orrmi.w	r3, r3, #32
 80043f6:	6023      	strmi	r3, [r4, #0]
 80043f8:	b91e      	cbnz	r6, 8004402 <_printf_i+0x196>
 80043fa:	6823      	ldr	r3, [r4, #0]
 80043fc:	f023 0320 	bic.w	r3, r3, #32
 8004400:	6023      	str	r3, [r4, #0]
 8004402:	2310      	movs	r3, #16
 8004404:	e7b0      	b.n	8004368 <_printf_i+0xfc>
 8004406:	6823      	ldr	r3, [r4, #0]
 8004408:	f043 0320 	orr.w	r3, r3, #32
 800440c:	6023      	str	r3, [r4, #0]
 800440e:	2378      	movs	r3, #120	; 0x78
 8004410:	4828      	ldr	r0, [pc, #160]	; (80044b4 <_printf_i+0x248>)
 8004412:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004416:	e7e3      	b.n	80043e0 <_printf_i+0x174>
 8004418:	0659      	lsls	r1, r3, #25
 800441a:	bf48      	it	mi
 800441c:	b2b6      	uxthmi	r6, r6
 800441e:	e7e6      	b.n	80043ee <_printf_i+0x182>
 8004420:	4615      	mov	r5, r2
 8004422:	e7bb      	b.n	800439c <_printf_i+0x130>
 8004424:	682b      	ldr	r3, [r5, #0]
 8004426:	6826      	ldr	r6, [r4, #0]
 8004428:	6961      	ldr	r1, [r4, #20]
 800442a:	1d18      	adds	r0, r3, #4
 800442c:	6028      	str	r0, [r5, #0]
 800442e:	0635      	lsls	r5, r6, #24
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	d501      	bpl.n	8004438 <_printf_i+0x1cc>
 8004434:	6019      	str	r1, [r3, #0]
 8004436:	e002      	b.n	800443e <_printf_i+0x1d2>
 8004438:	0670      	lsls	r0, r6, #25
 800443a:	d5fb      	bpl.n	8004434 <_printf_i+0x1c8>
 800443c:	8019      	strh	r1, [r3, #0]
 800443e:	2300      	movs	r3, #0
 8004440:	6123      	str	r3, [r4, #16]
 8004442:	4615      	mov	r5, r2
 8004444:	e7ba      	b.n	80043bc <_printf_i+0x150>
 8004446:	682b      	ldr	r3, [r5, #0]
 8004448:	1d1a      	adds	r2, r3, #4
 800444a:	602a      	str	r2, [r5, #0]
 800444c:	681d      	ldr	r5, [r3, #0]
 800444e:	6862      	ldr	r2, [r4, #4]
 8004450:	2100      	movs	r1, #0
 8004452:	4628      	mov	r0, r5
 8004454:	f7fb fed4 	bl	8000200 <memchr>
 8004458:	b108      	cbz	r0, 800445e <_printf_i+0x1f2>
 800445a:	1b40      	subs	r0, r0, r5
 800445c:	6060      	str	r0, [r4, #4]
 800445e:	6863      	ldr	r3, [r4, #4]
 8004460:	6123      	str	r3, [r4, #16]
 8004462:	2300      	movs	r3, #0
 8004464:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004468:	e7a8      	b.n	80043bc <_printf_i+0x150>
 800446a:	6923      	ldr	r3, [r4, #16]
 800446c:	462a      	mov	r2, r5
 800446e:	4649      	mov	r1, r9
 8004470:	4640      	mov	r0, r8
 8004472:	47d0      	blx	sl
 8004474:	3001      	adds	r0, #1
 8004476:	d0ab      	beq.n	80043d0 <_printf_i+0x164>
 8004478:	6823      	ldr	r3, [r4, #0]
 800447a:	079b      	lsls	r3, r3, #30
 800447c:	d413      	bmi.n	80044a6 <_printf_i+0x23a>
 800447e:	68e0      	ldr	r0, [r4, #12]
 8004480:	9b03      	ldr	r3, [sp, #12]
 8004482:	4298      	cmp	r0, r3
 8004484:	bfb8      	it	lt
 8004486:	4618      	movlt	r0, r3
 8004488:	e7a4      	b.n	80043d4 <_printf_i+0x168>
 800448a:	2301      	movs	r3, #1
 800448c:	4632      	mov	r2, r6
 800448e:	4649      	mov	r1, r9
 8004490:	4640      	mov	r0, r8
 8004492:	47d0      	blx	sl
 8004494:	3001      	adds	r0, #1
 8004496:	d09b      	beq.n	80043d0 <_printf_i+0x164>
 8004498:	3501      	adds	r5, #1
 800449a:	68e3      	ldr	r3, [r4, #12]
 800449c:	9903      	ldr	r1, [sp, #12]
 800449e:	1a5b      	subs	r3, r3, r1
 80044a0:	42ab      	cmp	r3, r5
 80044a2:	dcf2      	bgt.n	800448a <_printf_i+0x21e>
 80044a4:	e7eb      	b.n	800447e <_printf_i+0x212>
 80044a6:	2500      	movs	r5, #0
 80044a8:	f104 0619 	add.w	r6, r4, #25
 80044ac:	e7f5      	b.n	800449a <_printf_i+0x22e>
 80044ae:	bf00      	nop
 80044b0:	08004f22 	.word	0x08004f22
 80044b4:	08004f33 	.word	0x08004f33

080044b8 <_scanf_chars>:
 80044b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044bc:	4615      	mov	r5, r2
 80044be:	688a      	ldr	r2, [r1, #8]
 80044c0:	4680      	mov	r8, r0
 80044c2:	460c      	mov	r4, r1
 80044c4:	b932      	cbnz	r2, 80044d4 <_scanf_chars+0x1c>
 80044c6:	698a      	ldr	r2, [r1, #24]
 80044c8:	2a00      	cmp	r2, #0
 80044ca:	bf0c      	ite	eq
 80044cc:	2201      	moveq	r2, #1
 80044ce:	f04f 32ff 	movne.w	r2, #4294967295
 80044d2:	608a      	str	r2, [r1, #8]
 80044d4:	6822      	ldr	r2, [r4, #0]
 80044d6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8004568 <_scanf_chars+0xb0>
 80044da:	06d1      	lsls	r1, r2, #27
 80044dc:	bf5f      	itttt	pl
 80044de:	681a      	ldrpl	r2, [r3, #0]
 80044e0:	1d11      	addpl	r1, r2, #4
 80044e2:	6019      	strpl	r1, [r3, #0]
 80044e4:	6816      	ldrpl	r6, [r2, #0]
 80044e6:	2700      	movs	r7, #0
 80044e8:	69a0      	ldr	r0, [r4, #24]
 80044ea:	b188      	cbz	r0, 8004510 <_scanf_chars+0x58>
 80044ec:	2801      	cmp	r0, #1
 80044ee:	d107      	bne.n	8004500 <_scanf_chars+0x48>
 80044f0:	682a      	ldr	r2, [r5, #0]
 80044f2:	7811      	ldrb	r1, [r2, #0]
 80044f4:	6962      	ldr	r2, [r4, #20]
 80044f6:	5c52      	ldrb	r2, [r2, r1]
 80044f8:	b952      	cbnz	r2, 8004510 <_scanf_chars+0x58>
 80044fa:	2f00      	cmp	r7, #0
 80044fc:	d031      	beq.n	8004562 <_scanf_chars+0xaa>
 80044fe:	e022      	b.n	8004546 <_scanf_chars+0x8e>
 8004500:	2802      	cmp	r0, #2
 8004502:	d120      	bne.n	8004546 <_scanf_chars+0x8e>
 8004504:	682b      	ldr	r3, [r5, #0]
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	f813 3009 	ldrb.w	r3, [r3, r9]
 800450c:	071b      	lsls	r3, r3, #28
 800450e:	d41a      	bmi.n	8004546 <_scanf_chars+0x8e>
 8004510:	6823      	ldr	r3, [r4, #0]
 8004512:	06da      	lsls	r2, r3, #27
 8004514:	bf5e      	ittt	pl
 8004516:	682b      	ldrpl	r3, [r5, #0]
 8004518:	781b      	ldrbpl	r3, [r3, #0]
 800451a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800451e:	682a      	ldr	r2, [r5, #0]
 8004520:	686b      	ldr	r3, [r5, #4]
 8004522:	3201      	adds	r2, #1
 8004524:	602a      	str	r2, [r5, #0]
 8004526:	68a2      	ldr	r2, [r4, #8]
 8004528:	3b01      	subs	r3, #1
 800452a:	3a01      	subs	r2, #1
 800452c:	606b      	str	r3, [r5, #4]
 800452e:	3701      	adds	r7, #1
 8004530:	60a2      	str	r2, [r4, #8]
 8004532:	b142      	cbz	r2, 8004546 <_scanf_chars+0x8e>
 8004534:	2b00      	cmp	r3, #0
 8004536:	dcd7      	bgt.n	80044e8 <_scanf_chars+0x30>
 8004538:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800453c:	4629      	mov	r1, r5
 800453e:	4640      	mov	r0, r8
 8004540:	4798      	blx	r3
 8004542:	2800      	cmp	r0, #0
 8004544:	d0d0      	beq.n	80044e8 <_scanf_chars+0x30>
 8004546:	6823      	ldr	r3, [r4, #0]
 8004548:	f013 0310 	ands.w	r3, r3, #16
 800454c:	d105      	bne.n	800455a <_scanf_chars+0xa2>
 800454e:	68e2      	ldr	r2, [r4, #12]
 8004550:	3201      	adds	r2, #1
 8004552:	60e2      	str	r2, [r4, #12]
 8004554:	69a2      	ldr	r2, [r4, #24]
 8004556:	b102      	cbz	r2, 800455a <_scanf_chars+0xa2>
 8004558:	7033      	strb	r3, [r6, #0]
 800455a:	6923      	ldr	r3, [r4, #16]
 800455c:	443b      	add	r3, r7
 800455e:	6123      	str	r3, [r4, #16]
 8004560:	2000      	movs	r0, #0
 8004562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004566:	bf00      	nop
 8004568:	08004e11 	.word	0x08004e11

0800456c <_scanf_i>:
 800456c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004570:	4698      	mov	r8, r3
 8004572:	4b76      	ldr	r3, [pc, #472]	; (800474c <_scanf_i+0x1e0>)
 8004574:	460c      	mov	r4, r1
 8004576:	4682      	mov	sl, r0
 8004578:	4616      	mov	r6, r2
 800457a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800457e:	b087      	sub	sp, #28
 8004580:	ab03      	add	r3, sp, #12
 8004582:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004586:	4b72      	ldr	r3, [pc, #456]	; (8004750 <_scanf_i+0x1e4>)
 8004588:	69a1      	ldr	r1, [r4, #24]
 800458a:	4a72      	ldr	r2, [pc, #456]	; (8004754 <_scanf_i+0x1e8>)
 800458c:	2903      	cmp	r1, #3
 800458e:	bf18      	it	ne
 8004590:	461a      	movne	r2, r3
 8004592:	68a3      	ldr	r3, [r4, #8]
 8004594:	9201      	str	r2, [sp, #4]
 8004596:	1e5a      	subs	r2, r3, #1
 8004598:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800459c:	bf88      	it	hi
 800459e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80045a2:	4627      	mov	r7, r4
 80045a4:	bf82      	ittt	hi
 80045a6:	eb03 0905 	addhi.w	r9, r3, r5
 80045aa:	f240 135d 	movwhi	r3, #349	; 0x15d
 80045ae:	60a3      	strhi	r3, [r4, #8]
 80045b0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80045b4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80045b8:	bf98      	it	ls
 80045ba:	f04f 0900 	movls.w	r9, #0
 80045be:	6023      	str	r3, [r4, #0]
 80045c0:	463d      	mov	r5, r7
 80045c2:	f04f 0b00 	mov.w	fp, #0
 80045c6:	6831      	ldr	r1, [r6, #0]
 80045c8:	ab03      	add	r3, sp, #12
 80045ca:	7809      	ldrb	r1, [r1, #0]
 80045cc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80045d0:	2202      	movs	r2, #2
 80045d2:	f7fb fe15 	bl	8000200 <memchr>
 80045d6:	b328      	cbz	r0, 8004624 <_scanf_i+0xb8>
 80045d8:	f1bb 0f01 	cmp.w	fp, #1
 80045dc:	d159      	bne.n	8004692 <_scanf_i+0x126>
 80045de:	6862      	ldr	r2, [r4, #4]
 80045e0:	b92a      	cbnz	r2, 80045ee <_scanf_i+0x82>
 80045e2:	6822      	ldr	r2, [r4, #0]
 80045e4:	2308      	movs	r3, #8
 80045e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ea:	6063      	str	r3, [r4, #4]
 80045ec:	6022      	str	r2, [r4, #0]
 80045ee:	6822      	ldr	r2, [r4, #0]
 80045f0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80045f4:	6022      	str	r2, [r4, #0]
 80045f6:	68a2      	ldr	r2, [r4, #8]
 80045f8:	1e51      	subs	r1, r2, #1
 80045fa:	60a1      	str	r1, [r4, #8]
 80045fc:	b192      	cbz	r2, 8004624 <_scanf_i+0xb8>
 80045fe:	6832      	ldr	r2, [r6, #0]
 8004600:	1c51      	adds	r1, r2, #1
 8004602:	6031      	str	r1, [r6, #0]
 8004604:	7812      	ldrb	r2, [r2, #0]
 8004606:	f805 2b01 	strb.w	r2, [r5], #1
 800460a:	6872      	ldr	r2, [r6, #4]
 800460c:	3a01      	subs	r2, #1
 800460e:	2a00      	cmp	r2, #0
 8004610:	6072      	str	r2, [r6, #4]
 8004612:	dc07      	bgt.n	8004624 <_scanf_i+0xb8>
 8004614:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8004618:	4631      	mov	r1, r6
 800461a:	4650      	mov	r0, sl
 800461c:	4790      	blx	r2
 800461e:	2800      	cmp	r0, #0
 8004620:	f040 8085 	bne.w	800472e <_scanf_i+0x1c2>
 8004624:	f10b 0b01 	add.w	fp, fp, #1
 8004628:	f1bb 0f03 	cmp.w	fp, #3
 800462c:	d1cb      	bne.n	80045c6 <_scanf_i+0x5a>
 800462e:	6863      	ldr	r3, [r4, #4]
 8004630:	b90b      	cbnz	r3, 8004636 <_scanf_i+0xca>
 8004632:	230a      	movs	r3, #10
 8004634:	6063      	str	r3, [r4, #4]
 8004636:	6863      	ldr	r3, [r4, #4]
 8004638:	4947      	ldr	r1, [pc, #284]	; (8004758 <_scanf_i+0x1ec>)
 800463a:	6960      	ldr	r0, [r4, #20]
 800463c:	1ac9      	subs	r1, r1, r3
 800463e:	f000 f88d 	bl	800475c <__sccl>
 8004642:	f04f 0b00 	mov.w	fp, #0
 8004646:	68a3      	ldr	r3, [r4, #8]
 8004648:	6822      	ldr	r2, [r4, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d03d      	beq.n	80046ca <_scanf_i+0x15e>
 800464e:	6831      	ldr	r1, [r6, #0]
 8004650:	6960      	ldr	r0, [r4, #20]
 8004652:	f891 c000 	ldrb.w	ip, [r1]
 8004656:	f810 000c 	ldrb.w	r0, [r0, ip]
 800465a:	2800      	cmp	r0, #0
 800465c:	d035      	beq.n	80046ca <_scanf_i+0x15e>
 800465e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8004662:	d124      	bne.n	80046ae <_scanf_i+0x142>
 8004664:	0510      	lsls	r0, r2, #20
 8004666:	d522      	bpl.n	80046ae <_scanf_i+0x142>
 8004668:	f10b 0b01 	add.w	fp, fp, #1
 800466c:	f1b9 0f00 	cmp.w	r9, #0
 8004670:	d003      	beq.n	800467a <_scanf_i+0x10e>
 8004672:	3301      	adds	r3, #1
 8004674:	f109 39ff 	add.w	r9, r9, #4294967295
 8004678:	60a3      	str	r3, [r4, #8]
 800467a:	6873      	ldr	r3, [r6, #4]
 800467c:	3b01      	subs	r3, #1
 800467e:	2b00      	cmp	r3, #0
 8004680:	6073      	str	r3, [r6, #4]
 8004682:	dd1b      	ble.n	80046bc <_scanf_i+0x150>
 8004684:	6833      	ldr	r3, [r6, #0]
 8004686:	3301      	adds	r3, #1
 8004688:	6033      	str	r3, [r6, #0]
 800468a:	68a3      	ldr	r3, [r4, #8]
 800468c:	3b01      	subs	r3, #1
 800468e:	60a3      	str	r3, [r4, #8]
 8004690:	e7d9      	b.n	8004646 <_scanf_i+0xda>
 8004692:	f1bb 0f02 	cmp.w	fp, #2
 8004696:	d1ae      	bne.n	80045f6 <_scanf_i+0x8a>
 8004698:	6822      	ldr	r2, [r4, #0]
 800469a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800469e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80046a2:	d1bf      	bne.n	8004624 <_scanf_i+0xb8>
 80046a4:	2310      	movs	r3, #16
 80046a6:	6063      	str	r3, [r4, #4]
 80046a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046ac:	e7a2      	b.n	80045f4 <_scanf_i+0x88>
 80046ae:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80046b2:	6022      	str	r2, [r4, #0]
 80046b4:	780b      	ldrb	r3, [r1, #0]
 80046b6:	f805 3b01 	strb.w	r3, [r5], #1
 80046ba:	e7de      	b.n	800467a <_scanf_i+0x10e>
 80046bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80046c0:	4631      	mov	r1, r6
 80046c2:	4650      	mov	r0, sl
 80046c4:	4798      	blx	r3
 80046c6:	2800      	cmp	r0, #0
 80046c8:	d0df      	beq.n	800468a <_scanf_i+0x11e>
 80046ca:	6823      	ldr	r3, [r4, #0]
 80046cc:	05db      	lsls	r3, r3, #23
 80046ce:	d50d      	bpl.n	80046ec <_scanf_i+0x180>
 80046d0:	42bd      	cmp	r5, r7
 80046d2:	d909      	bls.n	80046e8 <_scanf_i+0x17c>
 80046d4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80046d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80046dc:	4632      	mov	r2, r6
 80046de:	4650      	mov	r0, sl
 80046e0:	4798      	blx	r3
 80046e2:	f105 39ff 	add.w	r9, r5, #4294967295
 80046e6:	464d      	mov	r5, r9
 80046e8:	42bd      	cmp	r5, r7
 80046ea:	d02d      	beq.n	8004748 <_scanf_i+0x1dc>
 80046ec:	6822      	ldr	r2, [r4, #0]
 80046ee:	f012 0210 	ands.w	r2, r2, #16
 80046f2:	d113      	bne.n	800471c <_scanf_i+0x1b0>
 80046f4:	702a      	strb	r2, [r5, #0]
 80046f6:	6863      	ldr	r3, [r4, #4]
 80046f8:	9e01      	ldr	r6, [sp, #4]
 80046fa:	4639      	mov	r1, r7
 80046fc:	4650      	mov	r0, sl
 80046fe:	47b0      	blx	r6
 8004700:	6821      	ldr	r1, [r4, #0]
 8004702:	f8d8 3000 	ldr.w	r3, [r8]
 8004706:	f011 0f20 	tst.w	r1, #32
 800470a:	d013      	beq.n	8004734 <_scanf_i+0x1c8>
 800470c:	1d1a      	adds	r2, r3, #4
 800470e:	f8c8 2000 	str.w	r2, [r8]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6018      	str	r0, [r3, #0]
 8004716:	68e3      	ldr	r3, [r4, #12]
 8004718:	3301      	adds	r3, #1
 800471a:	60e3      	str	r3, [r4, #12]
 800471c:	1bed      	subs	r5, r5, r7
 800471e:	44ab      	add	fp, r5
 8004720:	6925      	ldr	r5, [r4, #16]
 8004722:	445d      	add	r5, fp
 8004724:	6125      	str	r5, [r4, #16]
 8004726:	2000      	movs	r0, #0
 8004728:	b007      	add	sp, #28
 800472a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800472e:	f04f 0b00 	mov.w	fp, #0
 8004732:	e7ca      	b.n	80046ca <_scanf_i+0x15e>
 8004734:	1d1a      	adds	r2, r3, #4
 8004736:	f8c8 2000 	str.w	r2, [r8]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f011 0f01 	tst.w	r1, #1
 8004740:	bf14      	ite	ne
 8004742:	8018      	strhne	r0, [r3, #0]
 8004744:	6018      	streq	r0, [r3, #0]
 8004746:	e7e6      	b.n	8004716 <_scanf_i+0x1aa>
 8004748:	2001      	movs	r0, #1
 800474a:	e7ed      	b.n	8004728 <_scanf_i+0x1bc>
 800474c:	08004dec 	.word	0x08004dec
 8004750:	080048b1 	.word	0x080048b1
 8004754:	08003b1d 	.word	0x08003b1d
 8004758:	08004f5d 	.word	0x08004f5d

0800475c <__sccl>:
 800475c:	b570      	push	{r4, r5, r6, lr}
 800475e:	780b      	ldrb	r3, [r1, #0]
 8004760:	4604      	mov	r4, r0
 8004762:	2b5e      	cmp	r3, #94	; 0x5e
 8004764:	bf0b      	itete	eq
 8004766:	784b      	ldrbeq	r3, [r1, #1]
 8004768:	1c48      	addne	r0, r1, #1
 800476a:	1c88      	addeq	r0, r1, #2
 800476c:	2200      	movne	r2, #0
 800476e:	bf08      	it	eq
 8004770:	2201      	moveq	r2, #1
 8004772:	1e61      	subs	r1, r4, #1
 8004774:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8004778:	f801 2f01 	strb.w	r2, [r1, #1]!
 800477c:	42a9      	cmp	r1, r5
 800477e:	d1fb      	bne.n	8004778 <__sccl+0x1c>
 8004780:	b90b      	cbnz	r3, 8004786 <__sccl+0x2a>
 8004782:	3801      	subs	r0, #1
 8004784:	bd70      	pop	{r4, r5, r6, pc}
 8004786:	f082 0201 	eor.w	r2, r2, #1
 800478a:	54e2      	strb	r2, [r4, r3]
 800478c:	4605      	mov	r5, r0
 800478e:	4628      	mov	r0, r5
 8004790:	f810 1b01 	ldrb.w	r1, [r0], #1
 8004794:	292d      	cmp	r1, #45	; 0x2d
 8004796:	d006      	beq.n	80047a6 <__sccl+0x4a>
 8004798:	295d      	cmp	r1, #93	; 0x5d
 800479a:	d0f3      	beq.n	8004784 <__sccl+0x28>
 800479c:	b909      	cbnz	r1, 80047a2 <__sccl+0x46>
 800479e:	4628      	mov	r0, r5
 80047a0:	e7f0      	b.n	8004784 <__sccl+0x28>
 80047a2:	460b      	mov	r3, r1
 80047a4:	e7f1      	b.n	800478a <__sccl+0x2e>
 80047a6:	786e      	ldrb	r6, [r5, #1]
 80047a8:	2e5d      	cmp	r6, #93	; 0x5d
 80047aa:	d0fa      	beq.n	80047a2 <__sccl+0x46>
 80047ac:	42b3      	cmp	r3, r6
 80047ae:	dcf8      	bgt.n	80047a2 <__sccl+0x46>
 80047b0:	3502      	adds	r5, #2
 80047b2:	4619      	mov	r1, r3
 80047b4:	3101      	adds	r1, #1
 80047b6:	428e      	cmp	r6, r1
 80047b8:	5462      	strb	r2, [r4, r1]
 80047ba:	dcfb      	bgt.n	80047b4 <__sccl+0x58>
 80047bc:	1af1      	subs	r1, r6, r3
 80047be:	3901      	subs	r1, #1
 80047c0:	1c58      	adds	r0, r3, #1
 80047c2:	42b3      	cmp	r3, r6
 80047c4:	bfa8      	it	ge
 80047c6:	2100      	movge	r1, #0
 80047c8:	1843      	adds	r3, r0, r1
 80047ca:	e7e0      	b.n	800478e <__sccl+0x32>

080047cc <_strtoul_l.constprop.0>:
 80047cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80047d0:	4f36      	ldr	r7, [pc, #216]	; (80048ac <_strtoul_l.constprop.0+0xe0>)
 80047d2:	4686      	mov	lr, r0
 80047d4:	460d      	mov	r5, r1
 80047d6:	4628      	mov	r0, r5
 80047d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80047dc:	5de6      	ldrb	r6, [r4, r7]
 80047de:	f016 0608 	ands.w	r6, r6, #8
 80047e2:	d1f8      	bne.n	80047d6 <_strtoul_l.constprop.0+0xa>
 80047e4:	2c2d      	cmp	r4, #45	; 0x2d
 80047e6:	d12f      	bne.n	8004848 <_strtoul_l.constprop.0+0x7c>
 80047e8:	782c      	ldrb	r4, [r5, #0]
 80047ea:	2601      	movs	r6, #1
 80047ec:	1c85      	adds	r5, r0, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d057      	beq.n	80048a2 <_strtoul_l.constprop.0+0xd6>
 80047f2:	2b10      	cmp	r3, #16
 80047f4:	d109      	bne.n	800480a <_strtoul_l.constprop.0+0x3e>
 80047f6:	2c30      	cmp	r4, #48	; 0x30
 80047f8:	d107      	bne.n	800480a <_strtoul_l.constprop.0+0x3e>
 80047fa:	7828      	ldrb	r0, [r5, #0]
 80047fc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004800:	2858      	cmp	r0, #88	; 0x58
 8004802:	d149      	bne.n	8004898 <_strtoul_l.constprop.0+0xcc>
 8004804:	786c      	ldrb	r4, [r5, #1]
 8004806:	2310      	movs	r3, #16
 8004808:	3502      	adds	r5, #2
 800480a:	f04f 38ff 	mov.w	r8, #4294967295
 800480e:	2700      	movs	r7, #0
 8004810:	fbb8 f8f3 	udiv	r8, r8, r3
 8004814:	fb03 f908 	mul.w	r9, r3, r8
 8004818:	ea6f 0909 	mvn.w	r9, r9
 800481c:	4638      	mov	r0, r7
 800481e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004822:	f1bc 0f09 	cmp.w	ip, #9
 8004826:	d814      	bhi.n	8004852 <_strtoul_l.constprop.0+0x86>
 8004828:	4664      	mov	r4, ip
 800482a:	42a3      	cmp	r3, r4
 800482c:	dd22      	ble.n	8004874 <_strtoul_l.constprop.0+0xa8>
 800482e:	2f00      	cmp	r7, #0
 8004830:	db1d      	blt.n	800486e <_strtoul_l.constprop.0+0xa2>
 8004832:	4580      	cmp	r8, r0
 8004834:	d31b      	bcc.n	800486e <_strtoul_l.constprop.0+0xa2>
 8004836:	d101      	bne.n	800483c <_strtoul_l.constprop.0+0x70>
 8004838:	45a1      	cmp	r9, r4
 800483a:	db18      	blt.n	800486e <_strtoul_l.constprop.0+0xa2>
 800483c:	fb00 4003 	mla	r0, r0, r3, r4
 8004840:	2701      	movs	r7, #1
 8004842:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004846:	e7ea      	b.n	800481e <_strtoul_l.constprop.0+0x52>
 8004848:	2c2b      	cmp	r4, #43	; 0x2b
 800484a:	bf04      	itt	eq
 800484c:	782c      	ldrbeq	r4, [r5, #0]
 800484e:	1c85      	addeq	r5, r0, #2
 8004850:	e7cd      	b.n	80047ee <_strtoul_l.constprop.0+0x22>
 8004852:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004856:	f1bc 0f19 	cmp.w	ip, #25
 800485a:	d801      	bhi.n	8004860 <_strtoul_l.constprop.0+0x94>
 800485c:	3c37      	subs	r4, #55	; 0x37
 800485e:	e7e4      	b.n	800482a <_strtoul_l.constprop.0+0x5e>
 8004860:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004864:	f1bc 0f19 	cmp.w	ip, #25
 8004868:	d804      	bhi.n	8004874 <_strtoul_l.constprop.0+0xa8>
 800486a:	3c57      	subs	r4, #87	; 0x57
 800486c:	e7dd      	b.n	800482a <_strtoul_l.constprop.0+0x5e>
 800486e:	f04f 37ff 	mov.w	r7, #4294967295
 8004872:	e7e6      	b.n	8004842 <_strtoul_l.constprop.0+0x76>
 8004874:	2f00      	cmp	r7, #0
 8004876:	da07      	bge.n	8004888 <_strtoul_l.constprop.0+0xbc>
 8004878:	2322      	movs	r3, #34	; 0x22
 800487a:	f8ce 3000 	str.w	r3, [lr]
 800487e:	f04f 30ff 	mov.w	r0, #4294967295
 8004882:	b932      	cbnz	r2, 8004892 <_strtoul_l.constprop.0+0xc6>
 8004884:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004888:	b106      	cbz	r6, 800488c <_strtoul_l.constprop.0+0xc0>
 800488a:	4240      	negs	r0, r0
 800488c:	2a00      	cmp	r2, #0
 800488e:	d0f9      	beq.n	8004884 <_strtoul_l.constprop.0+0xb8>
 8004890:	b107      	cbz	r7, 8004894 <_strtoul_l.constprop.0+0xc8>
 8004892:	1e69      	subs	r1, r5, #1
 8004894:	6011      	str	r1, [r2, #0]
 8004896:	e7f5      	b.n	8004884 <_strtoul_l.constprop.0+0xb8>
 8004898:	2430      	movs	r4, #48	; 0x30
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1b5      	bne.n	800480a <_strtoul_l.constprop.0+0x3e>
 800489e:	2308      	movs	r3, #8
 80048a0:	e7b3      	b.n	800480a <_strtoul_l.constprop.0+0x3e>
 80048a2:	2c30      	cmp	r4, #48	; 0x30
 80048a4:	d0a9      	beq.n	80047fa <_strtoul_l.constprop.0+0x2e>
 80048a6:	230a      	movs	r3, #10
 80048a8:	e7af      	b.n	800480a <_strtoul_l.constprop.0+0x3e>
 80048aa:	bf00      	nop
 80048ac:	08004e11 	.word	0x08004e11

080048b0 <_strtoul_r>:
 80048b0:	f7ff bf8c 	b.w	80047cc <_strtoul_l.constprop.0>

080048b4 <__submore>:
 80048b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048b8:	460c      	mov	r4, r1
 80048ba:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80048bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048c0:	4299      	cmp	r1, r3
 80048c2:	d11d      	bne.n	8004900 <__submore+0x4c>
 80048c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80048c8:	f000 f8c4 	bl	8004a54 <_malloc_r>
 80048cc:	b918      	cbnz	r0, 80048d6 <__submore+0x22>
 80048ce:	f04f 30ff 	mov.w	r0, #4294967295
 80048d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048da:	63a3      	str	r3, [r4, #56]	; 0x38
 80048dc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80048e0:	6360      	str	r0, [r4, #52]	; 0x34
 80048e2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80048e6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80048ea:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80048ee:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80048f2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80048f6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80048fa:	6020      	str	r0, [r4, #0]
 80048fc:	2000      	movs	r0, #0
 80048fe:	e7e8      	b.n	80048d2 <__submore+0x1e>
 8004900:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004902:	0077      	lsls	r7, r6, #1
 8004904:	463a      	mov	r2, r7
 8004906:	f000 f919 	bl	8004b3c <_realloc_r>
 800490a:	4605      	mov	r5, r0
 800490c:	2800      	cmp	r0, #0
 800490e:	d0de      	beq.n	80048ce <__submore+0x1a>
 8004910:	eb00 0806 	add.w	r8, r0, r6
 8004914:	4601      	mov	r1, r0
 8004916:	4632      	mov	r2, r6
 8004918:	4640      	mov	r0, r8
 800491a:	f000 f807 	bl	800492c <memcpy>
 800491e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8004922:	f8c4 8000 	str.w	r8, [r4]
 8004926:	e7e9      	b.n	80048fc <__submore+0x48>

08004928 <__retarget_lock_acquire_recursive>:
 8004928:	4770      	bx	lr

0800492a <__retarget_lock_release_recursive>:
 800492a:	4770      	bx	lr

0800492c <memcpy>:
 800492c:	440a      	add	r2, r1
 800492e:	4291      	cmp	r1, r2
 8004930:	f100 33ff 	add.w	r3, r0, #4294967295
 8004934:	d100      	bne.n	8004938 <memcpy+0xc>
 8004936:	4770      	bx	lr
 8004938:	b510      	push	{r4, lr}
 800493a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800493e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004942:	4291      	cmp	r1, r2
 8004944:	d1f9      	bne.n	800493a <memcpy+0xe>
 8004946:	bd10      	pop	{r4, pc}

08004948 <memmove>:
 8004948:	4288      	cmp	r0, r1
 800494a:	b510      	push	{r4, lr}
 800494c:	eb01 0402 	add.w	r4, r1, r2
 8004950:	d902      	bls.n	8004958 <memmove+0x10>
 8004952:	4284      	cmp	r4, r0
 8004954:	4623      	mov	r3, r4
 8004956:	d807      	bhi.n	8004968 <memmove+0x20>
 8004958:	1e43      	subs	r3, r0, #1
 800495a:	42a1      	cmp	r1, r4
 800495c:	d008      	beq.n	8004970 <memmove+0x28>
 800495e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004962:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004966:	e7f8      	b.n	800495a <memmove+0x12>
 8004968:	4402      	add	r2, r0
 800496a:	4601      	mov	r1, r0
 800496c:	428a      	cmp	r2, r1
 800496e:	d100      	bne.n	8004972 <memmove+0x2a>
 8004970:	bd10      	pop	{r4, pc}
 8004972:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004976:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800497a:	e7f7      	b.n	800496c <memmove+0x24>

0800497c <_free_r>:
 800497c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800497e:	2900      	cmp	r1, #0
 8004980:	d044      	beq.n	8004a0c <_free_r+0x90>
 8004982:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004986:	9001      	str	r0, [sp, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	f1a1 0404 	sub.w	r4, r1, #4
 800498e:	bfb8      	it	lt
 8004990:	18e4      	addlt	r4, r4, r3
 8004992:	f000 f913 	bl	8004bbc <__malloc_lock>
 8004996:	4a1e      	ldr	r2, [pc, #120]	; (8004a10 <_free_r+0x94>)
 8004998:	9801      	ldr	r0, [sp, #4]
 800499a:	6813      	ldr	r3, [r2, #0]
 800499c:	b933      	cbnz	r3, 80049ac <_free_r+0x30>
 800499e:	6063      	str	r3, [r4, #4]
 80049a0:	6014      	str	r4, [r2, #0]
 80049a2:	b003      	add	sp, #12
 80049a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80049a8:	f000 b90e 	b.w	8004bc8 <__malloc_unlock>
 80049ac:	42a3      	cmp	r3, r4
 80049ae:	d908      	bls.n	80049c2 <_free_r+0x46>
 80049b0:	6825      	ldr	r5, [r4, #0]
 80049b2:	1961      	adds	r1, r4, r5
 80049b4:	428b      	cmp	r3, r1
 80049b6:	bf01      	itttt	eq
 80049b8:	6819      	ldreq	r1, [r3, #0]
 80049ba:	685b      	ldreq	r3, [r3, #4]
 80049bc:	1949      	addeq	r1, r1, r5
 80049be:	6021      	streq	r1, [r4, #0]
 80049c0:	e7ed      	b.n	800499e <_free_r+0x22>
 80049c2:	461a      	mov	r2, r3
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	b10b      	cbz	r3, 80049cc <_free_r+0x50>
 80049c8:	42a3      	cmp	r3, r4
 80049ca:	d9fa      	bls.n	80049c2 <_free_r+0x46>
 80049cc:	6811      	ldr	r1, [r2, #0]
 80049ce:	1855      	adds	r5, r2, r1
 80049d0:	42a5      	cmp	r5, r4
 80049d2:	d10b      	bne.n	80049ec <_free_r+0x70>
 80049d4:	6824      	ldr	r4, [r4, #0]
 80049d6:	4421      	add	r1, r4
 80049d8:	1854      	adds	r4, r2, r1
 80049da:	42a3      	cmp	r3, r4
 80049dc:	6011      	str	r1, [r2, #0]
 80049de:	d1e0      	bne.n	80049a2 <_free_r+0x26>
 80049e0:	681c      	ldr	r4, [r3, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	6053      	str	r3, [r2, #4]
 80049e6:	4421      	add	r1, r4
 80049e8:	6011      	str	r1, [r2, #0]
 80049ea:	e7da      	b.n	80049a2 <_free_r+0x26>
 80049ec:	d902      	bls.n	80049f4 <_free_r+0x78>
 80049ee:	230c      	movs	r3, #12
 80049f0:	6003      	str	r3, [r0, #0]
 80049f2:	e7d6      	b.n	80049a2 <_free_r+0x26>
 80049f4:	6825      	ldr	r5, [r4, #0]
 80049f6:	1961      	adds	r1, r4, r5
 80049f8:	428b      	cmp	r3, r1
 80049fa:	bf04      	itt	eq
 80049fc:	6819      	ldreq	r1, [r3, #0]
 80049fe:	685b      	ldreq	r3, [r3, #4]
 8004a00:	6063      	str	r3, [r4, #4]
 8004a02:	bf04      	itt	eq
 8004a04:	1949      	addeq	r1, r1, r5
 8004a06:	6021      	streq	r1, [r4, #0]
 8004a08:	6054      	str	r4, [r2, #4]
 8004a0a:	e7ca      	b.n	80049a2 <_free_r+0x26>
 8004a0c:	b003      	add	sp, #12
 8004a0e:	bd30      	pop	{r4, r5, pc}
 8004a10:	200005bc 	.word	0x200005bc

08004a14 <sbrk_aligned>:
 8004a14:	b570      	push	{r4, r5, r6, lr}
 8004a16:	4e0e      	ldr	r6, [pc, #56]	; (8004a50 <sbrk_aligned+0x3c>)
 8004a18:	460c      	mov	r4, r1
 8004a1a:	6831      	ldr	r1, [r6, #0]
 8004a1c:	4605      	mov	r5, r0
 8004a1e:	b911      	cbnz	r1, 8004a26 <sbrk_aligned+0x12>
 8004a20:	f000 f8bc 	bl	8004b9c <_sbrk_r>
 8004a24:	6030      	str	r0, [r6, #0]
 8004a26:	4621      	mov	r1, r4
 8004a28:	4628      	mov	r0, r5
 8004a2a:	f000 f8b7 	bl	8004b9c <_sbrk_r>
 8004a2e:	1c43      	adds	r3, r0, #1
 8004a30:	d00a      	beq.n	8004a48 <sbrk_aligned+0x34>
 8004a32:	1cc4      	adds	r4, r0, #3
 8004a34:	f024 0403 	bic.w	r4, r4, #3
 8004a38:	42a0      	cmp	r0, r4
 8004a3a:	d007      	beq.n	8004a4c <sbrk_aligned+0x38>
 8004a3c:	1a21      	subs	r1, r4, r0
 8004a3e:	4628      	mov	r0, r5
 8004a40:	f000 f8ac 	bl	8004b9c <_sbrk_r>
 8004a44:	3001      	adds	r0, #1
 8004a46:	d101      	bne.n	8004a4c <sbrk_aligned+0x38>
 8004a48:	f04f 34ff 	mov.w	r4, #4294967295
 8004a4c:	4620      	mov	r0, r4
 8004a4e:	bd70      	pop	{r4, r5, r6, pc}
 8004a50:	200005c0 	.word	0x200005c0

08004a54 <_malloc_r>:
 8004a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a58:	1ccd      	adds	r5, r1, #3
 8004a5a:	f025 0503 	bic.w	r5, r5, #3
 8004a5e:	3508      	adds	r5, #8
 8004a60:	2d0c      	cmp	r5, #12
 8004a62:	bf38      	it	cc
 8004a64:	250c      	movcc	r5, #12
 8004a66:	2d00      	cmp	r5, #0
 8004a68:	4607      	mov	r7, r0
 8004a6a:	db01      	blt.n	8004a70 <_malloc_r+0x1c>
 8004a6c:	42a9      	cmp	r1, r5
 8004a6e:	d905      	bls.n	8004a7c <_malloc_r+0x28>
 8004a70:	230c      	movs	r3, #12
 8004a72:	603b      	str	r3, [r7, #0]
 8004a74:	2600      	movs	r6, #0
 8004a76:	4630      	mov	r0, r6
 8004a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a7c:	4e2e      	ldr	r6, [pc, #184]	; (8004b38 <_malloc_r+0xe4>)
 8004a7e:	f000 f89d 	bl	8004bbc <__malloc_lock>
 8004a82:	6833      	ldr	r3, [r6, #0]
 8004a84:	461c      	mov	r4, r3
 8004a86:	bb34      	cbnz	r4, 8004ad6 <_malloc_r+0x82>
 8004a88:	4629      	mov	r1, r5
 8004a8a:	4638      	mov	r0, r7
 8004a8c:	f7ff ffc2 	bl	8004a14 <sbrk_aligned>
 8004a90:	1c43      	adds	r3, r0, #1
 8004a92:	4604      	mov	r4, r0
 8004a94:	d14d      	bne.n	8004b32 <_malloc_r+0xde>
 8004a96:	6834      	ldr	r4, [r6, #0]
 8004a98:	4626      	mov	r6, r4
 8004a9a:	2e00      	cmp	r6, #0
 8004a9c:	d140      	bne.n	8004b20 <_malloc_r+0xcc>
 8004a9e:	6823      	ldr	r3, [r4, #0]
 8004aa0:	4631      	mov	r1, r6
 8004aa2:	4638      	mov	r0, r7
 8004aa4:	eb04 0803 	add.w	r8, r4, r3
 8004aa8:	f000 f878 	bl	8004b9c <_sbrk_r>
 8004aac:	4580      	cmp	r8, r0
 8004aae:	d13a      	bne.n	8004b26 <_malloc_r+0xd2>
 8004ab0:	6821      	ldr	r1, [r4, #0]
 8004ab2:	3503      	adds	r5, #3
 8004ab4:	1a6d      	subs	r5, r5, r1
 8004ab6:	f025 0503 	bic.w	r5, r5, #3
 8004aba:	3508      	adds	r5, #8
 8004abc:	2d0c      	cmp	r5, #12
 8004abe:	bf38      	it	cc
 8004ac0:	250c      	movcc	r5, #12
 8004ac2:	4629      	mov	r1, r5
 8004ac4:	4638      	mov	r0, r7
 8004ac6:	f7ff ffa5 	bl	8004a14 <sbrk_aligned>
 8004aca:	3001      	adds	r0, #1
 8004acc:	d02b      	beq.n	8004b26 <_malloc_r+0xd2>
 8004ace:	6823      	ldr	r3, [r4, #0]
 8004ad0:	442b      	add	r3, r5
 8004ad2:	6023      	str	r3, [r4, #0]
 8004ad4:	e00e      	b.n	8004af4 <_malloc_r+0xa0>
 8004ad6:	6822      	ldr	r2, [r4, #0]
 8004ad8:	1b52      	subs	r2, r2, r5
 8004ada:	d41e      	bmi.n	8004b1a <_malloc_r+0xc6>
 8004adc:	2a0b      	cmp	r2, #11
 8004ade:	d916      	bls.n	8004b0e <_malloc_r+0xba>
 8004ae0:	1961      	adds	r1, r4, r5
 8004ae2:	42a3      	cmp	r3, r4
 8004ae4:	6025      	str	r5, [r4, #0]
 8004ae6:	bf18      	it	ne
 8004ae8:	6059      	strne	r1, [r3, #4]
 8004aea:	6863      	ldr	r3, [r4, #4]
 8004aec:	bf08      	it	eq
 8004aee:	6031      	streq	r1, [r6, #0]
 8004af0:	5162      	str	r2, [r4, r5]
 8004af2:	604b      	str	r3, [r1, #4]
 8004af4:	4638      	mov	r0, r7
 8004af6:	f104 060b 	add.w	r6, r4, #11
 8004afa:	f000 f865 	bl	8004bc8 <__malloc_unlock>
 8004afe:	f026 0607 	bic.w	r6, r6, #7
 8004b02:	1d23      	adds	r3, r4, #4
 8004b04:	1af2      	subs	r2, r6, r3
 8004b06:	d0b6      	beq.n	8004a76 <_malloc_r+0x22>
 8004b08:	1b9b      	subs	r3, r3, r6
 8004b0a:	50a3      	str	r3, [r4, r2]
 8004b0c:	e7b3      	b.n	8004a76 <_malloc_r+0x22>
 8004b0e:	6862      	ldr	r2, [r4, #4]
 8004b10:	42a3      	cmp	r3, r4
 8004b12:	bf0c      	ite	eq
 8004b14:	6032      	streq	r2, [r6, #0]
 8004b16:	605a      	strne	r2, [r3, #4]
 8004b18:	e7ec      	b.n	8004af4 <_malloc_r+0xa0>
 8004b1a:	4623      	mov	r3, r4
 8004b1c:	6864      	ldr	r4, [r4, #4]
 8004b1e:	e7b2      	b.n	8004a86 <_malloc_r+0x32>
 8004b20:	4634      	mov	r4, r6
 8004b22:	6876      	ldr	r6, [r6, #4]
 8004b24:	e7b9      	b.n	8004a9a <_malloc_r+0x46>
 8004b26:	230c      	movs	r3, #12
 8004b28:	603b      	str	r3, [r7, #0]
 8004b2a:	4638      	mov	r0, r7
 8004b2c:	f000 f84c 	bl	8004bc8 <__malloc_unlock>
 8004b30:	e7a1      	b.n	8004a76 <_malloc_r+0x22>
 8004b32:	6025      	str	r5, [r4, #0]
 8004b34:	e7de      	b.n	8004af4 <_malloc_r+0xa0>
 8004b36:	bf00      	nop
 8004b38:	200005bc 	.word	0x200005bc

08004b3c <_realloc_r>:
 8004b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b40:	4680      	mov	r8, r0
 8004b42:	4614      	mov	r4, r2
 8004b44:	460e      	mov	r6, r1
 8004b46:	b921      	cbnz	r1, 8004b52 <_realloc_r+0x16>
 8004b48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b4c:	4611      	mov	r1, r2
 8004b4e:	f7ff bf81 	b.w	8004a54 <_malloc_r>
 8004b52:	b92a      	cbnz	r2, 8004b60 <_realloc_r+0x24>
 8004b54:	f7ff ff12 	bl	800497c <_free_r>
 8004b58:	4625      	mov	r5, r4
 8004b5a:	4628      	mov	r0, r5
 8004b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b60:	f000 f838 	bl	8004bd4 <_malloc_usable_size_r>
 8004b64:	4284      	cmp	r4, r0
 8004b66:	4607      	mov	r7, r0
 8004b68:	d802      	bhi.n	8004b70 <_realloc_r+0x34>
 8004b6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004b6e:	d812      	bhi.n	8004b96 <_realloc_r+0x5a>
 8004b70:	4621      	mov	r1, r4
 8004b72:	4640      	mov	r0, r8
 8004b74:	f7ff ff6e 	bl	8004a54 <_malloc_r>
 8004b78:	4605      	mov	r5, r0
 8004b7a:	2800      	cmp	r0, #0
 8004b7c:	d0ed      	beq.n	8004b5a <_realloc_r+0x1e>
 8004b7e:	42bc      	cmp	r4, r7
 8004b80:	4622      	mov	r2, r4
 8004b82:	4631      	mov	r1, r6
 8004b84:	bf28      	it	cs
 8004b86:	463a      	movcs	r2, r7
 8004b88:	f7ff fed0 	bl	800492c <memcpy>
 8004b8c:	4631      	mov	r1, r6
 8004b8e:	4640      	mov	r0, r8
 8004b90:	f7ff fef4 	bl	800497c <_free_r>
 8004b94:	e7e1      	b.n	8004b5a <_realloc_r+0x1e>
 8004b96:	4635      	mov	r5, r6
 8004b98:	e7df      	b.n	8004b5a <_realloc_r+0x1e>
	...

08004b9c <_sbrk_r>:
 8004b9c:	b538      	push	{r3, r4, r5, lr}
 8004b9e:	4d06      	ldr	r5, [pc, #24]	; (8004bb8 <_sbrk_r+0x1c>)
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	4604      	mov	r4, r0
 8004ba4:	4608      	mov	r0, r1
 8004ba6:	602b      	str	r3, [r5, #0]
 8004ba8:	f7fc fd44 	bl	8001634 <_sbrk>
 8004bac:	1c43      	adds	r3, r0, #1
 8004bae:	d102      	bne.n	8004bb6 <_sbrk_r+0x1a>
 8004bb0:	682b      	ldr	r3, [r5, #0]
 8004bb2:	b103      	cbz	r3, 8004bb6 <_sbrk_r+0x1a>
 8004bb4:	6023      	str	r3, [r4, #0]
 8004bb6:	bd38      	pop	{r3, r4, r5, pc}
 8004bb8:	200005b4 	.word	0x200005b4

08004bbc <__malloc_lock>:
 8004bbc:	4801      	ldr	r0, [pc, #4]	; (8004bc4 <__malloc_lock+0x8>)
 8004bbe:	f7ff beb3 	b.w	8004928 <__retarget_lock_acquire_recursive>
 8004bc2:	bf00      	nop
 8004bc4:	200005b8 	.word	0x200005b8

08004bc8 <__malloc_unlock>:
 8004bc8:	4801      	ldr	r0, [pc, #4]	; (8004bd0 <__malloc_unlock+0x8>)
 8004bca:	f7ff beae 	b.w	800492a <__retarget_lock_release_recursive>
 8004bce:	bf00      	nop
 8004bd0:	200005b8 	.word	0x200005b8

08004bd4 <_malloc_usable_size_r>:
 8004bd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bd8:	1f18      	subs	r0, r3, #4
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	bfbc      	itt	lt
 8004bde:	580b      	ldrlt	r3, [r1, r0]
 8004be0:	18c0      	addlt	r0, r0, r3
 8004be2:	4770      	bx	lr

08004be4 <_init>:
 8004be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004be6:	bf00      	nop
 8004be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bea:	bc08      	pop	{r3}
 8004bec:	469e      	mov	lr, r3
 8004bee:	4770      	bx	lr

08004bf0 <_fini>:
 8004bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf2:	bf00      	nop
 8004bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bf6:	bc08      	pop	{r3}
 8004bf8:	469e      	mov	lr, r3
 8004bfa:	4770      	bx	lr
