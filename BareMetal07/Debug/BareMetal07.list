
BareMetal07.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004618  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  080047a8  080047a8  000147a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c30  08004c30  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004c30  08004c30  00014c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c38  08004c38  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c38  08004c38  00014c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c3c  08004c3c  00014c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004c40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000001c0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000230  20000230  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000af26  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c1e  00000000  00000000  0002afc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008b8  00000000  00000000  0002cbe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007f0  00000000  00000000  0002d4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020fd7  00000000  00000000  0002dc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b678  00000000  00000000  0004ec67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c469f  00000000  00000000  0005a2df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011e97e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002aa4  00000000  00000000  0011e9d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004790 	.word	0x08004790

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004790 	.word	0x08004790

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	; 0x28
 80005a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005aa:	f107 0314 	add.w	r3, r7, #20
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	613b      	str	r3, [r7, #16]
 80005be:	4b26      	ldr	r3, [pc, #152]	; (8000658 <MX_GPIO_Init+0xb4>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a25      	ldr	r2, [pc, #148]	; (8000658 <MX_GPIO_Init+0xb4>)
 80005c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b23      	ldr	r3, [pc, #140]	; (8000658 <MX_GPIO_Init+0xb4>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d2:	613b      	str	r3, [r7, #16]
 80005d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <MX_GPIO_Init+0xb4>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a1e      	ldr	r2, [pc, #120]	; (8000658 <MX_GPIO_Init+0xb4>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <MX_GPIO_Init+0xb4>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	4b18      	ldr	r3, [pc, #96]	; (8000658 <MX_GPIO_Init+0xb4>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a17      	ldr	r2, [pc, #92]	; (8000658 <MX_GPIO_Init+0xb4>)
 80005fc:	f043 0308 	orr.w	r3, r3, #8
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b15      	ldr	r3, [pc, #84]	; (8000658 <MX_GPIO_Init+0xb4>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0308 	and.w	r3, r3, #8
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	4b11      	ldr	r3, [pc, #68]	; (8000658 <MX_GPIO_Init+0xb4>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a10      	ldr	r2, [pc, #64]	; (8000658 <MX_GPIO_Init+0xb4>)
 8000618:	f043 0302 	orr.w	r3, r3, #2
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <MX_GPIO_Init+0xb4>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0302 	and.w	r3, r3, #2
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	2180      	movs	r1, #128	; 0x80
 800062e:	480b      	ldr	r0, [pc, #44]	; (800065c <MX_GPIO_Init+0xb8>)
 8000630:	f001 f880 	bl	8001734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000634:	2380      	movs	r3, #128	; 0x80
 8000636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000638:	2301      	movs	r3, #1
 800063a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	2300      	movs	r3, #0
 800063e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000640:	2303      	movs	r3, #3
 8000642:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	4619      	mov	r1, r3
 800064a:	4804      	ldr	r0, [pc, #16]	; (800065c <MX_GPIO_Init+0xb8>)
 800064c:	f000 fed6 	bl	80013fc <HAL_GPIO_Init>

}
 8000650:	bf00      	nop
 8000652:	3728      	adds	r7, #40	; 0x28
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40023800 	.word	0x40023800
 800065c:	40020c00 	.word	0x40020c00

08000660 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000664:	f000 fd4e 	bl	8001104 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000668:	f000 f868 	bl	800073c <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800066c:	f7ff ff9a 	bl	80005a4 <MX_GPIO_Init>
    MX_SPI1_Init();
 8000670:	f000 f9d0 	bl	8000a14 <MX_SPI1_Init>
    MX_USART3_UART_Init();
 8000674:	f000 fcaa 	bl	8000fcc <MX_USART3_UART_Init>
    /* USER CODE BEGIN 2 */
    if (flash_init(&hspi1) != 1)
 8000678:	4828      	ldr	r0, [pc, #160]	; (800071c <main+0xbc>)
 800067a:	f000 fa69 	bl	8000b50 <flash_init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b01      	cmp	r3, #1
 8000682:	d010      	beq.n	80006a6 <main+0x46>
    {
    	snprintf((char *)tx_buf, BUF_SIZE, "init spi flash ERROR:\r\n");
 8000684:	4a26      	ldr	r2, [pc, #152]	; (8000720 <main+0xc0>)
 8000686:	2140      	movs	r1, #64	; 0x40
 8000688:	4826      	ldr	r0, [pc, #152]	; (8000724 <main+0xc4>)
 800068a:	f002 ff43 	bl	8003514 <sniprintf>
    	    HAL_UART_Transmit(&huart3, tx_buf, strlen((char *)tx_buf), 100);
 800068e:	4825      	ldr	r0, [pc, #148]	; (8000724 <main+0xc4>)
 8000690:	f7ff fda8 	bl	80001e4 <strlen>
 8000694:	4603      	mov	r3, r0
 8000696:	b29a      	uxth	r2, r3
 8000698:	2364      	movs	r3, #100	; 0x64
 800069a:	4922      	ldr	r1, [pc, #136]	; (8000724 <main+0xc4>)
 800069c:	4822      	ldr	r0, [pc, #136]	; (8000728 <main+0xc8>)
 800069e:	f002 faf0 	bl	8002c82 <HAL_UART_Transmit>
        Error_Handler();
 80006a2:	f000 f9b1 	bl	8000a08 <Error_Handler>
    }

    block_register(none);
 80006a6:	2000      	movs	r0, #0
 80006a8:	f000 fab6 	bl	8000c18 <block_register>


    snprintf((char *)tx_buf, BUF_SIZE, "init spi flash OK:\r\n"
 80006ac:	4a1f      	ldr	r2, [pc, #124]	; (800072c <main+0xcc>)
 80006ae:	2140      	movs	r1, #64	; 0x40
 80006b0:	481c      	ldr	r0, [pc, #112]	; (8000724 <main+0xc4>)
 80006b2:	f002 ff2f 	bl	8003514 <sniprintf>
                                       "comand:\r\n"
                                       "read, erase, write");
    HAL_UART_Transmit(&huart3, tx_buf, strlen((char *)tx_buf), 100);
 80006b6:	481b      	ldr	r0, [pc, #108]	; (8000724 <main+0xc4>)
 80006b8:	f7ff fd94 	bl	80001e4 <strlen>
 80006bc:	4603      	mov	r3, r0
 80006be:	b29a      	uxth	r2, r3
 80006c0:	2364      	movs	r3, #100	; 0x64
 80006c2:	4918      	ldr	r1, [pc, #96]	; (8000724 <main+0xc4>)
 80006c4:	4818      	ldr	r0, [pc, #96]	; (8000728 <main+0xc8>)
 80006c6:	f002 fadc 	bl	8002c82 <HAL_UART_Transmit>
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {

        if (HAL_UART_Receive(&huart3, &rx, 1, 10) == HAL_OK)
 80006ca:	230a      	movs	r3, #10
 80006cc:	2201      	movs	r2, #1
 80006ce:	4918      	ldr	r1, [pc, #96]	; (8000730 <main+0xd0>)
 80006d0:	4815      	ldr	r0, [pc, #84]	; (8000728 <main+0xc8>)
 80006d2:	f002 fb68 	bl	8002da6 <HAL_UART_Receive>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d1f6      	bne.n	80006ca <main+0x6a>
        {

            do
            {
                cmd[icmd++] = rx;
 80006dc:	4b15      	ldr	r3, [pc, #84]	; (8000734 <main+0xd4>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	1c5a      	adds	r2, r3, #1
 80006e2:	b2d1      	uxtb	r1, r2
 80006e4:	4a13      	ldr	r2, [pc, #76]	; (8000734 <main+0xd4>)
 80006e6:	7011      	strb	r1, [r2, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <main+0xd0>)
 80006ec:	7819      	ldrb	r1, [r3, #0]
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <main+0xd8>)
 80006f0:	5499      	strb	r1, [r3, r2]
            } while (HAL_UART_Receive(&huart3, &rx, 1, 10) == HAL_OK && rx != '\n');
 80006f2:	230a      	movs	r3, #10
 80006f4:	2201      	movs	r2, #1
 80006f6:	490e      	ldr	r1, [pc, #56]	; (8000730 <main+0xd0>)
 80006f8:	480b      	ldr	r0, [pc, #44]	; (8000728 <main+0xc8>)
 80006fa:	f002 fb54 	bl	8002da6 <HAL_UART_Receive>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d103      	bne.n	800070c <main+0xac>
 8000704:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <main+0xd0>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b0a      	cmp	r3, #10
 800070a:	d1e7      	bne.n	80006dc <main+0x7c>
            icmd = 0;
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <main+0xd4>)
 800070e:	2200      	movs	r2, #0
 8000710:	701a      	strb	r2, [r3, #0]
            Process_Command(cmd);
 8000712:	4809      	ldr	r0, [pc, #36]	; (8000738 <main+0xd8>)
 8000714:	f000 f87a 	bl	800080c <Process_Command>
        if (HAL_UART_Receive(&huart3, &rx, 1, 10) == HAL_OK)
 8000718:	e7d7      	b.n	80006ca <main+0x6a>
 800071a:	bf00      	nop
 800071c:	20000150 	.word	0x20000150
 8000720:	080047a8 	.word	0x080047a8
 8000724:	2000010c 	.word	0x2000010c
 8000728:	200001d8 	.word	0x200001d8
 800072c:	080047c0 	.word	0x080047c0
 8000730:	2000014d 	.word	0x2000014d
 8000734:	2000014c 	.word	0x2000014c
 8000738:	2000008c 	.word	0x2000008c

0800073c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b094      	sub	sp, #80	; 0x50
 8000740:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 0320 	add.w	r3, r7, #32
 8000746:	2230      	movs	r2, #48	; 0x30
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f002 feda 	bl	8003504 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000760:	2300      	movs	r3, #0
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	4b27      	ldr	r3, [pc, #156]	; (8000804 <SystemClock_Config+0xc8>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000768:	4a26      	ldr	r2, [pc, #152]	; (8000804 <SystemClock_Config+0xc8>)
 800076a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076e:	6413      	str	r3, [r2, #64]	; 0x40
 8000770:	4b24      	ldr	r3, [pc, #144]	; (8000804 <SystemClock_Config+0xc8>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800077c:	2300      	movs	r3, #0
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	4b21      	ldr	r3, [pc, #132]	; (8000808 <SystemClock_Config+0xcc>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a20      	ldr	r2, [pc, #128]	; (8000808 <SystemClock_Config+0xcc>)
 8000786:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	4b1e      	ldr	r3, [pc, #120]	; (8000808 <SystemClock_Config+0xcc>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000798:	2301      	movs	r3, #1
 800079a:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800079c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a2:	2302      	movs	r3, #2
 80007a4:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 4;
 80007ac:	2304      	movs	r3, #4
 80007ae:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 64;
 80007b0:	2340      	movs	r3, #64	; 0x40
 80007b2:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 80007b8:	2304      	movs	r3, #4
 80007ba:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007bc:	f107 0320 	add.w	r3, r7, #32
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 ffd1 	bl	8001768 <HAL_RCC_OscConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0x94>
    {
        Error_Handler();
 80007cc:	f000 f91c 	bl	8000a08 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80007d0:	230f      	movs	r3, #15
 80007d2:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d4:	2302      	movs	r3, #2
 80007d6:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80007d8:	2390      	movs	r3, #144	; 0x90
 80007da:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e0:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	2100      	movs	r1, #0
 80007ec:	4618      	mov	r0, r3
 80007ee:	f001 fa33 	bl	8001c58 <HAL_RCC_ClockConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0xc0>
    {
        Error_Handler();
 80007f8:	f000 f906 	bl	8000a08 <Error_Handler>
    }
}
 80007fc:	bf00      	nop
 80007fe:	3750      	adds	r7, #80	; 0x50
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40023800 	.word	0x40023800
 8000808:	40007000 	.word	0x40007000

0800080c <Process_Command>:

/* USER CODE BEGIN 4 */


void Process_Command(char *command)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	f5ad 6d03 	sub.w	sp, sp, #2096	; 0x830
 8000812:	af00      	add	r7, sp, #0
 8000814:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8000818:	f6a3 032c 	subw	r3, r3, #2092	; 0x82c
 800081c:	6018      	str	r0, [r3, #0]

	char cmd[64];

	uint8_t parsed = sscanf(command, "%63s", cmd);
 800081e:	f207 72dc 	addw	r2, r7, #2012	; 0x7dc
 8000822:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8000826:	f6a3 032c 	subw	r3, r3, #2092	; 0x82c
 800082a:	496a      	ldr	r1, [pc, #424]	; (80009d4 <Process_Command+0x1c8>)
 800082c:	6818      	ldr	r0, [r3, #0]
 800082e:	f002 fea5 	bl	800357c <siscanf>
 8000832:	4603      	mov	r3, r0
 8000834:	f887 381f 	strb.w	r3, [r7, #2079]	; 0x81f

    if (parsed == 2 || parsed == 1)
 8000838:	f897 381f 	ldrb.w	r3, [r7, #2079]	; 0x81f
 800083c:	2b02      	cmp	r3, #2
 800083e:	d004      	beq.n	800084a <Process_Command+0x3e>
 8000840:	f897 381f 	ldrb.w	r3, [r7, #2079]	; 0x81f
 8000844:	2b01      	cmp	r3, #1
 8000846:	f040 80b5 	bne.w	80009b4 <Process_Command+0x1a8>
    {
        if (strcmp(cmd, "read") == 0)
 800084a:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 800084e:	4962      	ldr	r1, [pc, #392]	; (80009d8 <Process_Command+0x1cc>)
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fcbd 	bl	80001d0 <strcmp>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d11e      	bne.n	800089a <Process_Command+0x8e>
        {
            for (uint32_t ptr = 0; ptr <= 0x1FFFF;)
 800085c:	2300      	movs	r3, #0
 800085e:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
 8000862:	e00f      	b.n	8000884 <Process_Command+0x78>
            {
                flash_read(ptr, tx_buf);
 8000864:	495d      	ldr	r1, [pc, #372]	; (80009dc <Process_Command+0x1d0>)
 8000866:	f8d7 082c 	ldr.w	r0, [r7, #2092]	; 0x82c
 800086a:	f000 faab 	bl	8000dc4 <flash_read>
                HAL_UART_Transmit(&huart3, tx_buf, 5, 100);
 800086e:	2364      	movs	r3, #100	; 0x64
 8000870:	2205      	movs	r2, #5
 8000872:	495a      	ldr	r1, [pc, #360]	; (80009dc <Process_Command+0x1d0>)
 8000874:	485a      	ldr	r0, [pc, #360]	; (80009e0 <Process_Command+0x1d4>)
 8000876:	f002 fa04 	bl	8002c82 <HAL_UART_Transmit>

/*                if ((ptr & 0x1F) == 0x1F)			//manualy print \r\n
                {
                    HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n", 2, 100);
                }*/
                ptr = ptr + 5;
 800087a:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 800087e:	3305      	adds	r3, #5
 8000880:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
            for (uint32_t ptr = 0; ptr <= 0x1FFFF;)
 8000884:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8000888:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800088c:	d3ea      	bcc.n	8000864 <Process_Command+0x58>
            }
            snprintf((char *)tx_buf, BUF_SIZE, "read finish\r\n");
 800088e:	4a55      	ldr	r2, [pc, #340]	; (80009e4 <Process_Command+0x1d8>)
 8000890:	2140      	movs	r1, #64	; 0x40
 8000892:	4852      	ldr	r0, [pc, #328]	; (80009dc <Process_Command+0x1d0>)
 8000894:	f002 fe3e 	bl	8003514 <sniprintf>
 8000898:	e08c      	b.n	80009b4 <Process_Command+0x1a8>
        }

        else if (strcmp(cmd, "erase") == 0)
 800089a:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 800089e:	4952      	ldr	r1, [pc, #328]	; (80009e8 <Process_Command+0x1dc>)
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff fc95 	bl	80001d0 <strcmp>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d107      	bne.n	80008bc <Process_Command+0xb0>
        {
            flash_erase();
 80008ac:	f000 fad0 	bl	8000e50 <flash_erase>
            snprintf((char *)tx_buf, BUF_SIZE, "erase OK\r\n");
 80008b0:	4a4e      	ldr	r2, [pc, #312]	; (80009ec <Process_Command+0x1e0>)
 80008b2:	2140      	movs	r1, #64	; 0x40
 80008b4:	4849      	ldr	r0, [pc, #292]	; (80009dc <Process_Command+0x1d0>)
 80008b6:	f002 fe2d 	bl	8003514 <sniprintf>
 80008ba:	e07b      	b.n	80009b4 <Process_Command+0x1a8>
        }

        else if (strcmp(cmd, "write") == 0)
 80008bc:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 80008c0:	494b      	ldr	r1, [pc, #300]	; (80009f0 <Process_Command+0x1e4>)
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fc84 	bl	80001d0 <strcmp>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d15b      	bne.n	8000986 <Process_Command+0x17a>
        {
		#define BUF_S 2000
            uint8_t Tx_buf[BUF_S] = {0};
 80008ce:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 80008d2:	f6a3 0324 	subw	r3, r3, #2084	; 0x824
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	3304      	adds	r3, #4
 80008dc:	f240 72cc 	movw	r2, #1996	; 0x7cc
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f002 fe0e 	bl	8003504 <memset>
            snprintf((char *)Tx_buf, BUF_S,
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	4a41      	ldr	r2, [pc, #260]	; (80009f4 <Process_Command+0x1e8>)
 80008ee:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f002 fe0e 	bl	8003514 <sniprintf>
                     "getrennt von uns unendlich weit\n"
                     "sie mussen sich an Sterne krallen (ganz fest)\n"
                     "damit sie nicht vom Himmel fallen");
            Tx_buf, strlen((char *)Tx_buf);

            for (uint32_t ptr = 0, ptr1 = 0, flcount = 0; ptr < strlen((char *)Tx_buf); ptr++, ptr1++)
 80008f8:	2300      	movs	r3, #0
 80008fa:	f8c7 3828 	str.w	r3, [r7, #2088]	; 0x828
 80008fe:	2300      	movs	r3, #0
 8000900:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
 8000904:	2300      	movs	r3, #0
 8000906:	f8c7 3820 	str.w	r3, [r7, #2080]	; 0x820
 800090a:	e02c      	b.n	8000966 <Process_Command+0x15a>
            {

                flash_byte_write((uint8_t *)Tx_buf[ptr], ptr1 + flcount);
 800090c:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8000910:	f6a3 0224 	subw	r2, r3, #2084	; 0x824
 8000914:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8000918:	4413      	add	r3, r2
 800091a:	7818      	ldrb	r0, [r3, #0]
 800091c:	f8d7 2824 	ldr.w	r2, [r7, #2084]	; 0x824
 8000920:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8000924:	4413      	add	r3, r2
 8000926:	4619      	mov	r1, r3
 8000928:	f000 fa02 	bl	8000d30 <flash_byte_write>
                // HAL_Delay(1);
                if (Tx_buf[ptr] == '\n')
 800092c:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8000930:	f6a3 0224 	subw	r2, r3, #2084	; 0x824
 8000934:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8000938:	4413      	add	r3, r2
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b0a      	cmp	r3, #10
 800093e:	d108      	bne.n	8000952 <Process_Command+0x146>
                {
                    ptr1 = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
                    flcount = flcount + 4096;
 8000946:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 800094a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800094e:	f8c7 3820 	str.w	r3, [r7, #2080]	; 0x820
            for (uint32_t ptr = 0, ptr1 = 0, flcount = 0; ptr < strlen((char *)Tx_buf); ptr++, ptr1++)
 8000952:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8000956:	3301      	adds	r3, #1
 8000958:	f8c7 3828 	str.w	r3, [r7, #2088]	; 0x828
 800095c:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8000960:	3301      	adds	r3, #1
 8000962:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
 8000966:	f107 030c 	add.w	r3, r7, #12
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff fc3a 	bl	80001e4 <strlen>
 8000970:	4602      	mov	r2, r0
 8000972:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8000976:	4293      	cmp	r3, r2
 8000978:	d3c8      	bcc.n	800090c <Process_Command+0x100>
                }
            }
            snprintf((char *)tx_buf, BUF_SIZE, "write finish\r\n");
 800097a:	4a1f      	ldr	r2, [pc, #124]	; (80009f8 <Process_Command+0x1ec>)
 800097c:	2140      	movs	r1, #64	; 0x40
 800097e:	4817      	ldr	r0, [pc, #92]	; (80009dc <Process_Command+0x1d0>)
 8000980:	f002 fdc8 	bl	8003514 <sniprintf>
 8000984:	e016      	b.n	80009b4 <Process_Command+0x1a8>
        }
        else if (strcmp(cmd, "block") == 0){
 8000986:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 800098a:	491c      	ldr	r1, [pc, #112]	; (80009fc <Process_Command+0x1f0>)
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fc1f 	bl	80001d0 <strcmp>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d108      	bne.n	80009aa <Process_Command+0x19e>
        block_register(all);
 8000998:	2006      	movs	r0, #6
 800099a:	f000 f93d 	bl	8000c18 <block_register>
        snprintf((char *)tx_buf, BUF_SIZE, "memory locked\r\n");
 800099e:	4a18      	ldr	r2, [pc, #96]	; (8000a00 <Process_Command+0x1f4>)
 80009a0:	2140      	movs	r1, #64	; 0x40
 80009a2:	480e      	ldr	r0, [pc, #56]	; (80009dc <Process_Command+0x1d0>)
 80009a4:	f002 fdb6 	bl	8003514 <sniprintf>
 80009a8:	e004      	b.n	80009b4 <Process_Command+0x1a8>
        }
        else
        {
            snprintf((char *)tx_buf, BUF_SIZE, "command unknown\r\n");
 80009aa:	4a16      	ldr	r2, [pc, #88]	; (8000a04 <Process_Command+0x1f8>)
 80009ac:	2140      	movs	r1, #64	; 0x40
 80009ae:	480b      	ldr	r0, [pc, #44]	; (80009dc <Process_Command+0x1d0>)
 80009b0:	f002 fdb0 	bl	8003514 <sniprintf>
        }
    }

    HAL_UART_Transmit(&huart3, tx_buf, strlen((char *)tx_buf), 100);
 80009b4:	4809      	ldr	r0, [pc, #36]	; (80009dc <Process_Command+0x1d0>)
 80009b6:	f7ff fc15 	bl	80001e4 <strlen>
 80009ba:	4603      	mov	r3, r0
 80009bc:	b29a      	uxth	r2, r3
 80009be:	2364      	movs	r3, #100	; 0x64
 80009c0:	4906      	ldr	r1, [pc, #24]	; (80009dc <Process_Command+0x1d0>)
 80009c2:	4807      	ldr	r0, [pc, #28]	; (80009e0 <Process_Command+0x1d4>)
 80009c4:	f002 f95d 	bl	8002c82 <HAL_UART_Transmit>

}
 80009c8:	bf00      	nop
 80009ca:	f507 6703 	add.w	r7, r7, #2096	; 0x830
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	080047f0 	.word	0x080047f0
 80009d8:	080047f8 	.word	0x080047f8
 80009dc:	2000010c 	.word	0x2000010c
 80009e0:	200001d8 	.word	0x200001d8
 80009e4:	08004800 	.word	0x08004800
 80009e8:	08004810 	.word	0x08004810
 80009ec:	08004818 	.word	0x08004818
 80009f0:	08004824 	.word	0x08004824
 80009f4:	0800482c 	.word	0x0800482c
 80009f8:	08004a20 	.word	0x08004a20
 80009fc:	08004a30 	.word	0x08004a30
 8000a00:	08004a38 	.word	0x08004a38
 8000a04:	08004a48 	.word	0x08004a48

08000a08 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a0c:	b672      	cpsid	i
}
 8000a0e:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000a10:	e7fe      	b.n	8000a10 <Error_Handler+0x8>
	...

08000a14 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000a18:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a1a:	4a18      	ldr	r2, [pc, #96]	; (8000a7c <MX_SPI1_Init+0x68>)
 8000a1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a1e:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a26:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000a46:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a48:	2220      	movs	r2, #32
 8000a4a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a58:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a60:	220a      	movs	r2, #10
 8000a62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a66:	f001 fb17 	bl	8002098 <HAL_SPI_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a70:	f7ff ffca 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000150 	.word	0x20000150
 8000a7c:	40013000 	.word	0x40013000

08000a80 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	; 0x28
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a28      	ldr	r2, [pc, #160]	; (8000b40 <HAL_SPI_MspInit+0xc0>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d149      	bne.n	8000b36 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]
 8000aa6:	4b27      	ldr	r3, [pc, #156]	; (8000b44 <HAL_SPI_MspInit+0xc4>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	4a26      	ldr	r2, [pc, #152]	; (8000b44 <HAL_SPI_MspInit+0xc4>)
 8000aac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ab2:	4b24      	ldr	r3, [pc, #144]	; (8000b44 <HAL_SPI_MspInit+0xc4>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000aba:	613b      	str	r3, [r7, #16]
 8000abc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	4b20      	ldr	r3, [pc, #128]	; (8000b44 <HAL_SPI_MspInit+0xc4>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a1f      	ldr	r2, [pc, #124]	; (8000b44 <HAL_SPI_MspInit+0xc4>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b1d      	ldr	r3, [pc, #116]	; (8000b44 <HAL_SPI_MspInit+0xc4>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	60bb      	str	r3, [r7, #8]
 8000ade:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <HAL_SPI_MspInit+0xc4>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a18      	ldr	r2, [pc, #96]	; (8000b44 <HAL_SPI_MspInit+0xc4>)
 8000ae4:	f043 0302 	orr.w	r3, r3, #2
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <HAL_SPI_MspInit+0xc4>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000af6:	2320      	movs	r3, #32
 8000af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	2302      	movs	r3, #2
 8000afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b02:	2303      	movs	r3, #3
 8000b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b06:	2305      	movs	r3, #5
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	4619      	mov	r1, r3
 8000b10:	480d      	ldr	r0, [pc, #52]	; (8000b48 <HAL_SPI_MspInit+0xc8>)
 8000b12:	f000 fc73 	bl	80013fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b16:	2330      	movs	r3, #48	; 0x30
 8000b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b22:	2303      	movs	r3, #3
 8000b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b26:	2305      	movs	r3, #5
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4806      	ldr	r0, [pc, #24]	; (8000b4c <HAL_SPI_MspInit+0xcc>)
 8000b32:	f000 fc63 	bl	80013fc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b36:	bf00      	nop
 8000b38:	3728      	adds	r7, #40	; 0x28
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40013000 	.word	0x40013000
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020000 	.word	0x40020000
 8000b4c:	40020400 	.word	0x40020400

08000b50 <flash_init>:
    FLASH_READY = 0,
    FLASH_BUSY
};

uint8_t flash_init(SPI_HandleTypeDef *hspi)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af02      	add	r7, sp, #8
 8000b56:	6078      	str	r0, [r7, #4]
    HSPI = hspi;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a1b      	ldr	r2, [pc, #108]	; (8000bc8 <flash_init+0x78>)
 8000b5c:	6013      	str	r3, [r2, #0]
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	2180      	movs	r1, #128	; 0x80
 8000b62:	481a      	ldr	r0, [pc, #104]	; (8000bcc <flash_init+0x7c>)
 8000b64:	f000 fde6 	bl	8001734 <HAL_GPIO_WritePin>
    TransmitArray[0] = 0x90;
 8000b68:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <flash_init+0x80>)
 8000b6a:	2290      	movs	r2, #144	; 0x90
 8000b6c:	701a      	strb	r2, [r3, #0]
    TransmitArray[1] = 0x00;
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <flash_init+0x80>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	705a      	strb	r2, [r3, #1]
    TransmitArray[2] = 0x00;
 8000b74:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <flash_init+0x80>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	709a      	strb	r2, [r3, #2]
    TransmitArray[3] = 0x01;
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <flash_init+0x80>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	70da      	strb	r2, [r3, #3]
    HAL_GPIO_WritePin(CS_port, CS_pin, GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2180      	movs	r1, #128	; 0x80
 8000b84:	4811      	ldr	r0, [pc, #68]	; (8000bcc <flash_init+0x7c>)
 8000b86:	f000 fdd5 	bl	8001734 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(HSPI, TransmitArray, ReceiveArray, 8, 100);
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <flash_init+0x78>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	2364      	movs	r3, #100	; 0x64
 8000b92:	9300      	str	r3, [sp, #0]
 8000b94:	2308      	movs	r3, #8
 8000b96:	4a0f      	ldr	r2, [pc, #60]	; (8000bd4 <flash_init+0x84>)
 8000b98:	490d      	ldr	r1, [pc, #52]	; (8000bd0 <flash_init+0x80>)
 8000b9a:	f001 fd53 	bl	8002644 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(CS_port, CS_pin, GPIO_PIN_SET);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	2180      	movs	r1, #128	; 0x80
 8000ba2:	480a      	ldr	r0, [pc, #40]	; (8000bcc <flash_init+0x7c>)
 8000ba4:	f000 fdc6 	bl	8001734 <HAL_GPIO_WritePin>
    if (ReceiveArray[4] == dev_id || ReceiveArray[5] == dev_id)
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <flash_init+0x84>)
 8000baa:	791b      	ldrb	r3, [r3, #4]
 8000bac:	2b41      	cmp	r3, #65	; 0x41
 8000bae:	d003      	beq.n	8000bb8 <flash_init+0x68>
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <flash_init+0x84>)
 8000bb2:	795b      	ldrb	r3, [r3, #5]
 8000bb4:	2b41      	cmp	r3, #65	; 0x41
 8000bb6:	d101      	bne.n	8000bbc <flash_init+0x6c>
    {
        return FLASH_OK;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	e000      	b.n	8000bbe <flash_init+0x6e>
    }
    else
    {
        return FLASH_ERROR;
 8000bbc:	2300      	movs	r3, #0
    }
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200001a8 	.word	0x200001a8
 8000bcc:	40020c00 	.word	0x40020c00
 8000bd0:	200001ac 	.word	0x200001ac
 8000bd4:	200001c0 	.word	0x200001c0

08000bd8 <flash_write_enable>:
    HAL_SPI_Transmit(HSPI, &WRDI, 1, 100); //
    HAL_GPIO_WritePin(CS_port, CS_pin, GPIO_PIN_SET);
}

void flash_write_enable(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
    uint8_t WREN = 0x06; // WRITE ENABLE
 8000bde:	2306      	movs	r3, #6
 8000be0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(CS_port, CS_pin, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2180      	movs	r1, #128	; 0x80
 8000be6:	480a      	ldr	r0, [pc, #40]	; (8000c10 <flash_write_enable+0x38>)
 8000be8:	f000 fda4 	bl	8001734 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(HSPI, &WREN, 1, 100); //
 8000bec:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <flash_write_enable+0x3c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	1df9      	adds	r1, r7, #7
 8000bf4:	2364      	movs	r3, #100	; 0x64
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	f001 fad7 	bl	80021aa <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_port, CS_pin, GPIO_PIN_SET);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	2180      	movs	r1, #128	; 0x80
 8000c00:	4803      	ldr	r0, [pc, #12]	; (8000c10 <flash_write_enable+0x38>)
 8000c02:	f000 fd97 	bl	8001734 <HAL_GPIO_WritePin>
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40020c00 	.word	0x40020c00
 8000c14:	200001a8 	.word	0x200001a8

08000c18 <block_register>:

void block_register(block_protection qq) // if WR# pin not pull up need to call the program 2 times to set 7 bit BPL to 0
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
    flash_write_enable();
 8000c22:	f7ff ffd9 	bl	8000bd8 <flash_write_enable>
    uint8_t block_prot_byte[2] = {0}; // SOFTWARE STATUS REGISTER first byte adress
 8000c26:	2300      	movs	r3, #0
 8000c28:	81bb      	strh	r3, [r7, #12]
    block_prot_byte[0] = 0x01;        // first 8 bit its addres 01
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	733b      	strb	r3, [r7, #12]

    switch (qq)
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	2b06      	cmp	r3, #6
 8000c32:	d823      	bhi.n	8000c7c <block_register+0x64>
 8000c34:	a201      	add	r2, pc, #4	; (adr r2, 8000c3c <block_register+0x24>)
 8000c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c3a:	bf00      	nop
 8000c3c:	08000c83 	.word	0x08000c83
 8000c40:	08000c59 	.word	0x08000c59
 8000c44:	08000c5f 	.word	0x08000c5f
 8000c48:	08000c65 	.word	0x08000c65
 8000c4c:	08000c6b 	.word	0x08000c6b
 8000c50:	08000c71 	.word	0x08000c71
 8000c54:	08000c77 	.word	0x08000c77
    {
    case 0: // no block
        break;
    case 1:                        // 1/32
        block_prot_byte[1] = 0x04; // byte bp0
 8000c58:	2304      	movs	r3, #4
 8000c5a:	737b      	strb	r3, [r7, #13]
        break;
 8000c5c:	e012      	b.n	8000c84 <block_register+0x6c>
    case 2:                        // 1/16
        block_prot_byte[1] = 0x08; // byte bp1
 8000c5e:	2308      	movs	r3, #8
 8000c60:	737b      	strb	r3, [r7, #13]
        break;
 8000c62:	e00f      	b.n	8000c84 <block_register+0x6c>
    case 3:                        // 1/8
        block_prot_byte[1] = 0x0C; // byte bp1,byte bp0
 8000c64:	230c      	movs	r3, #12
 8000c66:	737b      	strb	r3, [r7, #13]
        break;
 8000c68:	e00c      	b.n	8000c84 <block_register+0x6c>

    case 4:                        // 1/4
        block_prot_byte[1] = 0x10; // byte bp2
 8000c6a:	2310      	movs	r3, #16
 8000c6c:	737b      	strb	r3, [r7, #13]
        break;
 8000c6e:	e009      	b.n	8000c84 <block_register+0x6c>

    case 5:                        // 1/2
        block_prot_byte[1] = 0x14; // byte bp2,	byte bp0
 8000c70:	2314      	movs	r3, #20
 8000c72:	737b      	strb	r3, [r7, #13]
        break;
 8000c74:	e006      	b.n	8000c84 <block_register+0x6c>

    case 6:                        // all
        block_prot_byte[1] = 0x1C; // byte bp2,	byte bp1,	byte bp0
 8000c76:	231c      	movs	r3, #28
 8000c78:	737b      	strb	r3, [r7, #13]
        break;
 8000c7a:	e003      	b.n	8000c84 <block_register+0x6c>

    default:
        Error_Handler();
 8000c7c:	f7ff fec4 	bl	8000a08 <Error_Handler>
        break;
 8000c80:	e000      	b.n	8000c84 <block_register+0x6c>
        break;
 8000c82:	bf00      	nop
    }
    HAL_GPIO_WritePin(CS_port, CS_pin, GPIO_PIN_RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2180      	movs	r1, #128	; 0x80
 8000c88:	480a      	ldr	r0, [pc, #40]	; (8000cb4 <block_register+0x9c>)
 8000c8a:	f000 fd53 	bl	8001734 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(HSPI, block_prot_byte, 2, 100);
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <block_register+0xa0>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f107 010c 	add.w	r1, r7, #12
 8000c98:	2364      	movs	r3, #100	; 0x64
 8000c9a:	2202      	movs	r2, #2
 8000c9c:	f001 fa85 	bl	80021aa <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_port, CS_pin, GPIO_PIN_SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2180      	movs	r1, #128	; 0x80
 8000ca4:	4803      	ldr	r0, [pc, #12]	; (8000cb4 <block_register+0x9c>)
 8000ca6:	f000 fd45 	bl	8001734 <HAL_GPIO_WritePin>
}
 8000caa:	bf00      	nop
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40020c00 	.word	0x40020c00
 8000cb8:	200001a8 	.word	0x200001a8

08000cbc <flash_read_status>:
uint8_t flash_read_status(flash_status ww)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af02      	add	r7, sp, #8
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
    uint8_t receiveArray[2] = {0};
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	81bb      	strh	r3, [r7, #12]
    uint8_t transmitArray[2] = {0};
 8000cca:	2300      	movs	r3, #0
 8000ccc:	813b      	strh	r3, [r7, #8]
    transmitArray[0] = 0x05;
 8000cce:	2305      	movs	r3, #5
 8000cd0:	723b      	strb	r3, [r7, #8]
    HAL_GPIO_WritePin(CS_port, CS_pin, GPIO_PIN_RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2180      	movs	r1, #128	; 0x80
 8000cd6:	4814      	ldr	r0, [pc, #80]	; (8000d28 <flash_read_status+0x6c>)
 8000cd8:	f000 fd2c 	bl	8001734 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(HSPI, transmitArray, receiveArray, 2, 100); // READ-STATUS-REGISTER (RDSR) SEQUENCE
 8000cdc:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <flash_read_status+0x70>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f107 020c 	add.w	r2, r7, #12
 8000ce6:	f107 0108 	add.w	r1, r7, #8
 8000cea:	2364      	movs	r3, #100	; 0x64
 8000cec:	9300      	str	r3, [sp, #0]
 8000cee:	2302      	movs	r3, #2
 8000cf0:	f001 fca8 	bl	8002644 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(CS_port, CS_pin, GPIO_PIN_SET);
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	2180      	movs	r1, #128	; 0x80
 8000cf8:	480b      	ldr	r0, [pc, #44]	; (8000d28 <flash_read_status+0x6c>)
 8000cfa:	f000 fd1b 	bl	8001734 <HAL_GPIO_WritePin>
    uint8_t mask = 0x01;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	73fb      	strb	r3, [r7, #15]
    mask = mask << ww;
 8000d02:	7bfa      	ldrb	r2, [r7, #15]
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	73fb      	strb	r3, [r7, #15]
    return ((receiveArray[1] & mask) ? 1 : 0);
 8000d0c:	7b7a      	ldrb	r2, [r7, #13]
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
 8000d10:	4013      	ands	r3, r2
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	bf14      	ite	ne
 8000d18:	2301      	movne	r3, #1
 8000d1a:	2300      	moveq	r3, #0
 8000d1c:	b2db      	uxtb	r3, r3
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40020c00 	.word	0x40020c00
 8000d2c:	200001a8 	.word	0x200001a8

08000d30 <flash_byte_write>:

void flash_byte_write(uint8_t byte, uint32_t address)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	6039      	str	r1, [r7, #0]
 8000d3a:	71fb      	strb	r3, [r7, #7]
try_again:
    if (flash_read_status(BUSY) == FLASH_READY && (address >> 21) == 0) // check if address not over 0x1fffff
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f7ff ffbd 	bl	8000cbc <flash_read_status>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d12d      	bne.n	8000da4 <flash_byte_write+0x74>
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	0d5b      	lsrs	r3, r3, #21
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d129      	bne.n	8000da4 <flash_byte_write+0x74>
    {
        // block_register(none);
        flash_write_enable();
 8000d50:	f7ff ff42 	bl	8000bd8 <flash_write_enable>

        uint8_t transm[5] = {0};
 8000d54:	2300      	movs	r3, #0
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	2300      	movs	r3, #0
 8000d5a:	733b      	strb	r3, [r7, #12]
        transm[0] = 0x02;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	723b      	strb	r3, [r7, #8]
        transm[1] = (address & 0xff0000) >> 16;
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	0c1b      	lsrs	r3, r3, #16
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	727b      	strb	r3, [r7, #9]
        transm[2] = (address & 0xff00) >> 8;
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	0a1b      	lsrs	r3, r3, #8
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	72bb      	strb	r3, [r7, #10]
        transm[3] = address & 0xff;
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	72fb      	strb	r3, [r7, #11]
        transm[4] = byte;
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	733b      	strb	r3, [r7, #12]
        HAL_GPIO_WritePin(CS_port, CS_pin, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2180      	movs	r1, #128	; 0x80
 8000d7e:	480f      	ldr	r0, [pc, #60]	; (8000dbc <flash_byte_write+0x8c>)
 8000d80:	f000 fcd8 	bl	8001734 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(HSPI, transm, 5, 100); //
 8000d84:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <flash_byte_write+0x90>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f107 0108 	add.w	r1, r7, #8
 8000d8e:	2364      	movs	r3, #100	; 0x64
 8000d90:	2205      	movs	r2, #5
 8000d92:	f001 fa0a 	bl	80021aa <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(CS_port, CS_pin, GPIO_PIN_SET);
 8000d96:	2201      	movs	r2, #1
 8000d98:	2180      	movs	r1, #128	; 0x80
 8000d9a:	4808      	ldr	r0, [pc, #32]	; (8000dbc <flash_byte_write+0x8c>)
 8000d9c:	f000 fcca 	bl	8001734 <HAL_GPIO_WritePin>
    {
 8000da0:	bf00      	nop
    else if ((address >> 21) == 0)
    {
        HAL_Delay(5);
        goto try_again;
    }
}
 8000da2:	e007      	b.n	8000db4 <flash_byte_write+0x84>
    else if ((address >> 21) == 0)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	0d5b      	lsrs	r3, r3, #21
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d103      	bne.n	8000db4 <flash_byte_write+0x84>
        HAL_Delay(5);
 8000dac:	2005      	movs	r0, #5
 8000dae:	f000 fa1b 	bl	80011e8 <HAL_Delay>
        goto try_again;
 8000db2:	e7c3      	b.n	8000d3c <flash_byte_write+0xc>
}
 8000db4:	bf00      	nop
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40020c00 	.word	0x40020c00
 8000dc0:	200001a8 	.word	0x200001a8

08000dc4 <flash_read>:

void flash_read(uint32_t address, uint8_t *receive)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
    if (flash_read_status(BUSY) == 0 && (address >> 21) == 0) // check if address not over 0x1fffff
 8000dce:	2000      	movs	r0, #0
 8000dd0:	f7ff ff74 	bl	8000cbc <flash_read_status>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d131      	bne.n	8000e3e <flash_read+0x7a>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	0d5b      	lsrs	r3, r3, #21
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d12d      	bne.n	8000e3e <flash_read+0x7a>
    {

        uint8_t transm[5] = {0};
 8000de2:	2300      	movs	r3, #0
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	2300      	movs	r3, #0
 8000de8:	733b      	strb	r3, [r7, #12]
        transm[0] = 0x0B;
 8000dea:	230b      	movs	r3, #11
 8000dec:	723b      	strb	r3, [r7, #8]
        transm[1] = (address & 0xff0000) >> 16;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	0c1b      	lsrs	r3, r3, #16
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	727b      	strb	r3, [r7, #9]
        transm[2] = (address & 0xff00) >> 8;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	0a1b      	lsrs	r3, r3, #8
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	72bb      	strb	r3, [r7, #10]
        transm[3] = address & 0xff;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	72fb      	strb	r3, [r7, #11]
        transm[4] = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	733b      	strb	r3, [r7, #12]

        HAL_GPIO_WritePin(CS_port, CS_pin, GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2180      	movs	r1, #128	; 0x80
 8000e0c:	480e      	ldr	r0, [pc, #56]	; (8000e48 <flash_read+0x84>)
 8000e0e:	f000 fc91 	bl	8001734 <HAL_GPIO_WritePin>

        HAL_SPI_Transmit(HSPI, transm, 5, 100);
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <flash_read+0x88>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f107 0108 	add.w	r1, r7, #8
 8000e1c:	2364      	movs	r3, #100	; 0x64
 8000e1e:	2205      	movs	r2, #5
 8000e20:	f001 f9c3 	bl	80021aa <HAL_SPI_Transmit>
        HAL_SPI_Receive(HSPI, (uint8_t *)receive, 5, 100);
 8000e24:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <flash_read+0x88>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	2364      	movs	r3, #100	; 0x64
 8000e2c:	2205      	movs	r2, #5
 8000e2e:	6839      	ldr	r1, [r7, #0]
 8000e30:	f001 faf7 	bl	8002422 <HAL_SPI_Receive>

        // HAL_SPI_TransmitReceive(HSPI, &read,(uint8_t *)receive, 10, 100); //

        HAL_GPIO_WritePin(CS_port, CS_pin, GPIO_PIN_SET);
 8000e34:	2201      	movs	r2, #1
 8000e36:	2180      	movs	r1, #128	; 0x80
 8000e38:	4803      	ldr	r0, [pc, #12]	; (8000e48 <flash_read+0x84>)
 8000e3a:	f000 fc7b 	bl	8001734 <HAL_GPIO_WritePin>
    }
}
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40020c00 	.word	0x40020c00
 8000e4c:	200001a8 	.word	0x200001a8

08000e50 <flash_erase>:
void flash_erase(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
    block_register(none);
 8000e56:	2000      	movs	r0, #0
 8000e58:	f7ff fede 	bl	8000c18 <block_register>
    flash_write_enable();
 8000e5c:	f7ff febc 	bl	8000bd8 <flash_write_enable>
    uint8_t erase = 0x60; // Erase Full Memory Array
 8000e60:	2360      	movs	r3, #96	; 0x60
 8000e62:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(CS_port, CS_pin, GPIO_PIN_RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2180      	movs	r1, #128	; 0x80
 8000e68:	4809      	ldr	r0, [pc, #36]	; (8000e90 <flash_erase+0x40>)
 8000e6a:	f000 fc63 	bl	8001734 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(HSPI, &erase, 1, 100); //
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <flash_erase+0x44>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4618      	mov	r0, r3
 8000e74:	1df9      	adds	r1, r7, #7
 8000e76:	2364      	movs	r3, #100	; 0x64
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f001 f996 	bl	80021aa <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_port, CS_pin, GPIO_PIN_SET);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	2180      	movs	r1, #128	; 0x80
 8000e82:	4803      	ldr	r0, [pc, #12]	; (8000e90 <flash_erase+0x40>)
 8000e84:	f000 fc56 	bl	8001734 <HAL_GPIO_WritePin>
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40020c00 	.word	0x40020c00
 8000e94:	200001a8 	.word	0x200001a8

08000e98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <HAL_MspInit+0x4c>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea6:	4a0f      	ldr	r2, [pc, #60]	; (8000ee4 <HAL_MspInit+0x4c>)
 8000ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eac:	6453      	str	r3, [r2, #68]	; 0x44
 8000eae:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <HAL_MspInit+0x4c>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	603b      	str	r3, [r7, #0]
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <HAL_MspInit+0x4c>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	4a08      	ldr	r2, [pc, #32]	; (8000ee4 <HAL_MspInit+0x4c>)
 8000ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_MspInit+0x4c>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	40023800 	.word	0x40023800

08000ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <NMI_Handler+0x4>

08000eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <HardFault_Handler+0x4>

08000ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <MemManage_Handler+0x4>

08000efa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efe:	e7fe      	b.n	8000efe <BusFault_Handler+0x4>

08000f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <UsageFault_Handler+0x4>

08000f06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f34:	f000 f938 	bl	80011a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f44:	4a14      	ldr	r2, [pc, #80]	; (8000f98 <_sbrk+0x5c>)
 8000f46:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <_sbrk+0x60>)
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f50:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <_sbrk+0x64>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d102      	bne.n	8000f5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <_sbrk+0x64>)
 8000f5a:	4a12      	ldr	r2, [pc, #72]	; (8000fa4 <_sbrk+0x68>)
 8000f5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <_sbrk+0x64>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d207      	bcs.n	8000f7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f6c:	f002 faa0 	bl	80034b0 <__errno>
 8000f70:	4603      	mov	r3, r0
 8000f72:	220c      	movs	r2, #12
 8000f74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7a:	e009      	b.n	8000f90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f7c:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <_sbrk+0x64>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f82:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <_sbrk+0x64>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	4a05      	ldr	r2, [pc, #20]	; (8000fa0 <_sbrk+0x64>)
 8000f8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20020000 	.word	0x20020000
 8000f9c:	00000400 	.word	0x00000400
 8000fa0:	200001d4 	.word	0x200001d4
 8000fa4:	20000230 	.word	0x20000230

08000fa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <SystemInit+0x20>)
 8000fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fb2:	4a05      	ldr	r2, [pc, #20]	; (8000fc8 <SystemInit+0x20>)
 8000fb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <MX_USART3_UART_Init+0x4c>)
 8000fd2:	4a12      	ldr	r2, [pc, #72]	; (800101c <MX_USART3_UART_Init+0x50>)
 8000fd4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <MX_USART3_UART_Init+0x4c>)
 8000fd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fdc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <MX_USART3_UART_Init+0x4c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <MX_USART3_UART_Init+0x4c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <MX_USART3_UART_Init+0x4c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ff0:	4b09      	ldr	r3, [pc, #36]	; (8001018 <MX_USART3_UART_Init+0x4c>)
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <MX_USART3_UART_Init+0x4c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <MX_USART3_UART_Init+0x4c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001002:	4805      	ldr	r0, [pc, #20]	; (8001018 <MX_USART3_UART_Init+0x4c>)
 8001004:	f001 fdf0 	bl	8002be8 <HAL_UART_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800100e:	f7ff fcfb 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200001d8 	.word	0x200001d8
 800101c:	40004800 	.word	0x40004800

08001020 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a19      	ldr	r2, [pc, #100]	; (80010a4 <HAL_UART_MspInit+0x84>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d12c      	bne.n	800109c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <HAL_UART_MspInit+0x88>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	4a17      	ldr	r2, [pc, #92]	; (80010a8 <HAL_UART_MspInit+0x88>)
 800104c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001050:	6413      	str	r3, [r2, #64]	; 0x40
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <HAL_UART_MspInit+0x88>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <HAL_UART_MspInit+0x88>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a10      	ldr	r2, [pc, #64]	; (80010a8 <HAL_UART_MspInit+0x88>)
 8001068:	f043 0308 	orr.w	r3, r3, #8
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <HAL_UART_MspInit+0x88>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0308 	and.w	r3, r3, #8
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800107a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800107e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001080:	2302      	movs	r3, #2
 8001082:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001088:	2303      	movs	r3, #3
 800108a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800108c:	2307      	movs	r3, #7
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	4619      	mov	r1, r3
 8001096:	4805      	ldr	r0, [pc, #20]	; (80010ac <HAL_UART_MspInit+0x8c>)
 8001098:	f000 f9b0 	bl	80013fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800109c:	bf00      	nop
 800109e:	3728      	adds	r7, #40	; 0x28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40004800 	.word	0x40004800
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020c00 	.word	0x40020c00

080010b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010b4:	480d      	ldr	r0, [pc, #52]	; (80010ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010b6:	490e      	ldr	r1, [pc, #56]	; (80010f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010b8:	4a0e      	ldr	r2, [pc, #56]	; (80010f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010bc:	e002      	b.n	80010c4 <LoopCopyDataInit>

080010be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c2:	3304      	adds	r3, #4

080010c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c8:	d3f9      	bcc.n	80010be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ca:	4a0b      	ldr	r2, [pc, #44]	; (80010f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010cc:	4c0b      	ldr	r4, [pc, #44]	; (80010fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d0:	e001      	b.n	80010d6 <LoopFillZerobss>

080010d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d4:	3204      	adds	r2, #4

080010d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d8:	d3fb      	bcc.n	80010d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010da:	f7ff ff65 	bl	8000fa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010de:	f002 f9ed 	bl	80034bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010e2:	f7ff fabd 	bl	8000660 <main>
  bx  lr    
 80010e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010f4:	08004c40 	.word	0x08004c40
  ldr r2, =_sbss
 80010f8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010fc:	20000230 	.word	0x20000230

08001100 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001100:	e7fe      	b.n	8001100 <ADC_IRQHandler>
	...

08001104 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001108:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <HAL_Init+0x40>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0d      	ldr	r2, [pc, #52]	; (8001144 <HAL_Init+0x40>)
 800110e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001112:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001114:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <HAL_Init+0x40>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a0a      	ldr	r2, [pc, #40]	; (8001144 <HAL_Init+0x40>)
 800111a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800111e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <HAL_Init+0x40>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a07      	ldr	r2, [pc, #28]	; (8001144 <HAL_Init+0x40>)
 8001126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800112a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800112c:	2003      	movs	r0, #3
 800112e:	f000 f931 	bl	8001394 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001132:	200f      	movs	r0, #15
 8001134:	f000 f808 	bl	8001148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001138:	f7ff feae 	bl	8000e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40023c00 	.word	0x40023c00

08001148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_InitTick+0x54>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <HAL_InitTick+0x58>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4619      	mov	r1, r3
 800115a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001162:	fbb2 f3f3 	udiv	r3, r2, r3
 8001166:	4618      	mov	r0, r3
 8001168:	f000 f93b 	bl	80013e2 <HAL_SYSTICK_Config>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e00e      	b.n	8001194 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b0f      	cmp	r3, #15
 800117a:	d80a      	bhi.n	8001192 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800117c:	2200      	movs	r2, #0
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	f04f 30ff 	mov.w	r0, #4294967295
 8001184:	f000 f911 	bl	80013aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001188:	4a06      	ldr	r2, [pc, #24]	; (80011a4 <HAL_InitTick+0x5c>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	e000      	b.n	8001194 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
}
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000000 	.word	0x20000000
 80011a0:	20000008 	.word	0x20000008
 80011a4:	20000004 	.word	0x20000004

080011a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <HAL_IncTick+0x20>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_IncTick+0x24>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4413      	add	r3, r2
 80011b8:	4a04      	ldr	r2, [pc, #16]	; (80011cc <HAL_IncTick+0x24>)
 80011ba:	6013      	str	r3, [r2, #0]
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	20000008 	.word	0x20000008
 80011cc:	2000021c 	.word	0x2000021c

080011d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return uwTick;
 80011d4:	4b03      	ldr	r3, [pc, #12]	; (80011e4 <HAL_GetTick+0x14>)
 80011d6:	681b      	ldr	r3, [r3, #0]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	2000021c 	.word	0x2000021c

080011e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011f0:	f7ff ffee 	bl	80011d0 <HAL_GetTick>
 80011f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001200:	d005      	beq.n	800120e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001202:	4b0a      	ldr	r3, [pc, #40]	; (800122c <HAL_Delay+0x44>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	461a      	mov	r2, r3
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	4413      	add	r3, r2
 800120c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800120e:	bf00      	nop
 8001210:	f7ff ffde 	bl	80011d0 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	429a      	cmp	r2, r3
 800121e:	d8f7      	bhi.n	8001210 <HAL_Delay+0x28>
  {
  }
}
 8001220:	bf00      	nop
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000008 	.word	0x20000008

08001230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <__NVIC_SetPriorityGrouping+0x44>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800124c:	4013      	ands	r3, r2
 800124e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001258:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800125c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001262:	4a04      	ldr	r2, [pc, #16]	; (8001274 <__NVIC_SetPriorityGrouping+0x44>)
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	60d3      	str	r3, [r2, #12]
}
 8001268:	bf00      	nop
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800127c:	4b04      	ldr	r3, [pc, #16]	; (8001290 <__NVIC_GetPriorityGrouping+0x18>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	0a1b      	lsrs	r3, r3, #8
 8001282:	f003 0307 	and.w	r3, r3, #7
}
 8001286:	4618      	mov	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	6039      	str	r1, [r7, #0]
 800129e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	db0a      	blt.n	80012be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	490c      	ldr	r1, [pc, #48]	; (80012e0 <__NVIC_SetPriority+0x4c>)
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	0112      	lsls	r2, r2, #4
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	440b      	add	r3, r1
 80012b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012bc:	e00a      	b.n	80012d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4908      	ldr	r1, [pc, #32]	; (80012e4 <__NVIC_SetPriority+0x50>)
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	f003 030f 	and.w	r3, r3, #15
 80012ca:	3b04      	subs	r3, #4
 80012cc:	0112      	lsls	r2, r2, #4
 80012ce:	b2d2      	uxtb	r2, r2
 80012d0:	440b      	add	r3, r1
 80012d2:	761a      	strb	r2, [r3, #24]
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000e100 	.word	0xe000e100
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b089      	sub	sp, #36	; 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	f1c3 0307 	rsb	r3, r3, #7
 8001302:	2b04      	cmp	r3, #4
 8001304:	bf28      	it	cs
 8001306:	2304      	movcs	r3, #4
 8001308:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3304      	adds	r3, #4
 800130e:	2b06      	cmp	r3, #6
 8001310:	d902      	bls.n	8001318 <NVIC_EncodePriority+0x30>
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3b03      	subs	r3, #3
 8001316:	e000      	b.n	800131a <NVIC_EncodePriority+0x32>
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800131c:	f04f 32ff 	mov.w	r2, #4294967295
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43da      	mvns	r2, r3
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	401a      	ands	r2, r3
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001330:	f04f 31ff 	mov.w	r1, #4294967295
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	fa01 f303 	lsl.w	r3, r1, r3
 800133a:	43d9      	mvns	r1, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	4313      	orrs	r3, r2
         );
}
 8001342:	4618      	mov	r0, r3
 8001344:	3724      	adds	r7, #36	; 0x24
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
	...

08001350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3b01      	subs	r3, #1
 800135c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001360:	d301      	bcc.n	8001366 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001362:	2301      	movs	r3, #1
 8001364:	e00f      	b.n	8001386 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001366:	4a0a      	ldr	r2, [pc, #40]	; (8001390 <SysTick_Config+0x40>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3b01      	subs	r3, #1
 800136c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800136e:	210f      	movs	r1, #15
 8001370:	f04f 30ff 	mov.w	r0, #4294967295
 8001374:	f7ff ff8e 	bl	8001294 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001378:	4b05      	ldr	r3, [pc, #20]	; (8001390 <SysTick_Config+0x40>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137e:	4b04      	ldr	r3, [pc, #16]	; (8001390 <SysTick_Config+0x40>)
 8001380:	2207      	movs	r2, #7
 8001382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	e000e010 	.word	0xe000e010

08001394 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff ff47 	bl	8001230 <__NVIC_SetPriorityGrouping>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b086      	sub	sp, #24
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	4603      	mov	r3, r0
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
 80013b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013bc:	f7ff ff5c 	bl	8001278 <__NVIC_GetPriorityGrouping>
 80013c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	68b9      	ldr	r1, [r7, #8]
 80013c6:	6978      	ldr	r0, [r7, #20]
 80013c8:	f7ff ff8e 	bl	80012e8 <NVIC_EncodePriority>
 80013cc:	4602      	mov	r2, r0
 80013ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d2:	4611      	mov	r1, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ff5d 	bl	8001294 <__NVIC_SetPriority>
}
 80013da:	bf00      	nop
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff ffb0 	bl	8001350 <SysTick_Config>
 80013f0:	4603      	mov	r3, r0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b089      	sub	sp, #36	; 0x24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800140a:	2300      	movs	r3, #0
 800140c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800140e:	2300      	movs	r3, #0
 8001410:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001412:	2300      	movs	r3, #0
 8001414:	61fb      	str	r3, [r7, #28]
 8001416:	e16b      	b.n	80016f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001418:	2201      	movs	r2, #1
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	4013      	ands	r3, r2
 800142a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	429a      	cmp	r2, r3
 8001432:	f040 815a 	bne.w	80016ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f003 0303 	and.w	r3, r3, #3
 800143e:	2b01      	cmp	r3, #1
 8001440:	d005      	beq.n	800144e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800144a:	2b02      	cmp	r3, #2
 800144c:	d130      	bne.n	80014b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	2203      	movs	r2, #3
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43db      	mvns	r3, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4013      	ands	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	68da      	ldr	r2, [r3, #12]
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4313      	orrs	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001484:	2201      	movs	r2, #1
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4013      	ands	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	091b      	lsrs	r3, r3, #4
 800149a:	f003 0201 	and.w	r2, r3, #1
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 0303 	and.w	r3, r3, #3
 80014b8:	2b03      	cmp	r3, #3
 80014ba:	d017      	beq.n	80014ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	2203      	movs	r2, #3
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4013      	ands	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 0303 	and.w	r3, r3, #3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d123      	bne.n	8001540 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	08da      	lsrs	r2, r3, #3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3208      	adds	r2, #8
 8001500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001504:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	f003 0307 	and.w	r3, r3, #7
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	220f      	movs	r2, #15
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	691a      	ldr	r2, [r3, #16]
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	08da      	lsrs	r2, r3, #3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	3208      	adds	r2, #8
 800153a:	69b9      	ldr	r1, [r7, #24]
 800153c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	2203      	movs	r2, #3
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	43db      	mvns	r3, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 0203 	and.w	r2, r3, #3
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4313      	orrs	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800157c:	2b00      	cmp	r3, #0
 800157e:	f000 80b4 	beq.w	80016ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	4b60      	ldr	r3, [pc, #384]	; (8001708 <HAL_GPIO_Init+0x30c>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	4a5f      	ldr	r2, [pc, #380]	; (8001708 <HAL_GPIO_Init+0x30c>)
 800158c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001590:	6453      	str	r3, [r2, #68]	; 0x44
 8001592:	4b5d      	ldr	r3, [pc, #372]	; (8001708 <HAL_GPIO_Init+0x30c>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800159e:	4a5b      	ldr	r2, [pc, #364]	; (800170c <HAL_GPIO_Init+0x310>)
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	089b      	lsrs	r3, r3, #2
 80015a4:	3302      	adds	r3, #2
 80015a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f003 0303 	and.w	r3, r3, #3
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	220f      	movs	r2, #15
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4013      	ands	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a52      	ldr	r2, [pc, #328]	; (8001710 <HAL_GPIO_Init+0x314>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d02b      	beq.n	8001622 <HAL_GPIO_Init+0x226>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a51      	ldr	r2, [pc, #324]	; (8001714 <HAL_GPIO_Init+0x318>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d025      	beq.n	800161e <HAL_GPIO_Init+0x222>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a50      	ldr	r2, [pc, #320]	; (8001718 <HAL_GPIO_Init+0x31c>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d01f      	beq.n	800161a <HAL_GPIO_Init+0x21e>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a4f      	ldr	r2, [pc, #316]	; (800171c <HAL_GPIO_Init+0x320>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d019      	beq.n	8001616 <HAL_GPIO_Init+0x21a>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a4e      	ldr	r2, [pc, #312]	; (8001720 <HAL_GPIO_Init+0x324>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d013      	beq.n	8001612 <HAL_GPIO_Init+0x216>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a4d      	ldr	r2, [pc, #308]	; (8001724 <HAL_GPIO_Init+0x328>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d00d      	beq.n	800160e <HAL_GPIO_Init+0x212>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a4c      	ldr	r2, [pc, #304]	; (8001728 <HAL_GPIO_Init+0x32c>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d007      	beq.n	800160a <HAL_GPIO_Init+0x20e>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a4b      	ldr	r2, [pc, #300]	; (800172c <HAL_GPIO_Init+0x330>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d101      	bne.n	8001606 <HAL_GPIO_Init+0x20a>
 8001602:	2307      	movs	r3, #7
 8001604:	e00e      	b.n	8001624 <HAL_GPIO_Init+0x228>
 8001606:	2308      	movs	r3, #8
 8001608:	e00c      	b.n	8001624 <HAL_GPIO_Init+0x228>
 800160a:	2306      	movs	r3, #6
 800160c:	e00a      	b.n	8001624 <HAL_GPIO_Init+0x228>
 800160e:	2305      	movs	r3, #5
 8001610:	e008      	b.n	8001624 <HAL_GPIO_Init+0x228>
 8001612:	2304      	movs	r3, #4
 8001614:	e006      	b.n	8001624 <HAL_GPIO_Init+0x228>
 8001616:	2303      	movs	r3, #3
 8001618:	e004      	b.n	8001624 <HAL_GPIO_Init+0x228>
 800161a:	2302      	movs	r3, #2
 800161c:	e002      	b.n	8001624 <HAL_GPIO_Init+0x228>
 800161e:	2301      	movs	r3, #1
 8001620:	e000      	b.n	8001624 <HAL_GPIO_Init+0x228>
 8001622:	2300      	movs	r3, #0
 8001624:	69fa      	ldr	r2, [r7, #28]
 8001626:	f002 0203 	and.w	r2, r2, #3
 800162a:	0092      	lsls	r2, r2, #2
 800162c:	4093      	lsls	r3, r2
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4313      	orrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001634:	4935      	ldr	r1, [pc, #212]	; (800170c <HAL_GPIO_Init+0x310>)
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	089b      	lsrs	r3, r3, #2
 800163a:	3302      	adds	r3, #2
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001642:	4b3b      	ldr	r3, [pc, #236]	; (8001730 <HAL_GPIO_Init+0x334>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	43db      	mvns	r3, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4013      	ands	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001666:	4a32      	ldr	r2, [pc, #200]	; (8001730 <HAL_GPIO_Init+0x334>)
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800166c:	4b30      	ldr	r3, [pc, #192]	; (8001730 <HAL_GPIO_Init+0x334>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	43db      	mvns	r3, r3
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4013      	ands	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	4313      	orrs	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001690:	4a27      	ldr	r2, [pc, #156]	; (8001730 <HAL_GPIO_Init+0x334>)
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001696:	4b26      	ldr	r3, [pc, #152]	; (8001730 <HAL_GPIO_Init+0x334>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	43db      	mvns	r3, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4013      	ands	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016ba:	4a1d      	ldr	r2, [pc, #116]	; (8001730 <HAL_GPIO_Init+0x334>)
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016c0:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <HAL_GPIO_Init+0x334>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	43db      	mvns	r3, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016e4:	4a12      	ldr	r2, [pc, #72]	; (8001730 <HAL_GPIO_Init+0x334>)
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	3301      	adds	r3, #1
 80016ee:	61fb      	str	r3, [r7, #28]
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	2b0f      	cmp	r3, #15
 80016f4:	f67f ae90 	bls.w	8001418 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016f8:	bf00      	nop
 80016fa:	bf00      	nop
 80016fc:	3724      	adds	r7, #36	; 0x24
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	40023800 	.word	0x40023800
 800170c:	40013800 	.word	0x40013800
 8001710:	40020000 	.word	0x40020000
 8001714:	40020400 	.word	0x40020400
 8001718:	40020800 	.word	0x40020800
 800171c:	40020c00 	.word	0x40020c00
 8001720:	40021000 	.word	0x40021000
 8001724:	40021400 	.word	0x40021400
 8001728:	40021800 	.word	0x40021800
 800172c:	40021c00 	.word	0x40021c00
 8001730:	40013c00 	.word	0x40013c00

08001734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	807b      	strh	r3, [r7, #2]
 8001740:	4613      	mov	r3, r2
 8001742:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001744:	787b      	ldrb	r3, [r7, #1]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800174a:	887a      	ldrh	r2, [r7, #2]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001750:	e003      	b.n	800175a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001752:	887b      	ldrh	r3, [r7, #2]
 8001754:	041a      	lsls	r2, r3, #16
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	619a      	str	r2, [r3, #24]
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
	...

08001768 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e267      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	d075      	beq.n	8001872 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001786:	4b88      	ldr	r3, [pc, #544]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 030c 	and.w	r3, r3, #12
 800178e:	2b04      	cmp	r3, #4
 8001790:	d00c      	beq.n	80017ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001792:	4b85      	ldr	r3, [pc, #532]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800179a:	2b08      	cmp	r3, #8
 800179c:	d112      	bne.n	80017c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800179e:	4b82      	ldr	r3, [pc, #520]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017aa:	d10b      	bne.n	80017c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ac:	4b7e      	ldr	r3, [pc, #504]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d05b      	beq.n	8001870 <HAL_RCC_OscConfig+0x108>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d157      	bne.n	8001870 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e242      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017cc:	d106      	bne.n	80017dc <HAL_RCC_OscConfig+0x74>
 80017ce:	4b76      	ldr	r3, [pc, #472]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a75      	ldr	r2, [pc, #468]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 80017d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	e01d      	b.n	8001818 <HAL_RCC_OscConfig+0xb0>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017e4:	d10c      	bne.n	8001800 <HAL_RCC_OscConfig+0x98>
 80017e6:	4b70      	ldr	r3, [pc, #448]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a6f      	ldr	r2, [pc, #444]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 80017ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	4b6d      	ldr	r3, [pc, #436]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a6c      	ldr	r2, [pc, #432]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 80017f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	e00b      	b.n	8001818 <HAL_RCC_OscConfig+0xb0>
 8001800:	4b69      	ldr	r3, [pc, #420]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a68      	ldr	r2, [pc, #416]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 8001806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	4b66      	ldr	r3, [pc, #408]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a65      	ldr	r2, [pc, #404]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 8001812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d013      	beq.n	8001848 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001820:	f7ff fcd6 	bl	80011d0 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001828:	f7ff fcd2 	bl	80011d0 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b64      	cmp	r3, #100	; 0x64
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e207      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800183a:	4b5b      	ldr	r3, [pc, #364]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f0      	beq.n	8001828 <HAL_RCC_OscConfig+0xc0>
 8001846:	e014      	b.n	8001872 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001848:	f7ff fcc2 	bl	80011d0 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001850:	f7ff fcbe 	bl	80011d0 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b64      	cmp	r3, #100	; 0x64
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e1f3      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001862:	4b51      	ldr	r3, [pc, #324]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f0      	bne.n	8001850 <HAL_RCC_OscConfig+0xe8>
 800186e:	e000      	b.n	8001872 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d063      	beq.n	8001946 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800187e:	4b4a      	ldr	r3, [pc, #296]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 030c 	and.w	r3, r3, #12
 8001886:	2b00      	cmp	r3, #0
 8001888:	d00b      	beq.n	80018a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800188a:	4b47      	ldr	r3, [pc, #284]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001892:	2b08      	cmp	r3, #8
 8001894:	d11c      	bne.n	80018d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001896:	4b44      	ldr	r3, [pc, #272]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d116      	bne.n	80018d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018a2:	4b41      	ldr	r3, [pc, #260]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d005      	beq.n	80018ba <HAL_RCC_OscConfig+0x152>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d001      	beq.n	80018ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e1c7      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ba:	4b3b      	ldr	r3, [pc, #236]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	4937      	ldr	r1, [pc, #220]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ce:	e03a      	b.n	8001946 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d020      	beq.n	800191a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018d8:	4b34      	ldr	r3, [pc, #208]	; (80019ac <HAL_RCC_OscConfig+0x244>)
 80018da:	2201      	movs	r2, #1
 80018dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018de:	f7ff fc77 	bl	80011d0 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018e6:	f7ff fc73 	bl	80011d0 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e1a8      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f8:	4b2b      	ldr	r3, [pc, #172]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0f0      	beq.n	80018e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001904:	4b28      	ldr	r3, [pc, #160]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	4925      	ldr	r1, [pc, #148]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 8001914:	4313      	orrs	r3, r2
 8001916:	600b      	str	r3, [r1, #0]
 8001918:	e015      	b.n	8001946 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800191a:	4b24      	ldr	r3, [pc, #144]	; (80019ac <HAL_RCC_OscConfig+0x244>)
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001920:	f7ff fc56 	bl	80011d0 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001928:	f7ff fc52 	bl	80011d0 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e187      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800193a:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f0      	bne.n	8001928 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	2b00      	cmp	r3, #0
 8001950:	d036      	beq.n	80019c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d016      	beq.n	8001988 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <HAL_RCC_OscConfig+0x248>)
 800195c:	2201      	movs	r2, #1
 800195e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001960:	f7ff fc36 	bl	80011d0 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001968:	f7ff fc32 	bl	80011d0 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e167      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800197a:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 800197c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0f0      	beq.n	8001968 <HAL_RCC_OscConfig+0x200>
 8001986:	e01b      	b.n	80019c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001988:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <HAL_RCC_OscConfig+0x248>)
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800198e:	f7ff fc1f 	bl	80011d0 <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001994:	e00e      	b.n	80019b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001996:	f7ff fc1b 	bl	80011d0 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d907      	bls.n	80019b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e150      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
 80019a8:	40023800 	.word	0x40023800
 80019ac:	42470000 	.word	0x42470000
 80019b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b4:	4b88      	ldr	r3, [pc, #544]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 80019b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1ea      	bne.n	8001996 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f000 8097 	beq.w	8001afc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ce:	2300      	movs	r3, #0
 80019d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019d2:	4b81      	ldr	r3, [pc, #516]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10f      	bne.n	80019fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	4b7d      	ldr	r3, [pc, #500]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	4a7c      	ldr	r2, [pc, #496]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 80019e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ec:	6413      	str	r3, [r2, #64]	; 0x40
 80019ee:	4b7a      	ldr	r3, [pc, #488]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019fa:	2301      	movs	r3, #1
 80019fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019fe:	4b77      	ldr	r3, [pc, #476]	; (8001bdc <HAL_RCC_OscConfig+0x474>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d118      	bne.n	8001a3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a0a:	4b74      	ldr	r3, [pc, #464]	; (8001bdc <HAL_RCC_OscConfig+0x474>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a73      	ldr	r2, [pc, #460]	; (8001bdc <HAL_RCC_OscConfig+0x474>)
 8001a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a16:	f7ff fbdb 	bl	80011d0 <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a1e:	f7ff fbd7 	bl	80011d0 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e10c      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a30:	4b6a      	ldr	r3, [pc, #424]	; (8001bdc <HAL_RCC_OscConfig+0x474>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0f0      	beq.n	8001a1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d106      	bne.n	8001a52 <HAL_RCC_OscConfig+0x2ea>
 8001a44:	4b64      	ldr	r3, [pc, #400]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a48:	4a63      	ldr	r2, [pc, #396]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a50:	e01c      	b.n	8001a8c <HAL_RCC_OscConfig+0x324>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	2b05      	cmp	r3, #5
 8001a58:	d10c      	bne.n	8001a74 <HAL_RCC_OscConfig+0x30c>
 8001a5a:	4b5f      	ldr	r3, [pc, #380]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a5e:	4a5e      	ldr	r2, [pc, #376]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001a60:	f043 0304 	orr.w	r3, r3, #4
 8001a64:	6713      	str	r3, [r2, #112]	; 0x70
 8001a66:	4b5c      	ldr	r3, [pc, #368]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a6a:	4a5b      	ldr	r2, [pc, #364]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6713      	str	r3, [r2, #112]	; 0x70
 8001a72:	e00b      	b.n	8001a8c <HAL_RCC_OscConfig+0x324>
 8001a74:	4b58      	ldr	r3, [pc, #352]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a78:	4a57      	ldr	r2, [pc, #348]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001a7a:	f023 0301 	bic.w	r3, r3, #1
 8001a7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a80:	4b55      	ldr	r3, [pc, #340]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a84:	4a54      	ldr	r2, [pc, #336]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001a86:	f023 0304 	bic.w	r3, r3, #4
 8001a8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d015      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a94:	f7ff fb9c 	bl	80011d0 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a9a:	e00a      	b.n	8001ab2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a9c:	f7ff fb98 	bl	80011d0 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e0cb      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab2:	4b49      	ldr	r3, [pc, #292]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0ee      	beq.n	8001a9c <HAL_RCC_OscConfig+0x334>
 8001abe:	e014      	b.n	8001aea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac0:	f7ff fb86 	bl	80011d0 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac6:	e00a      	b.n	8001ade <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ac8:	f7ff fb82 	bl	80011d0 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e0b5      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ade:	4b3e      	ldr	r3, [pc, #248]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1ee      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001aea:	7dfb      	ldrb	r3, [r7, #23]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d105      	bne.n	8001afc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001af0:	4b39      	ldr	r3, [pc, #228]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	4a38      	ldr	r2, [pc, #224]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001af6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001afa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 80a1 	beq.w	8001c48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b06:	4b34      	ldr	r3, [pc, #208]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 030c 	and.w	r3, r3, #12
 8001b0e:	2b08      	cmp	r3, #8
 8001b10:	d05c      	beq.n	8001bcc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d141      	bne.n	8001b9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b1a:	4b31      	ldr	r3, [pc, #196]	; (8001be0 <HAL_RCC_OscConfig+0x478>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b20:	f7ff fb56 	bl	80011d0 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b28:	f7ff fb52 	bl	80011d0 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e087      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b3a:	4b27      	ldr	r3, [pc, #156]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69da      	ldr	r2, [r3, #28]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a1b      	ldr	r3, [r3, #32]
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b54:	019b      	lsls	r3, r3, #6
 8001b56:	431a      	orrs	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5c:	085b      	lsrs	r3, r3, #1
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	041b      	lsls	r3, r3, #16
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b68:	061b      	lsls	r3, r3, #24
 8001b6a:	491b      	ldr	r1, [pc, #108]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b70:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <HAL_RCC_OscConfig+0x478>)
 8001b72:	2201      	movs	r2, #1
 8001b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b76:	f7ff fb2b 	bl	80011d0 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b7e:	f7ff fb27 	bl	80011d0 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e05c      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0f0      	beq.n	8001b7e <HAL_RCC_OscConfig+0x416>
 8001b9c:	e054      	b.n	8001c48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9e:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <HAL_RCC_OscConfig+0x478>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba4:	f7ff fb14 	bl	80011d0 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bac:	f7ff fb10 	bl	80011d0 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e045      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bbe:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f0      	bne.n	8001bac <HAL_RCC_OscConfig+0x444>
 8001bca:	e03d      	b.n	8001c48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d107      	bne.n	8001be4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e038      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40007000 	.word	0x40007000
 8001be0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001be4:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <HAL_RCC_OscConfig+0x4ec>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d028      	beq.n	8001c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d121      	bne.n	8001c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d11a      	bne.n	8001c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c14:	4013      	ands	r3, r2
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d111      	bne.n	8001c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2a:	085b      	lsrs	r3, r3, #1
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d107      	bne.n	8001c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d001      	beq.n	8001c48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e000      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800

08001c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e0cc      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c6c:	4b68      	ldr	r3, [pc, #416]	; (8001e10 <HAL_RCC_ClockConfig+0x1b8>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d90c      	bls.n	8001c94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7a:	4b65      	ldr	r3, [pc, #404]	; (8001e10 <HAL_RCC_ClockConfig+0x1b8>)
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c82:	4b63      	ldr	r3, [pc, #396]	; (8001e10 <HAL_RCC_ClockConfig+0x1b8>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d001      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e0b8      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d020      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d005      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cac:	4b59      	ldr	r3, [pc, #356]	; (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	4a58      	ldr	r2, [pc, #352]	; (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0308 	and.w	r3, r3, #8
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d005      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cc4:	4b53      	ldr	r3, [pc, #332]	; (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	4a52      	ldr	r2, [pc, #328]	; (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001cca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd0:	4b50      	ldr	r3, [pc, #320]	; (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	494d      	ldr	r1, [pc, #308]	; (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d044      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d107      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf6:	4b47      	ldr	r3, [pc, #284]	; (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d119      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e07f      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d003      	beq.n	8001d16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	d107      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d16:	4b3f      	ldr	r3, [pc, #252]	; (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d109      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e06f      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d26:	4b3b      	ldr	r3, [pc, #236]	; (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e067      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d36:	4b37      	ldr	r3, [pc, #220]	; (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f023 0203 	bic.w	r2, r3, #3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	4934      	ldr	r1, [pc, #208]	; (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d48:	f7ff fa42 	bl	80011d0 <HAL_GetTick>
 8001d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4e:	e00a      	b.n	8001d66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d50:	f7ff fa3e 	bl	80011d0 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e04f      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d66:	4b2b      	ldr	r3, [pc, #172]	; (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 020c 	and.w	r2, r3, #12
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d1eb      	bne.n	8001d50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d78:	4b25      	ldr	r3, [pc, #148]	; (8001e10 <HAL_RCC_ClockConfig+0x1b8>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d20c      	bcs.n	8001da0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d86:	4b22      	ldr	r3, [pc, #136]	; (8001e10 <HAL_RCC_ClockConfig+0x1b8>)
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8e:	4b20      	ldr	r3, [pc, #128]	; (8001e10 <HAL_RCC_ClockConfig+0x1b8>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d001      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e032      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d008      	beq.n	8001dbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dac:	4b19      	ldr	r3, [pc, #100]	; (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	4916      	ldr	r1, [pc, #88]	; (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d009      	beq.n	8001dde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dca:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	490e      	ldr	r1, [pc, #56]	; (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dde:	f000 f821 	bl	8001e24 <HAL_RCC_GetSysClockFreq>
 8001de2:	4602      	mov	r2, r0
 8001de4:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	091b      	lsrs	r3, r3, #4
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	490a      	ldr	r1, [pc, #40]	; (8001e18 <HAL_RCC_ClockConfig+0x1c0>)
 8001df0:	5ccb      	ldrb	r3, [r1, r3]
 8001df2:	fa22 f303 	lsr.w	r3, r2, r3
 8001df6:	4a09      	ldr	r2, [pc, #36]	; (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001dfa:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <HAL_RCC_ClockConfig+0x1c8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff f9a2 	bl	8001148 <HAL_InitTick>

  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40023c00 	.word	0x40023c00
 8001e14:	40023800 	.word	0x40023800
 8001e18:	08004a68 	.word	0x08004a68
 8001e1c:	20000000 	.word	0x20000000
 8001e20:	20000004 	.word	0x20000004

08001e24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e28:	b094      	sub	sp, #80	; 0x50
 8001e2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	647b      	str	r3, [r7, #68]	; 0x44
 8001e30:	2300      	movs	r3, #0
 8001e32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e34:	2300      	movs	r3, #0
 8001e36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e3c:	4b79      	ldr	r3, [pc, #484]	; (8002024 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 030c 	and.w	r3, r3, #12
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d00d      	beq.n	8001e64 <HAL_RCC_GetSysClockFreq+0x40>
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	f200 80e1 	bhi.w	8002010 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d002      	beq.n	8001e58 <HAL_RCC_GetSysClockFreq+0x34>
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	d003      	beq.n	8001e5e <HAL_RCC_GetSysClockFreq+0x3a>
 8001e56:	e0db      	b.n	8002010 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e58:	4b73      	ldr	r3, [pc, #460]	; (8002028 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e5a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001e5c:	e0db      	b.n	8002016 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e5e:	4b73      	ldr	r3, [pc, #460]	; (800202c <HAL_RCC_GetSysClockFreq+0x208>)
 8001e60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e62:	e0d8      	b.n	8002016 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e64:	4b6f      	ldr	r3, [pc, #444]	; (8002024 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e6c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e6e:	4b6d      	ldr	r3, [pc, #436]	; (8002024 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d063      	beq.n	8001f42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e7a:	4b6a      	ldr	r3, [pc, #424]	; (8002024 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	099b      	lsrs	r3, r3, #6
 8001e80:	2200      	movs	r2, #0
 8001e82:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e8c:	633b      	str	r3, [r7, #48]	; 0x30
 8001e8e:	2300      	movs	r3, #0
 8001e90:	637b      	str	r3, [r7, #52]	; 0x34
 8001e92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e96:	4622      	mov	r2, r4
 8001e98:	462b      	mov	r3, r5
 8001e9a:	f04f 0000 	mov.w	r0, #0
 8001e9e:	f04f 0100 	mov.w	r1, #0
 8001ea2:	0159      	lsls	r1, r3, #5
 8001ea4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ea8:	0150      	lsls	r0, r2, #5
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	4621      	mov	r1, r4
 8001eb0:	1a51      	subs	r1, r2, r1
 8001eb2:	6139      	str	r1, [r7, #16]
 8001eb4:	4629      	mov	r1, r5
 8001eb6:	eb63 0301 	sbc.w	r3, r3, r1
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	f04f 0300 	mov.w	r3, #0
 8001ec4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ec8:	4659      	mov	r1, fp
 8001eca:	018b      	lsls	r3, r1, #6
 8001ecc:	4651      	mov	r1, sl
 8001ece:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ed2:	4651      	mov	r1, sl
 8001ed4:	018a      	lsls	r2, r1, #6
 8001ed6:	4651      	mov	r1, sl
 8001ed8:	ebb2 0801 	subs.w	r8, r2, r1
 8001edc:	4659      	mov	r1, fp
 8001ede:	eb63 0901 	sbc.w	r9, r3, r1
 8001ee2:	f04f 0200 	mov.w	r2, #0
 8001ee6:	f04f 0300 	mov.w	r3, #0
 8001eea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001eee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ef2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ef6:	4690      	mov	r8, r2
 8001ef8:	4699      	mov	r9, r3
 8001efa:	4623      	mov	r3, r4
 8001efc:	eb18 0303 	adds.w	r3, r8, r3
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	462b      	mov	r3, r5
 8001f04:	eb49 0303 	adc.w	r3, r9, r3
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	f04f 0300 	mov.w	r3, #0
 8001f12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f16:	4629      	mov	r1, r5
 8001f18:	024b      	lsls	r3, r1, #9
 8001f1a:	4621      	mov	r1, r4
 8001f1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f20:	4621      	mov	r1, r4
 8001f22:	024a      	lsls	r2, r1, #9
 8001f24:	4610      	mov	r0, r2
 8001f26:	4619      	mov	r1, r3
 8001f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f34:	f7fe f9b4 	bl	80002a0 <__aeabi_uldivmod>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f40:	e058      	b.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f42:	4b38      	ldr	r3, [pc, #224]	; (8002024 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	099b      	lsrs	r3, r3, #6
 8001f48:	2200      	movs	r2, #0
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	4611      	mov	r1, r2
 8001f4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f52:	623b      	str	r3, [r7, #32]
 8001f54:	2300      	movs	r3, #0
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
 8001f58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f5c:	4642      	mov	r2, r8
 8001f5e:	464b      	mov	r3, r9
 8001f60:	f04f 0000 	mov.w	r0, #0
 8001f64:	f04f 0100 	mov.w	r1, #0
 8001f68:	0159      	lsls	r1, r3, #5
 8001f6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f6e:	0150      	lsls	r0, r2, #5
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	4641      	mov	r1, r8
 8001f76:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f7a:	4649      	mov	r1, r9
 8001f7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	f04f 0300 	mov.w	r3, #0
 8001f88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f94:	ebb2 040a 	subs.w	r4, r2, sl
 8001f98:	eb63 050b 	sbc.w	r5, r3, fp
 8001f9c:	f04f 0200 	mov.w	r2, #0
 8001fa0:	f04f 0300 	mov.w	r3, #0
 8001fa4:	00eb      	lsls	r3, r5, #3
 8001fa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001faa:	00e2      	lsls	r2, r4, #3
 8001fac:	4614      	mov	r4, r2
 8001fae:	461d      	mov	r5, r3
 8001fb0:	4643      	mov	r3, r8
 8001fb2:	18e3      	adds	r3, r4, r3
 8001fb4:	603b      	str	r3, [r7, #0]
 8001fb6:	464b      	mov	r3, r9
 8001fb8:	eb45 0303 	adc.w	r3, r5, r3
 8001fbc:	607b      	str	r3, [r7, #4]
 8001fbe:	f04f 0200 	mov.w	r2, #0
 8001fc2:	f04f 0300 	mov.w	r3, #0
 8001fc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fca:	4629      	mov	r1, r5
 8001fcc:	028b      	lsls	r3, r1, #10
 8001fce:	4621      	mov	r1, r4
 8001fd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fd4:	4621      	mov	r1, r4
 8001fd6:	028a      	lsls	r2, r1, #10
 8001fd8:	4610      	mov	r0, r2
 8001fda:	4619      	mov	r1, r3
 8001fdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fde:	2200      	movs	r2, #0
 8001fe0:	61bb      	str	r3, [r7, #24]
 8001fe2:	61fa      	str	r2, [r7, #28]
 8001fe4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fe8:	f7fe f95a 	bl	80002a0 <__aeabi_uldivmod>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	0c1b      	lsrs	r3, r3, #16
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	3301      	adds	r3, #1
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002004:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002008:	fbb2 f3f3 	udiv	r3, r2, r3
 800200c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800200e:	e002      	b.n	8002016 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002010:	4b05      	ldr	r3, [pc, #20]	; (8002028 <HAL_RCC_GetSysClockFreq+0x204>)
 8002012:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002014:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002018:	4618      	mov	r0, r3
 800201a:	3750      	adds	r7, #80	; 0x50
 800201c:	46bd      	mov	sp, r7
 800201e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002022:	bf00      	nop
 8002024:	40023800 	.word	0x40023800
 8002028:	00f42400 	.word	0x00f42400
 800202c:	007a1200 	.word	0x007a1200

08002030 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002034:	4b03      	ldr	r3, [pc, #12]	; (8002044 <HAL_RCC_GetHCLKFreq+0x14>)
 8002036:	681b      	ldr	r3, [r3, #0]
}
 8002038:	4618      	mov	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	20000000 	.word	0x20000000

08002048 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800204c:	f7ff fff0 	bl	8002030 <HAL_RCC_GetHCLKFreq>
 8002050:	4602      	mov	r2, r0
 8002052:	4b05      	ldr	r3, [pc, #20]	; (8002068 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	0a9b      	lsrs	r3, r3, #10
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	4903      	ldr	r1, [pc, #12]	; (800206c <HAL_RCC_GetPCLK1Freq+0x24>)
 800205e:	5ccb      	ldrb	r3, [r1, r3]
 8002060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002064:	4618      	mov	r0, r3
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40023800 	.word	0x40023800
 800206c:	08004a78 	.word	0x08004a78

08002070 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002074:	f7ff ffdc 	bl	8002030 <HAL_RCC_GetHCLKFreq>
 8002078:	4602      	mov	r2, r0
 800207a:	4b05      	ldr	r3, [pc, #20]	; (8002090 <HAL_RCC_GetPCLK2Freq+0x20>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	0b5b      	lsrs	r3, r3, #13
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	4903      	ldr	r1, [pc, #12]	; (8002094 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002086:	5ccb      	ldrb	r3, [r1, r3]
 8002088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800208c:	4618      	mov	r0, r3
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40023800 	.word	0x40023800
 8002094:	08004a78 	.word	0x08004a78

08002098 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e07b      	b.n	80021a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d108      	bne.n	80020c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020ba:	d009      	beq.n	80020d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	61da      	str	r2, [r3, #28]
 80020c2:	e005      	b.n	80020d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d106      	bne.n	80020f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7fe fcc8 	bl	8000a80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2202      	movs	r2, #2
 80020f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002106:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002118:	431a      	orrs	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	431a      	orrs	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002140:	431a      	orrs	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002154:	ea42 0103 	orr.w	r1, r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	0c1b      	lsrs	r3, r3, #16
 800216e:	f003 0104 	and.w	r1, r3, #4
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002176:	f003 0210 	and.w	r2, r3, #16
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	69da      	ldr	r2, [r3, #28]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002190:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b088      	sub	sp, #32
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	60f8      	str	r0, [r7, #12]
 80021b2:	60b9      	str	r1, [r7, #8]
 80021b4:	603b      	str	r3, [r7, #0]
 80021b6:	4613      	mov	r3, r2
 80021b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80021ba:	2300      	movs	r3, #0
 80021bc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d101      	bne.n	80021cc <HAL_SPI_Transmit+0x22>
 80021c8:	2302      	movs	r3, #2
 80021ca:	e126      	b.n	800241a <HAL_SPI_Transmit+0x270>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021d4:	f7fe fffc 	bl	80011d0 <HAL_GetTick>
 80021d8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80021da:	88fb      	ldrh	r3, [r7, #6]
 80021dc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d002      	beq.n	80021f0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80021ea:	2302      	movs	r3, #2
 80021ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80021ee:	e10b      	b.n	8002408 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d002      	beq.n	80021fc <HAL_SPI_Transmit+0x52>
 80021f6:	88fb      	ldrh	r3, [r7, #6]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d102      	bne.n	8002202 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002200:	e102      	b.n	8002408 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2203      	movs	r2, #3
 8002206:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	88fa      	ldrh	r2, [r7, #6]
 800221a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	88fa      	ldrh	r2, [r7, #6]
 8002220:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002248:	d10f      	bne.n	800226a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002258:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002268:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002274:	2b40      	cmp	r3, #64	; 0x40
 8002276:	d007      	beq.n	8002288 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002286:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002290:	d14b      	bne.n	800232a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <HAL_SPI_Transmit+0xf6>
 800229a:	8afb      	ldrh	r3, [r7, #22]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d13e      	bne.n	800231e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a4:	881a      	ldrh	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b0:	1c9a      	adds	r2, r3, #2
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	3b01      	subs	r3, #1
 80022be:	b29a      	uxth	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80022c4:	e02b      	b.n	800231e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d112      	bne.n	80022fa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d8:	881a      	ldrh	r2, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e4:	1c9a      	adds	r2, r3, #2
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	3b01      	subs	r3, #1
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	86da      	strh	r2, [r3, #54]	; 0x36
 80022f8:	e011      	b.n	800231e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022fa:	f7fe ff69 	bl	80011d0 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	429a      	cmp	r2, r3
 8002308:	d803      	bhi.n	8002312 <HAL_SPI_Transmit+0x168>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002310:	d102      	bne.n	8002318 <HAL_SPI_Transmit+0x16e>
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d102      	bne.n	800231e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800231c:	e074      	b.n	8002408 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002322:	b29b      	uxth	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1ce      	bne.n	80022c6 <HAL_SPI_Transmit+0x11c>
 8002328:	e04c      	b.n	80023c4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d002      	beq.n	8002338 <HAL_SPI_Transmit+0x18e>
 8002332:	8afb      	ldrh	r3, [r7, #22]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d140      	bne.n	80023ba <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	330c      	adds	r3, #12
 8002342:	7812      	ldrb	r2, [r2, #0]
 8002344:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	1c5a      	adds	r2, r3, #1
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002354:	b29b      	uxth	r3, r3
 8002356:	3b01      	subs	r3, #1
 8002358:	b29a      	uxth	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800235e:	e02c      	b.n	80023ba <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b02      	cmp	r3, #2
 800236c:	d113      	bne.n	8002396 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	330c      	adds	r3, #12
 8002378:	7812      	ldrb	r2, [r2, #0]
 800237a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002380:	1c5a      	adds	r2, r3, #1
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800238a:	b29b      	uxth	r3, r3
 800238c:	3b01      	subs	r3, #1
 800238e:	b29a      	uxth	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	86da      	strh	r2, [r3, #54]	; 0x36
 8002394:	e011      	b.n	80023ba <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002396:	f7fe ff1b 	bl	80011d0 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d803      	bhi.n	80023ae <HAL_SPI_Transmit+0x204>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ac:	d102      	bne.n	80023b4 <HAL_SPI_Transmit+0x20a>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d102      	bne.n	80023ba <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80023b8:	e026      	b.n	8002408 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023be:	b29b      	uxth	r3, r3
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1cd      	bne.n	8002360 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	6839      	ldr	r1, [r7, #0]
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f000 fbcb 	bl	8002b64 <SPI_EndRxTxTransaction>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d002      	beq.n	80023da <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2220      	movs	r2, #32
 80023d8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10a      	bne.n	80023f8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023e2:	2300      	movs	r3, #0
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	613b      	str	r3, [r7, #16]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	613b      	str	r3, [r7, #16]
 80023f6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d002      	beq.n	8002406 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	77fb      	strb	r3, [r7, #31]
 8002404:	e000      	b.n	8002408 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002406:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002418:	7ffb      	ldrb	r3, [r7, #31]
}
 800241a:	4618      	mov	r0, r3
 800241c:	3720      	adds	r7, #32
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b088      	sub	sp, #32
 8002426:	af02      	add	r7, sp, #8
 8002428:	60f8      	str	r0, [r7, #12]
 800242a:	60b9      	str	r1, [r7, #8]
 800242c:	603b      	str	r3, [r7, #0]
 800242e:	4613      	mov	r3, r2
 8002430:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800243e:	d112      	bne.n	8002466 <HAL_SPI_Receive+0x44>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d10e      	bne.n	8002466 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2204      	movs	r2, #4
 800244c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002450:	88fa      	ldrh	r2, [r7, #6]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	4613      	mov	r3, r2
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	68b9      	ldr	r1, [r7, #8]
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f000 f8f1 	bl	8002644 <HAL_SPI_TransmitReceive>
 8002462:	4603      	mov	r3, r0
 8002464:	e0ea      	b.n	800263c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800246c:	2b01      	cmp	r3, #1
 800246e:	d101      	bne.n	8002474 <HAL_SPI_Receive+0x52>
 8002470:	2302      	movs	r3, #2
 8002472:	e0e3      	b.n	800263c <HAL_SPI_Receive+0x21a>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800247c:	f7fe fea8 	bl	80011d0 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b01      	cmp	r3, #1
 800248c:	d002      	beq.n	8002494 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800248e:	2302      	movs	r3, #2
 8002490:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002492:	e0ca      	b.n	800262a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d002      	beq.n	80024a0 <HAL_SPI_Receive+0x7e>
 800249a:	88fb      	ldrh	r3, [r7, #6]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d102      	bne.n	80024a6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80024a4:	e0c1      	b.n	800262a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2204      	movs	r2, #4
 80024aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	88fa      	ldrh	r2, [r7, #6]
 80024be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	88fa      	ldrh	r2, [r7, #6]
 80024c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024ec:	d10f      	bne.n	800250e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800250c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002518:	2b40      	cmp	r3, #64	; 0x40
 800251a:	d007      	beq.n	800252c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800252a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d162      	bne.n	80025fa <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002534:	e02e      	b.n	8002594 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b01      	cmp	r3, #1
 8002542:	d115      	bne.n	8002570 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f103 020c 	add.w	r2, r3, #12
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002550:	7812      	ldrb	r2, [r2, #0]
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800255a:	1c5a      	adds	r2, r3, #1
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002564:	b29b      	uxth	r3, r3
 8002566:	3b01      	subs	r3, #1
 8002568:	b29a      	uxth	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800256e:	e011      	b.n	8002594 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002570:	f7fe fe2e 	bl	80011d0 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	429a      	cmp	r2, r3
 800257e:	d803      	bhi.n	8002588 <HAL_SPI_Receive+0x166>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002586:	d102      	bne.n	800258e <HAL_SPI_Receive+0x16c>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d102      	bne.n	8002594 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002592:	e04a      	b.n	800262a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002598:	b29b      	uxth	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1cb      	bne.n	8002536 <HAL_SPI_Receive+0x114>
 800259e:	e031      	b.n	8002604 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d113      	bne.n	80025d6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68da      	ldr	r2, [r3, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b8:	b292      	uxth	r2, r2
 80025ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c0:	1c9a      	adds	r2, r3, #2
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80025d4:	e011      	b.n	80025fa <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025d6:	f7fe fdfb 	bl	80011d0 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d803      	bhi.n	80025ee <HAL_SPI_Receive+0x1cc>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ec:	d102      	bne.n	80025f4 <HAL_SPI_Receive+0x1d2>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d102      	bne.n	80025fa <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80025f8:	e017      	b.n	800262a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025fe:	b29b      	uxth	r3, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1cd      	bne.n	80025a0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	6839      	ldr	r1, [r7, #0]
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 fa45 	bl	8002a98 <SPI_EndRxTransaction>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d002      	beq.n	800261a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2220      	movs	r2, #32
 8002618:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261e:	2b00      	cmp	r3, #0
 8002620:	d002      	beq.n	8002628 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	75fb      	strb	r3, [r7, #23]
 8002626:	e000      	b.n	800262a <HAL_SPI_Receive+0x208>
  }

error :
 8002628:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800263a:	7dfb      	ldrb	r3, [r7, #23]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08c      	sub	sp, #48	; 0x30
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
 8002650:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002652:	2301      	movs	r3, #1
 8002654:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002656:	2300      	movs	r3, #0
 8002658:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002662:	2b01      	cmp	r3, #1
 8002664:	d101      	bne.n	800266a <HAL_SPI_TransmitReceive+0x26>
 8002666:	2302      	movs	r3, #2
 8002668:	e18a      	b.n	8002980 <HAL_SPI_TransmitReceive+0x33c>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002672:	f7fe fdad 	bl	80011d0 <HAL_GetTick>
 8002676:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800267e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002688:	887b      	ldrh	r3, [r7, #2]
 800268a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800268c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002690:	2b01      	cmp	r3, #1
 8002692:	d00f      	beq.n	80026b4 <HAL_SPI_TransmitReceive+0x70>
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800269a:	d107      	bne.n	80026ac <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d103      	bne.n	80026ac <HAL_SPI_TransmitReceive+0x68>
 80026a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026a8:	2b04      	cmp	r3, #4
 80026aa:	d003      	beq.n	80026b4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80026ac:	2302      	movs	r3, #2
 80026ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80026b2:	e15b      	b.n	800296c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d005      	beq.n	80026c6 <HAL_SPI_TransmitReceive+0x82>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <HAL_SPI_TransmitReceive+0x82>
 80026c0:	887b      	ldrh	r3, [r7, #2]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d103      	bne.n	80026ce <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80026cc:	e14e      	b.n	800296c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d003      	beq.n	80026e2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2205      	movs	r2, #5
 80026de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	887a      	ldrh	r2, [r7, #2]
 80026f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	887a      	ldrh	r2, [r7, #2]
 80026f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	68ba      	ldr	r2, [r7, #8]
 80026fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	887a      	ldrh	r2, [r7, #2]
 8002704:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	887a      	ldrh	r2, [r7, #2]
 800270a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002722:	2b40      	cmp	r3, #64	; 0x40
 8002724:	d007      	beq.n	8002736 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002734:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800273e:	d178      	bne.n	8002832 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d002      	beq.n	800274e <HAL_SPI_TransmitReceive+0x10a>
 8002748:	8b7b      	ldrh	r3, [r7, #26]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d166      	bne.n	800281c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	881a      	ldrh	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	1c9a      	adds	r2, r3, #2
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002768:	b29b      	uxth	r3, r3
 800276a:	3b01      	subs	r3, #1
 800276c:	b29a      	uxth	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002772:	e053      	b.n	800281c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b02      	cmp	r3, #2
 8002780:	d11b      	bne.n	80027ba <HAL_SPI_TransmitReceive+0x176>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002786:	b29b      	uxth	r3, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	d016      	beq.n	80027ba <HAL_SPI_TransmitReceive+0x176>
 800278c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278e:	2b01      	cmp	r3, #1
 8002790:	d113      	bne.n	80027ba <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	881a      	ldrh	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	1c9a      	adds	r2, r3, #2
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	3b01      	subs	r3, #1
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d119      	bne.n	80027fc <HAL_SPI_TransmitReceive+0x1b8>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d014      	beq.n	80027fc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68da      	ldr	r2, [r3, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027dc:	b292      	uxth	r2, r2
 80027de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e4:	1c9a      	adds	r2, r3, #2
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	3b01      	subs	r3, #1
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027f8:	2301      	movs	r3, #1
 80027fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80027fc:	f7fe fce8 	bl	80011d0 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002808:	429a      	cmp	r2, r3
 800280a:	d807      	bhi.n	800281c <HAL_SPI_TransmitReceive+0x1d8>
 800280c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800280e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002812:	d003      	beq.n	800281c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800281a:	e0a7      	b.n	800296c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002820:	b29b      	uxth	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1a6      	bne.n	8002774 <HAL_SPI_TransmitReceive+0x130>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800282a:	b29b      	uxth	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1a1      	bne.n	8002774 <HAL_SPI_TransmitReceive+0x130>
 8002830:	e07c      	b.n	800292c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <HAL_SPI_TransmitReceive+0x1fc>
 800283a:	8b7b      	ldrh	r3, [r7, #26]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d16b      	bne.n	8002918 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	330c      	adds	r3, #12
 800284a:	7812      	ldrb	r2, [r2, #0]
 800284c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800285c:	b29b      	uxth	r3, r3
 800285e:	3b01      	subs	r3, #1
 8002860:	b29a      	uxth	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002866:	e057      	b.n	8002918 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b02      	cmp	r3, #2
 8002874:	d11c      	bne.n	80028b0 <HAL_SPI_TransmitReceive+0x26c>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800287a:	b29b      	uxth	r3, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	d017      	beq.n	80028b0 <HAL_SPI_TransmitReceive+0x26c>
 8002880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002882:	2b01      	cmp	r3, #1
 8002884:	d114      	bne.n	80028b0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	330c      	adds	r3, #12
 8002890:	7812      	ldrb	r2, [r2, #0]
 8002892:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002898:	1c5a      	adds	r2, r3, #1
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d119      	bne.n	80028f2 <HAL_SPI_TransmitReceive+0x2ae>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d014      	beq.n	80028f2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	3b01      	subs	r3, #1
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028ee:	2301      	movs	r3, #1
 80028f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80028f2:	f7fe fc6d 	bl	80011d0 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028fe:	429a      	cmp	r2, r3
 8002900:	d803      	bhi.n	800290a <HAL_SPI_TransmitReceive+0x2c6>
 8002902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002908:	d102      	bne.n	8002910 <HAL_SPI_TransmitReceive+0x2cc>
 800290a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800290c:	2b00      	cmp	r3, #0
 800290e:	d103      	bne.n	8002918 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002916:	e029      	b.n	800296c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800291c:	b29b      	uxth	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1a2      	bne.n	8002868 <HAL_SPI_TransmitReceive+0x224>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002926:	b29b      	uxth	r3, r3
 8002928:	2b00      	cmp	r3, #0
 800292a:	d19d      	bne.n	8002868 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800292c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800292e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 f917 	bl	8002b64 <SPI_EndRxTxTransaction>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d006      	beq.n	800294a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2220      	movs	r2, #32
 8002946:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002948:	e010      	b.n	800296c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10b      	bne.n	800296a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	617b      	str	r3, [r7, #20]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	617b      	str	r3, [r7, #20]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	e000      	b.n	800296c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800296a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800297c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002980:	4618      	mov	r0, r3
 8002982:	3730      	adds	r7, #48	; 0x30
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b088      	sub	sp, #32
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	603b      	str	r3, [r7, #0]
 8002994:	4613      	mov	r3, r2
 8002996:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002998:	f7fe fc1a 	bl	80011d0 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a0:	1a9b      	subs	r3, r3, r2
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	4413      	add	r3, r2
 80029a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80029a8:	f7fe fc12 	bl	80011d0 <HAL_GetTick>
 80029ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80029ae:	4b39      	ldr	r3, [pc, #228]	; (8002a94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	015b      	lsls	r3, r3, #5
 80029b4:	0d1b      	lsrs	r3, r3, #20
 80029b6:	69fa      	ldr	r2, [r7, #28]
 80029b8:	fb02 f303 	mul.w	r3, r2, r3
 80029bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029be:	e054      	b.n	8002a6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c6:	d050      	beq.n	8002a6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80029c8:	f7fe fc02 	bl	80011d0 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	69fa      	ldr	r2, [r7, #28]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d902      	bls.n	80029de <SPI_WaitFlagStateUntilTimeout+0x56>
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d13d      	bne.n	8002a5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80029ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029f6:	d111      	bne.n	8002a1c <SPI_WaitFlagStateUntilTimeout+0x94>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a00:	d004      	beq.n	8002a0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a0a:	d107      	bne.n	8002a1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a24:	d10f      	bne.n	8002a46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e017      	b.n	8002a8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	4013      	ands	r3, r2
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	bf0c      	ite	eq
 8002a7a:	2301      	moveq	r3, #1
 8002a7c:	2300      	movne	r3, #0
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	461a      	mov	r2, r3
 8002a82:	79fb      	ldrb	r3, [r7, #7]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d19b      	bne.n	80029c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3720      	adds	r7, #32
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	20000000 	.word	0x20000000

08002a98 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af02      	add	r7, sp, #8
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002aac:	d111      	bne.n	8002ad2 <SPI_EndRxTransaction+0x3a>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ab6:	d004      	beq.n	8002ac2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ac0:	d107      	bne.n	8002ad2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ad0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ada:	d12a      	bne.n	8002b32 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ae4:	d012      	beq.n	8002b0c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2200      	movs	r2, #0
 8002aee:	2180      	movs	r1, #128	; 0x80
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f7ff ff49 	bl	8002988 <SPI_WaitFlagStateUntilTimeout>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d02d      	beq.n	8002b58 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b00:	f043 0220 	orr.w	r2, r3, #32
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e026      	b.n	8002b5a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	2200      	movs	r2, #0
 8002b14:	2101      	movs	r1, #1
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f7ff ff36 	bl	8002988 <SPI_WaitFlagStateUntilTimeout>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d01a      	beq.n	8002b58 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b26:	f043 0220 	orr.w	r2, r3, #32
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e013      	b.n	8002b5a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f7ff ff23 	bl	8002988 <SPI_WaitFlagStateUntilTimeout>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d007      	beq.n	8002b58 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4c:	f043 0220 	orr.w	r2, r3, #32
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e000      	b.n	8002b5a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
	...

08002b64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af02      	add	r7, sp, #8
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002b70:	4b1b      	ldr	r3, [pc, #108]	; (8002be0 <SPI_EndRxTxTransaction+0x7c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a1b      	ldr	r2, [pc, #108]	; (8002be4 <SPI_EndRxTxTransaction+0x80>)
 8002b76:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7a:	0d5b      	lsrs	r3, r3, #21
 8002b7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b80:	fb02 f303 	mul.w	r3, r2, r3
 8002b84:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b8e:	d112      	bne.n	8002bb6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2200      	movs	r2, #0
 8002b98:	2180      	movs	r1, #128	; 0x80
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f7ff fef4 	bl	8002988 <SPI_WaitFlagStateUntilTimeout>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d016      	beq.n	8002bd4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002baa:	f043 0220 	orr.w	r2, r3, #32
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e00f      	b.n	8002bd6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00a      	beq.n	8002bd2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bcc:	2b80      	cmp	r3, #128	; 0x80
 8002bce:	d0f2      	beq.n	8002bb6 <SPI_EndRxTxTransaction+0x52>
 8002bd0:	e000      	b.n	8002bd4 <SPI_EndRxTxTransaction+0x70>
        break;
 8002bd2:	bf00      	nop
  }

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	20000000 	.word	0x20000000
 8002be4:	165e9f81 	.word	0x165e9f81

08002be8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e03f      	b.n	8002c7a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d106      	bne.n	8002c14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7fe fa06 	bl	8001020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2224      	movs	r2, #36	; 0x24
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68da      	ldr	r2, [r3, #12]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f9cb 	bl	8002fc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	691a      	ldr	r2, [r3, #16]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695a      	ldr	r2, [r3, #20]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68da      	ldr	r2, [r3, #12]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2220      	movs	r2, #32
 8002c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b08a      	sub	sp, #40	; 0x28
 8002c86:	af02      	add	r7, sp, #8
 8002c88:	60f8      	str	r0, [r7, #12]
 8002c8a:	60b9      	str	r1, [r7, #8]
 8002c8c:	603b      	str	r3, [r7, #0]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b20      	cmp	r3, #32
 8002ca0:	d17c      	bne.n	8002d9c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d002      	beq.n	8002cae <HAL_UART_Transmit+0x2c>
 8002ca8:	88fb      	ldrh	r3, [r7, #6]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e075      	b.n	8002d9e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d101      	bne.n	8002cc0 <HAL_UART_Transmit+0x3e>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e06e      	b.n	8002d9e <HAL_UART_Transmit+0x11c>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2221      	movs	r2, #33	; 0x21
 8002cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cd6:	f7fe fa7b 	bl	80011d0 <HAL_GetTick>
 8002cda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	88fa      	ldrh	r2, [r7, #6]
 8002ce0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	88fa      	ldrh	r2, [r7, #6]
 8002ce6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cf0:	d108      	bne.n	8002d04 <HAL_UART_Transmit+0x82>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d104      	bne.n	8002d04 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	61bb      	str	r3, [r7, #24]
 8002d02:	e003      	b.n	8002d0c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d14:	e02a      	b.n	8002d6c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	2180      	movs	r1, #128	; 0x80
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 f8e2 	bl	8002eea <UART_WaitOnFlagUntilTimeout>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e036      	b.n	8002d9e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10b      	bne.n	8002d4e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	881b      	ldrh	r3, [r3, #0]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	3302      	adds	r3, #2
 8002d4a:	61bb      	str	r3, [r7, #24]
 8002d4c:	e007      	b.n	8002d5e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	781a      	ldrb	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1cf      	bne.n	8002d16 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	2140      	movs	r1, #64	; 0x40
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f000 f8b2 	bl	8002eea <UART_WaitOnFlagUntilTimeout>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e006      	b.n	8002d9e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	e000      	b.n	8002d9e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d9c:	2302      	movs	r3, #2
  }
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3720      	adds	r7, #32
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b08a      	sub	sp, #40	; 0x28
 8002daa:	af02      	add	r7, sp, #8
 8002dac:	60f8      	str	r0, [r7, #12]
 8002dae:	60b9      	str	r1, [r7, #8]
 8002db0:	603b      	str	r3, [r7, #0]
 8002db2:	4613      	mov	r3, r2
 8002db4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b20      	cmp	r3, #32
 8002dc4:	f040 808c 	bne.w	8002ee0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d002      	beq.n	8002dd4 <HAL_UART_Receive+0x2e>
 8002dce:	88fb      	ldrh	r3, [r7, #6]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e084      	b.n	8002ee2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d101      	bne.n	8002de6 <HAL_UART_Receive+0x40>
 8002de2:	2302      	movs	r3, #2
 8002de4:	e07d      	b.n	8002ee2 <HAL_UART_Receive+0x13c>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2222      	movs	r2, #34	; 0x22
 8002df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e02:	f7fe f9e5 	bl	80011d0 <HAL_GetTick>
 8002e06:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	88fa      	ldrh	r2, [r7, #6]
 8002e0c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	88fa      	ldrh	r2, [r7, #6]
 8002e12:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e1c:	d108      	bne.n	8002e30 <HAL_UART_Receive+0x8a>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d104      	bne.n	8002e30 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	61bb      	str	r3, [r7, #24]
 8002e2e:	e003      	b.n	8002e38 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002e40:	e043      	b.n	8002eca <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	2120      	movs	r1, #32
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f000 f84c 	bl	8002eea <UART_WaitOnFlagUntilTimeout>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e042      	b.n	8002ee2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10c      	bne.n	8002e7c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	3302      	adds	r3, #2
 8002e78:	61bb      	str	r3, [r7, #24]
 8002e7a:	e01f      	b.n	8002ebc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e84:	d007      	beq.n	8002e96 <HAL_UART_Receive+0xf0>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10a      	bne.n	8002ea4 <HAL_UART_Receive+0xfe>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d106      	bne.n	8002ea4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	701a      	strb	r2, [r3, #0]
 8002ea2:	e008      	b.n	8002eb6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1b6      	bne.n	8002e42 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002edc:	2300      	movs	r3, #0
 8002ede:	e000      	b.n	8002ee2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002ee0:	2302      	movs	r3, #2
  }
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3720      	adds	r7, #32
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b090      	sub	sp, #64	; 0x40
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	60f8      	str	r0, [r7, #12]
 8002ef2:	60b9      	str	r1, [r7, #8]
 8002ef4:	603b      	str	r3, [r7, #0]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002efa:	e050      	b.n	8002f9e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002efc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f02:	d04c      	beq.n	8002f9e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d007      	beq.n	8002f1a <UART_WaitOnFlagUntilTimeout+0x30>
 8002f0a:	f7fe f961 	bl	80011d0 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d241      	bcs.n	8002f9e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	330c      	adds	r3, #12
 8002f20:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f24:	e853 3f00 	ldrex	r3, [r3]
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	330c      	adds	r3, #12
 8002f38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f3a:	637a      	str	r2, [r7, #52]	; 0x34
 8002f3c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f42:	e841 2300 	strex	r3, r2, [r1]
 8002f46:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1e5      	bne.n	8002f1a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	3314      	adds	r3, #20
 8002f54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	e853 3f00 	ldrex	r3, [r3]
 8002f5c:	613b      	str	r3, [r7, #16]
   return(result);
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	f023 0301 	bic.w	r3, r3, #1
 8002f64:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	3314      	adds	r3, #20
 8002f6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f6e:	623a      	str	r2, [r7, #32]
 8002f70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f72:	69f9      	ldr	r1, [r7, #28]
 8002f74:	6a3a      	ldr	r2, [r7, #32]
 8002f76:	e841 2300 	strex	r3, r2, [r1]
 8002f7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1e5      	bne.n	8002f4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2220      	movs	r2, #32
 8002f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e00f      	b.n	8002fbe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	bf0c      	ite	eq
 8002fae:	2301      	moveq	r3, #1
 8002fb0:	2300      	movne	r3, #0
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	79fb      	ldrb	r3, [r7, #7]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d09f      	beq.n	8002efc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3740      	adds	r7, #64	; 0x40
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
	...

08002fc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fcc:	b0c0      	sub	sp, #256	; 0x100
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe4:	68d9      	ldr	r1, [r3, #12]
 8002fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	ea40 0301 	orr.w	r3, r0, r1
 8002ff0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	431a      	orrs	r2, r3
 8003000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	431a      	orrs	r2, r3
 8003008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	4313      	orrs	r3, r2
 8003010:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003020:	f021 010c 	bic.w	r1, r1, #12
 8003024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800302e:	430b      	orrs	r3, r1
 8003030:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800303e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003042:	6999      	ldr	r1, [r3, #24]
 8003044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	ea40 0301 	orr.w	r3, r0, r1
 800304e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	4b8f      	ldr	r3, [pc, #572]	; (8003294 <UART_SetConfig+0x2cc>)
 8003058:	429a      	cmp	r2, r3
 800305a:	d005      	beq.n	8003068 <UART_SetConfig+0xa0>
 800305c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	4b8d      	ldr	r3, [pc, #564]	; (8003298 <UART_SetConfig+0x2d0>)
 8003064:	429a      	cmp	r2, r3
 8003066:	d104      	bne.n	8003072 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003068:	f7ff f802 	bl	8002070 <HAL_RCC_GetPCLK2Freq>
 800306c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003070:	e003      	b.n	800307a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003072:	f7fe ffe9 	bl	8002048 <HAL_RCC_GetPCLK1Freq>
 8003076:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800307a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003084:	f040 810c 	bne.w	80032a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003088:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800308c:	2200      	movs	r2, #0
 800308e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003092:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003096:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800309a:	4622      	mov	r2, r4
 800309c:	462b      	mov	r3, r5
 800309e:	1891      	adds	r1, r2, r2
 80030a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80030a2:	415b      	adcs	r3, r3
 80030a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80030aa:	4621      	mov	r1, r4
 80030ac:	eb12 0801 	adds.w	r8, r2, r1
 80030b0:	4629      	mov	r1, r5
 80030b2:	eb43 0901 	adc.w	r9, r3, r1
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	f04f 0300 	mov.w	r3, #0
 80030be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030ca:	4690      	mov	r8, r2
 80030cc:	4699      	mov	r9, r3
 80030ce:	4623      	mov	r3, r4
 80030d0:	eb18 0303 	adds.w	r3, r8, r3
 80030d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80030d8:	462b      	mov	r3, r5
 80030da:	eb49 0303 	adc.w	r3, r9, r3
 80030de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80030e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80030ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80030f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80030f6:	460b      	mov	r3, r1
 80030f8:	18db      	adds	r3, r3, r3
 80030fa:	653b      	str	r3, [r7, #80]	; 0x50
 80030fc:	4613      	mov	r3, r2
 80030fe:	eb42 0303 	adc.w	r3, r2, r3
 8003102:	657b      	str	r3, [r7, #84]	; 0x54
 8003104:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003108:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800310c:	f7fd f8c8 	bl	80002a0 <__aeabi_uldivmod>
 8003110:	4602      	mov	r2, r0
 8003112:	460b      	mov	r3, r1
 8003114:	4b61      	ldr	r3, [pc, #388]	; (800329c <UART_SetConfig+0x2d4>)
 8003116:	fba3 2302 	umull	r2, r3, r3, r2
 800311a:	095b      	lsrs	r3, r3, #5
 800311c:	011c      	lsls	r4, r3, #4
 800311e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003122:	2200      	movs	r2, #0
 8003124:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003128:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800312c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003130:	4642      	mov	r2, r8
 8003132:	464b      	mov	r3, r9
 8003134:	1891      	adds	r1, r2, r2
 8003136:	64b9      	str	r1, [r7, #72]	; 0x48
 8003138:	415b      	adcs	r3, r3
 800313a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800313c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003140:	4641      	mov	r1, r8
 8003142:	eb12 0a01 	adds.w	sl, r2, r1
 8003146:	4649      	mov	r1, r9
 8003148:	eb43 0b01 	adc.w	fp, r3, r1
 800314c:	f04f 0200 	mov.w	r2, #0
 8003150:	f04f 0300 	mov.w	r3, #0
 8003154:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003158:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800315c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003160:	4692      	mov	sl, r2
 8003162:	469b      	mov	fp, r3
 8003164:	4643      	mov	r3, r8
 8003166:	eb1a 0303 	adds.w	r3, sl, r3
 800316a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800316e:	464b      	mov	r3, r9
 8003170:	eb4b 0303 	adc.w	r3, fp, r3
 8003174:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003184:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003188:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800318c:	460b      	mov	r3, r1
 800318e:	18db      	adds	r3, r3, r3
 8003190:	643b      	str	r3, [r7, #64]	; 0x40
 8003192:	4613      	mov	r3, r2
 8003194:	eb42 0303 	adc.w	r3, r2, r3
 8003198:	647b      	str	r3, [r7, #68]	; 0x44
 800319a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800319e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80031a2:	f7fd f87d 	bl	80002a0 <__aeabi_uldivmod>
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	4611      	mov	r1, r2
 80031ac:	4b3b      	ldr	r3, [pc, #236]	; (800329c <UART_SetConfig+0x2d4>)
 80031ae:	fba3 2301 	umull	r2, r3, r3, r1
 80031b2:	095b      	lsrs	r3, r3, #5
 80031b4:	2264      	movs	r2, #100	; 0x64
 80031b6:	fb02 f303 	mul.w	r3, r2, r3
 80031ba:	1acb      	subs	r3, r1, r3
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80031c2:	4b36      	ldr	r3, [pc, #216]	; (800329c <UART_SetConfig+0x2d4>)
 80031c4:	fba3 2302 	umull	r2, r3, r3, r2
 80031c8:	095b      	lsrs	r3, r3, #5
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031d0:	441c      	add	r4, r3
 80031d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031d6:	2200      	movs	r2, #0
 80031d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80031dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80031e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80031e4:	4642      	mov	r2, r8
 80031e6:	464b      	mov	r3, r9
 80031e8:	1891      	adds	r1, r2, r2
 80031ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80031ec:	415b      	adcs	r3, r3
 80031ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80031f4:	4641      	mov	r1, r8
 80031f6:	1851      	adds	r1, r2, r1
 80031f8:	6339      	str	r1, [r7, #48]	; 0x30
 80031fa:	4649      	mov	r1, r9
 80031fc:	414b      	adcs	r3, r1
 80031fe:	637b      	str	r3, [r7, #52]	; 0x34
 8003200:	f04f 0200 	mov.w	r2, #0
 8003204:	f04f 0300 	mov.w	r3, #0
 8003208:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800320c:	4659      	mov	r1, fp
 800320e:	00cb      	lsls	r3, r1, #3
 8003210:	4651      	mov	r1, sl
 8003212:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003216:	4651      	mov	r1, sl
 8003218:	00ca      	lsls	r2, r1, #3
 800321a:	4610      	mov	r0, r2
 800321c:	4619      	mov	r1, r3
 800321e:	4603      	mov	r3, r0
 8003220:	4642      	mov	r2, r8
 8003222:	189b      	adds	r3, r3, r2
 8003224:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003228:	464b      	mov	r3, r9
 800322a:	460a      	mov	r2, r1
 800322c:	eb42 0303 	adc.w	r3, r2, r3
 8003230:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003240:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003244:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003248:	460b      	mov	r3, r1
 800324a:	18db      	adds	r3, r3, r3
 800324c:	62bb      	str	r3, [r7, #40]	; 0x28
 800324e:	4613      	mov	r3, r2
 8003250:	eb42 0303 	adc.w	r3, r2, r3
 8003254:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003256:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800325a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800325e:	f7fd f81f 	bl	80002a0 <__aeabi_uldivmod>
 8003262:	4602      	mov	r2, r0
 8003264:	460b      	mov	r3, r1
 8003266:	4b0d      	ldr	r3, [pc, #52]	; (800329c <UART_SetConfig+0x2d4>)
 8003268:	fba3 1302 	umull	r1, r3, r3, r2
 800326c:	095b      	lsrs	r3, r3, #5
 800326e:	2164      	movs	r1, #100	; 0x64
 8003270:	fb01 f303 	mul.w	r3, r1, r3
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	3332      	adds	r3, #50	; 0x32
 800327a:	4a08      	ldr	r2, [pc, #32]	; (800329c <UART_SetConfig+0x2d4>)
 800327c:	fba2 2303 	umull	r2, r3, r2, r3
 8003280:	095b      	lsrs	r3, r3, #5
 8003282:	f003 0207 	and.w	r2, r3, #7
 8003286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4422      	add	r2, r4
 800328e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003290:	e105      	b.n	800349e <UART_SetConfig+0x4d6>
 8003292:	bf00      	nop
 8003294:	40011000 	.word	0x40011000
 8003298:	40011400 	.word	0x40011400
 800329c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032a4:	2200      	movs	r2, #0
 80032a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80032aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80032ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80032b2:	4642      	mov	r2, r8
 80032b4:	464b      	mov	r3, r9
 80032b6:	1891      	adds	r1, r2, r2
 80032b8:	6239      	str	r1, [r7, #32]
 80032ba:	415b      	adcs	r3, r3
 80032bc:	627b      	str	r3, [r7, #36]	; 0x24
 80032be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032c2:	4641      	mov	r1, r8
 80032c4:	1854      	adds	r4, r2, r1
 80032c6:	4649      	mov	r1, r9
 80032c8:	eb43 0501 	adc.w	r5, r3, r1
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	f04f 0300 	mov.w	r3, #0
 80032d4:	00eb      	lsls	r3, r5, #3
 80032d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032da:	00e2      	lsls	r2, r4, #3
 80032dc:	4614      	mov	r4, r2
 80032de:	461d      	mov	r5, r3
 80032e0:	4643      	mov	r3, r8
 80032e2:	18e3      	adds	r3, r4, r3
 80032e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80032e8:	464b      	mov	r3, r9
 80032ea:	eb45 0303 	adc.w	r3, r5, r3
 80032ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80032f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003302:	f04f 0200 	mov.w	r2, #0
 8003306:	f04f 0300 	mov.w	r3, #0
 800330a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800330e:	4629      	mov	r1, r5
 8003310:	008b      	lsls	r3, r1, #2
 8003312:	4621      	mov	r1, r4
 8003314:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003318:	4621      	mov	r1, r4
 800331a:	008a      	lsls	r2, r1, #2
 800331c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003320:	f7fc ffbe 	bl	80002a0 <__aeabi_uldivmod>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	4b60      	ldr	r3, [pc, #384]	; (80034ac <UART_SetConfig+0x4e4>)
 800332a:	fba3 2302 	umull	r2, r3, r3, r2
 800332e:	095b      	lsrs	r3, r3, #5
 8003330:	011c      	lsls	r4, r3, #4
 8003332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003336:	2200      	movs	r2, #0
 8003338:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800333c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003340:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003344:	4642      	mov	r2, r8
 8003346:	464b      	mov	r3, r9
 8003348:	1891      	adds	r1, r2, r2
 800334a:	61b9      	str	r1, [r7, #24]
 800334c:	415b      	adcs	r3, r3
 800334e:	61fb      	str	r3, [r7, #28]
 8003350:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003354:	4641      	mov	r1, r8
 8003356:	1851      	adds	r1, r2, r1
 8003358:	6139      	str	r1, [r7, #16]
 800335a:	4649      	mov	r1, r9
 800335c:	414b      	adcs	r3, r1
 800335e:	617b      	str	r3, [r7, #20]
 8003360:	f04f 0200 	mov.w	r2, #0
 8003364:	f04f 0300 	mov.w	r3, #0
 8003368:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800336c:	4659      	mov	r1, fp
 800336e:	00cb      	lsls	r3, r1, #3
 8003370:	4651      	mov	r1, sl
 8003372:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003376:	4651      	mov	r1, sl
 8003378:	00ca      	lsls	r2, r1, #3
 800337a:	4610      	mov	r0, r2
 800337c:	4619      	mov	r1, r3
 800337e:	4603      	mov	r3, r0
 8003380:	4642      	mov	r2, r8
 8003382:	189b      	adds	r3, r3, r2
 8003384:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003388:	464b      	mov	r3, r9
 800338a:	460a      	mov	r2, r1
 800338c:	eb42 0303 	adc.w	r3, r2, r3
 8003390:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	67bb      	str	r3, [r7, #120]	; 0x78
 800339e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80033a0:	f04f 0200 	mov.w	r2, #0
 80033a4:	f04f 0300 	mov.w	r3, #0
 80033a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80033ac:	4649      	mov	r1, r9
 80033ae:	008b      	lsls	r3, r1, #2
 80033b0:	4641      	mov	r1, r8
 80033b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033b6:	4641      	mov	r1, r8
 80033b8:	008a      	lsls	r2, r1, #2
 80033ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80033be:	f7fc ff6f 	bl	80002a0 <__aeabi_uldivmod>
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	4b39      	ldr	r3, [pc, #228]	; (80034ac <UART_SetConfig+0x4e4>)
 80033c8:	fba3 1302 	umull	r1, r3, r3, r2
 80033cc:	095b      	lsrs	r3, r3, #5
 80033ce:	2164      	movs	r1, #100	; 0x64
 80033d0:	fb01 f303 	mul.w	r3, r1, r3
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	3332      	adds	r3, #50	; 0x32
 80033da:	4a34      	ldr	r2, [pc, #208]	; (80034ac <UART_SetConfig+0x4e4>)
 80033dc:	fba2 2303 	umull	r2, r3, r2, r3
 80033e0:	095b      	lsrs	r3, r3, #5
 80033e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033e6:	441c      	add	r4, r3
 80033e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033ec:	2200      	movs	r2, #0
 80033ee:	673b      	str	r3, [r7, #112]	; 0x70
 80033f0:	677a      	str	r2, [r7, #116]	; 0x74
 80033f2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80033f6:	4642      	mov	r2, r8
 80033f8:	464b      	mov	r3, r9
 80033fa:	1891      	adds	r1, r2, r2
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	415b      	adcs	r3, r3
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003406:	4641      	mov	r1, r8
 8003408:	1851      	adds	r1, r2, r1
 800340a:	6039      	str	r1, [r7, #0]
 800340c:	4649      	mov	r1, r9
 800340e:	414b      	adcs	r3, r1
 8003410:	607b      	str	r3, [r7, #4]
 8003412:	f04f 0200 	mov.w	r2, #0
 8003416:	f04f 0300 	mov.w	r3, #0
 800341a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800341e:	4659      	mov	r1, fp
 8003420:	00cb      	lsls	r3, r1, #3
 8003422:	4651      	mov	r1, sl
 8003424:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003428:	4651      	mov	r1, sl
 800342a:	00ca      	lsls	r2, r1, #3
 800342c:	4610      	mov	r0, r2
 800342e:	4619      	mov	r1, r3
 8003430:	4603      	mov	r3, r0
 8003432:	4642      	mov	r2, r8
 8003434:	189b      	adds	r3, r3, r2
 8003436:	66bb      	str	r3, [r7, #104]	; 0x68
 8003438:	464b      	mov	r3, r9
 800343a:	460a      	mov	r2, r1
 800343c:	eb42 0303 	adc.w	r3, r2, r3
 8003440:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	663b      	str	r3, [r7, #96]	; 0x60
 800344c:	667a      	str	r2, [r7, #100]	; 0x64
 800344e:	f04f 0200 	mov.w	r2, #0
 8003452:	f04f 0300 	mov.w	r3, #0
 8003456:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800345a:	4649      	mov	r1, r9
 800345c:	008b      	lsls	r3, r1, #2
 800345e:	4641      	mov	r1, r8
 8003460:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003464:	4641      	mov	r1, r8
 8003466:	008a      	lsls	r2, r1, #2
 8003468:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800346c:	f7fc ff18 	bl	80002a0 <__aeabi_uldivmod>
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	4b0d      	ldr	r3, [pc, #52]	; (80034ac <UART_SetConfig+0x4e4>)
 8003476:	fba3 1302 	umull	r1, r3, r3, r2
 800347a:	095b      	lsrs	r3, r3, #5
 800347c:	2164      	movs	r1, #100	; 0x64
 800347e:	fb01 f303 	mul.w	r3, r1, r3
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	011b      	lsls	r3, r3, #4
 8003486:	3332      	adds	r3, #50	; 0x32
 8003488:	4a08      	ldr	r2, [pc, #32]	; (80034ac <UART_SetConfig+0x4e4>)
 800348a:	fba2 2303 	umull	r2, r3, r2, r3
 800348e:	095b      	lsrs	r3, r3, #5
 8003490:	f003 020f 	and.w	r2, r3, #15
 8003494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4422      	add	r2, r4
 800349c:	609a      	str	r2, [r3, #8]
}
 800349e:	bf00      	nop
 80034a0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80034a4:	46bd      	mov	sp, r7
 80034a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034aa:	bf00      	nop
 80034ac:	51eb851f 	.word	0x51eb851f

080034b0 <__errno>:
 80034b0:	4b01      	ldr	r3, [pc, #4]	; (80034b8 <__errno+0x8>)
 80034b2:	6818      	ldr	r0, [r3, #0]
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	2000000c 	.word	0x2000000c

080034bc <__libc_init_array>:
 80034bc:	b570      	push	{r4, r5, r6, lr}
 80034be:	4d0d      	ldr	r5, [pc, #52]	; (80034f4 <__libc_init_array+0x38>)
 80034c0:	4c0d      	ldr	r4, [pc, #52]	; (80034f8 <__libc_init_array+0x3c>)
 80034c2:	1b64      	subs	r4, r4, r5
 80034c4:	10a4      	asrs	r4, r4, #2
 80034c6:	2600      	movs	r6, #0
 80034c8:	42a6      	cmp	r6, r4
 80034ca:	d109      	bne.n	80034e0 <__libc_init_array+0x24>
 80034cc:	4d0b      	ldr	r5, [pc, #44]	; (80034fc <__libc_init_array+0x40>)
 80034ce:	4c0c      	ldr	r4, [pc, #48]	; (8003500 <__libc_init_array+0x44>)
 80034d0:	f001 f95e 	bl	8004790 <_init>
 80034d4:	1b64      	subs	r4, r4, r5
 80034d6:	10a4      	asrs	r4, r4, #2
 80034d8:	2600      	movs	r6, #0
 80034da:	42a6      	cmp	r6, r4
 80034dc:	d105      	bne.n	80034ea <__libc_init_array+0x2e>
 80034de:	bd70      	pop	{r4, r5, r6, pc}
 80034e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80034e4:	4798      	blx	r3
 80034e6:	3601      	adds	r6, #1
 80034e8:	e7ee      	b.n	80034c8 <__libc_init_array+0xc>
 80034ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80034ee:	4798      	blx	r3
 80034f0:	3601      	adds	r6, #1
 80034f2:	e7f2      	b.n	80034da <__libc_init_array+0x1e>
 80034f4:	08004c38 	.word	0x08004c38
 80034f8:	08004c38 	.word	0x08004c38
 80034fc:	08004c38 	.word	0x08004c38
 8003500:	08004c3c 	.word	0x08004c3c

08003504 <memset>:
 8003504:	4402      	add	r2, r0
 8003506:	4603      	mov	r3, r0
 8003508:	4293      	cmp	r3, r2
 800350a:	d100      	bne.n	800350e <memset+0xa>
 800350c:	4770      	bx	lr
 800350e:	f803 1b01 	strb.w	r1, [r3], #1
 8003512:	e7f9      	b.n	8003508 <memset+0x4>

08003514 <sniprintf>:
 8003514:	b40c      	push	{r2, r3}
 8003516:	b530      	push	{r4, r5, lr}
 8003518:	4b17      	ldr	r3, [pc, #92]	; (8003578 <sniprintf+0x64>)
 800351a:	1e0c      	subs	r4, r1, #0
 800351c:	681d      	ldr	r5, [r3, #0]
 800351e:	b09d      	sub	sp, #116	; 0x74
 8003520:	da08      	bge.n	8003534 <sniprintf+0x20>
 8003522:	238b      	movs	r3, #139	; 0x8b
 8003524:	602b      	str	r3, [r5, #0]
 8003526:	f04f 30ff 	mov.w	r0, #4294967295
 800352a:	b01d      	add	sp, #116	; 0x74
 800352c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003530:	b002      	add	sp, #8
 8003532:	4770      	bx	lr
 8003534:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003538:	f8ad 3014 	strh.w	r3, [sp, #20]
 800353c:	bf14      	ite	ne
 800353e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003542:	4623      	moveq	r3, r4
 8003544:	9304      	str	r3, [sp, #16]
 8003546:	9307      	str	r3, [sp, #28]
 8003548:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800354c:	9002      	str	r0, [sp, #8]
 800354e:	9006      	str	r0, [sp, #24]
 8003550:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003554:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003556:	ab21      	add	r3, sp, #132	; 0x84
 8003558:	a902      	add	r1, sp, #8
 800355a:	4628      	mov	r0, r5
 800355c:	9301      	str	r3, [sp, #4]
 800355e:	f000 f897 	bl	8003690 <_svfiprintf_r>
 8003562:	1c43      	adds	r3, r0, #1
 8003564:	bfbc      	itt	lt
 8003566:	238b      	movlt	r3, #139	; 0x8b
 8003568:	602b      	strlt	r3, [r5, #0]
 800356a:	2c00      	cmp	r4, #0
 800356c:	d0dd      	beq.n	800352a <sniprintf+0x16>
 800356e:	9b02      	ldr	r3, [sp, #8]
 8003570:	2200      	movs	r2, #0
 8003572:	701a      	strb	r2, [r3, #0]
 8003574:	e7d9      	b.n	800352a <sniprintf+0x16>
 8003576:	bf00      	nop
 8003578:	2000000c 	.word	0x2000000c

0800357c <siscanf>:
 800357c:	b40e      	push	{r1, r2, r3}
 800357e:	b510      	push	{r4, lr}
 8003580:	b09f      	sub	sp, #124	; 0x7c
 8003582:	ac21      	add	r4, sp, #132	; 0x84
 8003584:	f44f 7101 	mov.w	r1, #516	; 0x204
 8003588:	f854 2b04 	ldr.w	r2, [r4], #4
 800358c:	9201      	str	r2, [sp, #4]
 800358e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8003592:	9004      	str	r0, [sp, #16]
 8003594:	9008      	str	r0, [sp, #32]
 8003596:	f7fc fe25 	bl	80001e4 <strlen>
 800359a:	4b0c      	ldr	r3, [pc, #48]	; (80035cc <siscanf+0x50>)
 800359c:	9005      	str	r0, [sp, #20]
 800359e:	9009      	str	r0, [sp, #36]	; 0x24
 80035a0:	930d      	str	r3, [sp, #52]	; 0x34
 80035a2:	480b      	ldr	r0, [pc, #44]	; (80035d0 <siscanf+0x54>)
 80035a4:	9a01      	ldr	r2, [sp, #4]
 80035a6:	6800      	ldr	r0, [r0, #0]
 80035a8:	9403      	str	r4, [sp, #12]
 80035aa:	2300      	movs	r3, #0
 80035ac:	9311      	str	r3, [sp, #68]	; 0x44
 80035ae:	9316      	str	r3, [sp, #88]	; 0x58
 80035b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035b4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80035b8:	a904      	add	r1, sp, #16
 80035ba:	4623      	mov	r3, r4
 80035bc:	f000 f9c2 	bl	8003944 <__ssvfiscanf_r>
 80035c0:	b01f      	add	sp, #124	; 0x7c
 80035c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035c6:	b003      	add	sp, #12
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	080035d5 	.word	0x080035d5
 80035d0:	2000000c 	.word	0x2000000c

080035d4 <__seofread>:
 80035d4:	2000      	movs	r0, #0
 80035d6:	4770      	bx	lr

080035d8 <__ssputs_r>:
 80035d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035dc:	688e      	ldr	r6, [r1, #8]
 80035de:	429e      	cmp	r6, r3
 80035e0:	4682      	mov	sl, r0
 80035e2:	460c      	mov	r4, r1
 80035e4:	4690      	mov	r8, r2
 80035e6:	461f      	mov	r7, r3
 80035e8:	d838      	bhi.n	800365c <__ssputs_r+0x84>
 80035ea:	898a      	ldrh	r2, [r1, #12]
 80035ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80035f0:	d032      	beq.n	8003658 <__ssputs_r+0x80>
 80035f2:	6825      	ldr	r5, [r4, #0]
 80035f4:	6909      	ldr	r1, [r1, #16]
 80035f6:	eba5 0901 	sub.w	r9, r5, r1
 80035fa:	6965      	ldr	r5, [r4, #20]
 80035fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003600:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003604:	3301      	adds	r3, #1
 8003606:	444b      	add	r3, r9
 8003608:	106d      	asrs	r5, r5, #1
 800360a:	429d      	cmp	r5, r3
 800360c:	bf38      	it	cc
 800360e:	461d      	movcc	r5, r3
 8003610:	0553      	lsls	r3, r2, #21
 8003612:	d531      	bpl.n	8003678 <__ssputs_r+0xa0>
 8003614:	4629      	mov	r1, r5
 8003616:	f000 fff3 	bl	8004600 <_malloc_r>
 800361a:	4606      	mov	r6, r0
 800361c:	b950      	cbnz	r0, 8003634 <__ssputs_r+0x5c>
 800361e:	230c      	movs	r3, #12
 8003620:	f8ca 3000 	str.w	r3, [sl]
 8003624:	89a3      	ldrh	r3, [r4, #12]
 8003626:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800362a:	81a3      	strh	r3, [r4, #12]
 800362c:	f04f 30ff 	mov.w	r0, #4294967295
 8003630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003634:	6921      	ldr	r1, [r4, #16]
 8003636:	464a      	mov	r2, r9
 8003638:	f000 ff4e 	bl	80044d8 <memcpy>
 800363c:	89a3      	ldrh	r3, [r4, #12]
 800363e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003646:	81a3      	strh	r3, [r4, #12]
 8003648:	6126      	str	r6, [r4, #16]
 800364a:	6165      	str	r5, [r4, #20]
 800364c:	444e      	add	r6, r9
 800364e:	eba5 0509 	sub.w	r5, r5, r9
 8003652:	6026      	str	r6, [r4, #0]
 8003654:	60a5      	str	r5, [r4, #8]
 8003656:	463e      	mov	r6, r7
 8003658:	42be      	cmp	r6, r7
 800365a:	d900      	bls.n	800365e <__ssputs_r+0x86>
 800365c:	463e      	mov	r6, r7
 800365e:	6820      	ldr	r0, [r4, #0]
 8003660:	4632      	mov	r2, r6
 8003662:	4641      	mov	r1, r8
 8003664:	f000 ff46 	bl	80044f4 <memmove>
 8003668:	68a3      	ldr	r3, [r4, #8]
 800366a:	1b9b      	subs	r3, r3, r6
 800366c:	60a3      	str	r3, [r4, #8]
 800366e:	6823      	ldr	r3, [r4, #0]
 8003670:	4433      	add	r3, r6
 8003672:	6023      	str	r3, [r4, #0]
 8003674:	2000      	movs	r0, #0
 8003676:	e7db      	b.n	8003630 <__ssputs_r+0x58>
 8003678:	462a      	mov	r2, r5
 800367a:	f001 f835 	bl	80046e8 <_realloc_r>
 800367e:	4606      	mov	r6, r0
 8003680:	2800      	cmp	r0, #0
 8003682:	d1e1      	bne.n	8003648 <__ssputs_r+0x70>
 8003684:	6921      	ldr	r1, [r4, #16]
 8003686:	4650      	mov	r0, sl
 8003688:	f000 ff4e 	bl	8004528 <_free_r>
 800368c:	e7c7      	b.n	800361e <__ssputs_r+0x46>
	...

08003690 <_svfiprintf_r>:
 8003690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003694:	4698      	mov	r8, r3
 8003696:	898b      	ldrh	r3, [r1, #12]
 8003698:	061b      	lsls	r3, r3, #24
 800369a:	b09d      	sub	sp, #116	; 0x74
 800369c:	4607      	mov	r7, r0
 800369e:	460d      	mov	r5, r1
 80036a0:	4614      	mov	r4, r2
 80036a2:	d50e      	bpl.n	80036c2 <_svfiprintf_r+0x32>
 80036a4:	690b      	ldr	r3, [r1, #16]
 80036a6:	b963      	cbnz	r3, 80036c2 <_svfiprintf_r+0x32>
 80036a8:	2140      	movs	r1, #64	; 0x40
 80036aa:	f000 ffa9 	bl	8004600 <_malloc_r>
 80036ae:	6028      	str	r0, [r5, #0]
 80036b0:	6128      	str	r0, [r5, #16]
 80036b2:	b920      	cbnz	r0, 80036be <_svfiprintf_r+0x2e>
 80036b4:	230c      	movs	r3, #12
 80036b6:	603b      	str	r3, [r7, #0]
 80036b8:	f04f 30ff 	mov.w	r0, #4294967295
 80036bc:	e0d1      	b.n	8003862 <_svfiprintf_r+0x1d2>
 80036be:	2340      	movs	r3, #64	; 0x40
 80036c0:	616b      	str	r3, [r5, #20]
 80036c2:	2300      	movs	r3, #0
 80036c4:	9309      	str	r3, [sp, #36]	; 0x24
 80036c6:	2320      	movs	r3, #32
 80036c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80036cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80036d0:	2330      	movs	r3, #48	; 0x30
 80036d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800387c <_svfiprintf_r+0x1ec>
 80036d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80036da:	f04f 0901 	mov.w	r9, #1
 80036de:	4623      	mov	r3, r4
 80036e0:	469a      	mov	sl, r3
 80036e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036e6:	b10a      	cbz	r2, 80036ec <_svfiprintf_r+0x5c>
 80036e8:	2a25      	cmp	r2, #37	; 0x25
 80036ea:	d1f9      	bne.n	80036e0 <_svfiprintf_r+0x50>
 80036ec:	ebba 0b04 	subs.w	fp, sl, r4
 80036f0:	d00b      	beq.n	800370a <_svfiprintf_r+0x7a>
 80036f2:	465b      	mov	r3, fp
 80036f4:	4622      	mov	r2, r4
 80036f6:	4629      	mov	r1, r5
 80036f8:	4638      	mov	r0, r7
 80036fa:	f7ff ff6d 	bl	80035d8 <__ssputs_r>
 80036fe:	3001      	adds	r0, #1
 8003700:	f000 80aa 	beq.w	8003858 <_svfiprintf_r+0x1c8>
 8003704:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003706:	445a      	add	r2, fp
 8003708:	9209      	str	r2, [sp, #36]	; 0x24
 800370a:	f89a 3000 	ldrb.w	r3, [sl]
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 80a2 	beq.w	8003858 <_svfiprintf_r+0x1c8>
 8003714:	2300      	movs	r3, #0
 8003716:	f04f 32ff 	mov.w	r2, #4294967295
 800371a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800371e:	f10a 0a01 	add.w	sl, sl, #1
 8003722:	9304      	str	r3, [sp, #16]
 8003724:	9307      	str	r3, [sp, #28]
 8003726:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800372a:	931a      	str	r3, [sp, #104]	; 0x68
 800372c:	4654      	mov	r4, sl
 800372e:	2205      	movs	r2, #5
 8003730:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003734:	4851      	ldr	r0, [pc, #324]	; (800387c <_svfiprintf_r+0x1ec>)
 8003736:	f7fc fd63 	bl	8000200 <memchr>
 800373a:	9a04      	ldr	r2, [sp, #16]
 800373c:	b9d8      	cbnz	r0, 8003776 <_svfiprintf_r+0xe6>
 800373e:	06d0      	lsls	r0, r2, #27
 8003740:	bf44      	itt	mi
 8003742:	2320      	movmi	r3, #32
 8003744:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003748:	0711      	lsls	r1, r2, #28
 800374a:	bf44      	itt	mi
 800374c:	232b      	movmi	r3, #43	; 0x2b
 800374e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003752:	f89a 3000 	ldrb.w	r3, [sl]
 8003756:	2b2a      	cmp	r3, #42	; 0x2a
 8003758:	d015      	beq.n	8003786 <_svfiprintf_r+0xf6>
 800375a:	9a07      	ldr	r2, [sp, #28]
 800375c:	4654      	mov	r4, sl
 800375e:	2000      	movs	r0, #0
 8003760:	f04f 0c0a 	mov.w	ip, #10
 8003764:	4621      	mov	r1, r4
 8003766:	f811 3b01 	ldrb.w	r3, [r1], #1
 800376a:	3b30      	subs	r3, #48	; 0x30
 800376c:	2b09      	cmp	r3, #9
 800376e:	d94e      	bls.n	800380e <_svfiprintf_r+0x17e>
 8003770:	b1b0      	cbz	r0, 80037a0 <_svfiprintf_r+0x110>
 8003772:	9207      	str	r2, [sp, #28]
 8003774:	e014      	b.n	80037a0 <_svfiprintf_r+0x110>
 8003776:	eba0 0308 	sub.w	r3, r0, r8
 800377a:	fa09 f303 	lsl.w	r3, r9, r3
 800377e:	4313      	orrs	r3, r2
 8003780:	9304      	str	r3, [sp, #16]
 8003782:	46a2      	mov	sl, r4
 8003784:	e7d2      	b.n	800372c <_svfiprintf_r+0x9c>
 8003786:	9b03      	ldr	r3, [sp, #12]
 8003788:	1d19      	adds	r1, r3, #4
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	9103      	str	r1, [sp, #12]
 800378e:	2b00      	cmp	r3, #0
 8003790:	bfbb      	ittet	lt
 8003792:	425b      	neglt	r3, r3
 8003794:	f042 0202 	orrlt.w	r2, r2, #2
 8003798:	9307      	strge	r3, [sp, #28]
 800379a:	9307      	strlt	r3, [sp, #28]
 800379c:	bfb8      	it	lt
 800379e:	9204      	strlt	r2, [sp, #16]
 80037a0:	7823      	ldrb	r3, [r4, #0]
 80037a2:	2b2e      	cmp	r3, #46	; 0x2e
 80037a4:	d10c      	bne.n	80037c0 <_svfiprintf_r+0x130>
 80037a6:	7863      	ldrb	r3, [r4, #1]
 80037a8:	2b2a      	cmp	r3, #42	; 0x2a
 80037aa:	d135      	bne.n	8003818 <_svfiprintf_r+0x188>
 80037ac:	9b03      	ldr	r3, [sp, #12]
 80037ae:	1d1a      	adds	r2, r3, #4
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	9203      	str	r2, [sp, #12]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	bfb8      	it	lt
 80037b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80037bc:	3402      	adds	r4, #2
 80037be:	9305      	str	r3, [sp, #20]
 80037c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800388c <_svfiprintf_r+0x1fc>
 80037c4:	7821      	ldrb	r1, [r4, #0]
 80037c6:	2203      	movs	r2, #3
 80037c8:	4650      	mov	r0, sl
 80037ca:	f7fc fd19 	bl	8000200 <memchr>
 80037ce:	b140      	cbz	r0, 80037e2 <_svfiprintf_r+0x152>
 80037d0:	2340      	movs	r3, #64	; 0x40
 80037d2:	eba0 000a 	sub.w	r0, r0, sl
 80037d6:	fa03 f000 	lsl.w	r0, r3, r0
 80037da:	9b04      	ldr	r3, [sp, #16]
 80037dc:	4303      	orrs	r3, r0
 80037de:	3401      	adds	r4, #1
 80037e0:	9304      	str	r3, [sp, #16]
 80037e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037e6:	4826      	ldr	r0, [pc, #152]	; (8003880 <_svfiprintf_r+0x1f0>)
 80037e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80037ec:	2206      	movs	r2, #6
 80037ee:	f7fc fd07 	bl	8000200 <memchr>
 80037f2:	2800      	cmp	r0, #0
 80037f4:	d038      	beq.n	8003868 <_svfiprintf_r+0x1d8>
 80037f6:	4b23      	ldr	r3, [pc, #140]	; (8003884 <_svfiprintf_r+0x1f4>)
 80037f8:	bb1b      	cbnz	r3, 8003842 <_svfiprintf_r+0x1b2>
 80037fa:	9b03      	ldr	r3, [sp, #12]
 80037fc:	3307      	adds	r3, #7
 80037fe:	f023 0307 	bic.w	r3, r3, #7
 8003802:	3308      	adds	r3, #8
 8003804:	9303      	str	r3, [sp, #12]
 8003806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003808:	4433      	add	r3, r6
 800380a:	9309      	str	r3, [sp, #36]	; 0x24
 800380c:	e767      	b.n	80036de <_svfiprintf_r+0x4e>
 800380e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003812:	460c      	mov	r4, r1
 8003814:	2001      	movs	r0, #1
 8003816:	e7a5      	b.n	8003764 <_svfiprintf_r+0xd4>
 8003818:	2300      	movs	r3, #0
 800381a:	3401      	adds	r4, #1
 800381c:	9305      	str	r3, [sp, #20]
 800381e:	4619      	mov	r1, r3
 8003820:	f04f 0c0a 	mov.w	ip, #10
 8003824:	4620      	mov	r0, r4
 8003826:	f810 2b01 	ldrb.w	r2, [r0], #1
 800382a:	3a30      	subs	r2, #48	; 0x30
 800382c:	2a09      	cmp	r2, #9
 800382e:	d903      	bls.n	8003838 <_svfiprintf_r+0x1a8>
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0c5      	beq.n	80037c0 <_svfiprintf_r+0x130>
 8003834:	9105      	str	r1, [sp, #20]
 8003836:	e7c3      	b.n	80037c0 <_svfiprintf_r+0x130>
 8003838:	fb0c 2101 	mla	r1, ip, r1, r2
 800383c:	4604      	mov	r4, r0
 800383e:	2301      	movs	r3, #1
 8003840:	e7f0      	b.n	8003824 <_svfiprintf_r+0x194>
 8003842:	ab03      	add	r3, sp, #12
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	462a      	mov	r2, r5
 8003848:	4b0f      	ldr	r3, [pc, #60]	; (8003888 <_svfiprintf_r+0x1f8>)
 800384a:	a904      	add	r1, sp, #16
 800384c:	4638      	mov	r0, r7
 800384e:	f3af 8000 	nop.w
 8003852:	1c42      	adds	r2, r0, #1
 8003854:	4606      	mov	r6, r0
 8003856:	d1d6      	bne.n	8003806 <_svfiprintf_r+0x176>
 8003858:	89ab      	ldrh	r3, [r5, #12]
 800385a:	065b      	lsls	r3, r3, #25
 800385c:	f53f af2c 	bmi.w	80036b8 <_svfiprintf_r+0x28>
 8003860:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003862:	b01d      	add	sp, #116	; 0x74
 8003864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003868:	ab03      	add	r3, sp, #12
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	462a      	mov	r2, r5
 800386e:	4b06      	ldr	r3, [pc, #24]	; (8003888 <_svfiprintf_r+0x1f8>)
 8003870:	a904      	add	r1, sp, #16
 8003872:	4638      	mov	r0, r7
 8003874:	f000 fa4c 	bl	8003d10 <_printf_i>
 8003878:	e7eb      	b.n	8003852 <_svfiprintf_r+0x1c2>
 800387a:	bf00      	nop
 800387c:	08004a80 	.word	0x08004a80
 8003880:	08004a8a 	.word	0x08004a8a
 8003884:	00000000 	.word	0x00000000
 8003888:	080035d9 	.word	0x080035d9
 800388c:	08004a86 	.word	0x08004a86

08003890 <_sungetc_r>:
 8003890:	b538      	push	{r3, r4, r5, lr}
 8003892:	1c4b      	adds	r3, r1, #1
 8003894:	4614      	mov	r4, r2
 8003896:	d103      	bne.n	80038a0 <_sungetc_r+0x10>
 8003898:	f04f 35ff 	mov.w	r5, #4294967295
 800389c:	4628      	mov	r0, r5
 800389e:	bd38      	pop	{r3, r4, r5, pc}
 80038a0:	8993      	ldrh	r3, [r2, #12]
 80038a2:	f023 0320 	bic.w	r3, r3, #32
 80038a6:	8193      	strh	r3, [r2, #12]
 80038a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80038aa:	6852      	ldr	r2, [r2, #4]
 80038ac:	b2cd      	uxtb	r5, r1
 80038ae:	b18b      	cbz	r3, 80038d4 <_sungetc_r+0x44>
 80038b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80038b2:	4293      	cmp	r3, r2
 80038b4:	dd08      	ble.n	80038c8 <_sungetc_r+0x38>
 80038b6:	6823      	ldr	r3, [r4, #0]
 80038b8:	1e5a      	subs	r2, r3, #1
 80038ba:	6022      	str	r2, [r4, #0]
 80038bc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80038c0:	6863      	ldr	r3, [r4, #4]
 80038c2:	3301      	adds	r3, #1
 80038c4:	6063      	str	r3, [r4, #4]
 80038c6:	e7e9      	b.n	800389c <_sungetc_r+0xc>
 80038c8:	4621      	mov	r1, r4
 80038ca:	f000 fdc9 	bl	8004460 <__submore>
 80038ce:	2800      	cmp	r0, #0
 80038d0:	d0f1      	beq.n	80038b6 <_sungetc_r+0x26>
 80038d2:	e7e1      	b.n	8003898 <_sungetc_r+0x8>
 80038d4:	6921      	ldr	r1, [r4, #16]
 80038d6:	6823      	ldr	r3, [r4, #0]
 80038d8:	b151      	cbz	r1, 80038f0 <_sungetc_r+0x60>
 80038da:	4299      	cmp	r1, r3
 80038dc:	d208      	bcs.n	80038f0 <_sungetc_r+0x60>
 80038de:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80038e2:	42a9      	cmp	r1, r5
 80038e4:	d104      	bne.n	80038f0 <_sungetc_r+0x60>
 80038e6:	3b01      	subs	r3, #1
 80038e8:	3201      	adds	r2, #1
 80038ea:	6023      	str	r3, [r4, #0]
 80038ec:	6062      	str	r2, [r4, #4]
 80038ee:	e7d5      	b.n	800389c <_sungetc_r+0xc>
 80038f0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80038f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80038f8:	6363      	str	r3, [r4, #52]	; 0x34
 80038fa:	2303      	movs	r3, #3
 80038fc:	63a3      	str	r3, [r4, #56]	; 0x38
 80038fe:	4623      	mov	r3, r4
 8003900:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003904:	6023      	str	r3, [r4, #0]
 8003906:	2301      	movs	r3, #1
 8003908:	e7dc      	b.n	80038c4 <_sungetc_r+0x34>

0800390a <__ssrefill_r>:
 800390a:	b510      	push	{r4, lr}
 800390c:	460c      	mov	r4, r1
 800390e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003910:	b169      	cbz	r1, 800392e <__ssrefill_r+0x24>
 8003912:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003916:	4299      	cmp	r1, r3
 8003918:	d001      	beq.n	800391e <__ssrefill_r+0x14>
 800391a:	f000 fe05 	bl	8004528 <_free_r>
 800391e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003920:	6063      	str	r3, [r4, #4]
 8003922:	2000      	movs	r0, #0
 8003924:	6360      	str	r0, [r4, #52]	; 0x34
 8003926:	b113      	cbz	r3, 800392e <__ssrefill_r+0x24>
 8003928:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800392a:	6023      	str	r3, [r4, #0]
 800392c:	bd10      	pop	{r4, pc}
 800392e:	6923      	ldr	r3, [r4, #16]
 8003930:	6023      	str	r3, [r4, #0]
 8003932:	2300      	movs	r3, #0
 8003934:	6063      	str	r3, [r4, #4]
 8003936:	89a3      	ldrh	r3, [r4, #12]
 8003938:	f043 0320 	orr.w	r3, r3, #32
 800393c:	81a3      	strh	r3, [r4, #12]
 800393e:	f04f 30ff 	mov.w	r0, #4294967295
 8003942:	e7f3      	b.n	800392c <__ssrefill_r+0x22>

08003944 <__ssvfiscanf_r>:
 8003944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003948:	460c      	mov	r4, r1
 800394a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800394e:	2100      	movs	r1, #0
 8003950:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8003954:	49a6      	ldr	r1, [pc, #664]	; (8003bf0 <__ssvfiscanf_r+0x2ac>)
 8003956:	91a0      	str	r1, [sp, #640]	; 0x280
 8003958:	f10d 0804 	add.w	r8, sp, #4
 800395c:	49a5      	ldr	r1, [pc, #660]	; (8003bf4 <__ssvfiscanf_r+0x2b0>)
 800395e:	4fa6      	ldr	r7, [pc, #664]	; (8003bf8 <__ssvfiscanf_r+0x2b4>)
 8003960:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8003bfc <__ssvfiscanf_r+0x2b8>
 8003964:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8003968:	4606      	mov	r6, r0
 800396a:	91a1      	str	r1, [sp, #644]	; 0x284
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	7813      	ldrb	r3, [r2, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 815a 	beq.w	8003c2a <__ssvfiscanf_r+0x2e6>
 8003976:	5dd9      	ldrb	r1, [r3, r7]
 8003978:	f011 0108 	ands.w	r1, r1, #8
 800397c:	f102 0501 	add.w	r5, r2, #1
 8003980:	d019      	beq.n	80039b6 <__ssvfiscanf_r+0x72>
 8003982:	6863      	ldr	r3, [r4, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	dd0f      	ble.n	80039a8 <__ssvfiscanf_r+0x64>
 8003988:	6823      	ldr	r3, [r4, #0]
 800398a:	781a      	ldrb	r2, [r3, #0]
 800398c:	5cba      	ldrb	r2, [r7, r2]
 800398e:	0712      	lsls	r2, r2, #28
 8003990:	d401      	bmi.n	8003996 <__ssvfiscanf_r+0x52>
 8003992:	462a      	mov	r2, r5
 8003994:	e7eb      	b.n	800396e <__ssvfiscanf_r+0x2a>
 8003996:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003998:	3201      	adds	r2, #1
 800399a:	9245      	str	r2, [sp, #276]	; 0x114
 800399c:	6862      	ldr	r2, [r4, #4]
 800399e:	3301      	adds	r3, #1
 80039a0:	3a01      	subs	r2, #1
 80039a2:	6062      	str	r2, [r4, #4]
 80039a4:	6023      	str	r3, [r4, #0]
 80039a6:	e7ec      	b.n	8003982 <__ssvfiscanf_r+0x3e>
 80039a8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80039aa:	4621      	mov	r1, r4
 80039ac:	4630      	mov	r0, r6
 80039ae:	4798      	blx	r3
 80039b0:	2800      	cmp	r0, #0
 80039b2:	d0e9      	beq.n	8003988 <__ssvfiscanf_r+0x44>
 80039b4:	e7ed      	b.n	8003992 <__ssvfiscanf_r+0x4e>
 80039b6:	2b25      	cmp	r3, #37	; 0x25
 80039b8:	d012      	beq.n	80039e0 <__ssvfiscanf_r+0x9c>
 80039ba:	469a      	mov	sl, r3
 80039bc:	6863      	ldr	r3, [r4, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f340 8091 	ble.w	8003ae6 <__ssvfiscanf_r+0x1a2>
 80039c4:	6822      	ldr	r2, [r4, #0]
 80039c6:	7813      	ldrb	r3, [r2, #0]
 80039c8:	4553      	cmp	r3, sl
 80039ca:	f040 812e 	bne.w	8003c2a <__ssvfiscanf_r+0x2e6>
 80039ce:	6863      	ldr	r3, [r4, #4]
 80039d0:	3b01      	subs	r3, #1
 80039d2:	6063      	str	r3, [r4, #4]
 80039d4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80039d6:	3201      	adds	r2, #1
 80039d8:	3301      	adds	r3, #1
 80039da:	6022      	str	r2, [r4, #0]
 80039dc:	9345      	str	r3, [sp, #276]	; 0x114
 80039de:	e7d8      	b.n	8003992 <__ssvfiscanf_r+0x4e>
 80039e0:	9141      	str	r1, [sp, #260]	; 0x104
 80039e2:	9143      	str	r1, [sp, #268]	; 0x10c
 80039e4:	7853      	ldrb	r3, [r2, #1]
 80039e6:	2b2a      	cmp	r3, #42	; 0x2a
 80039e8:	bf02      	ittt	eq
 80039ea:	2310      	moveq	r3, #16
 80039ec:	1c95      	addeq	r5, r2, #2
 80039ee:	9341      	streq	r3, [sp, #260]	; 0x104
 80039f0:	220a      	movs	r2, #10
 80039f2:	46aa      	mov	sl, r5
 80039f4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80039f8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80039fc:	2b09      	cmp	r3, #9
 80039fe:	d91d      	bls.n	8003a3c <__ssvfiscanf_r+0xf8>
 8003a00:	487e      	ldr	r0, [pc, #504]	; (8003bfc <__ssvfiscanf_r+0x2b8>)
 8003a02:	2203      	movs	r2, #3
 8003a04:	f7fc fbfc 	bl	8000200 <memchr>
 8003a08:	b140      	cbz	r0, 8003a1c <__ssvfiscanf_r+0xd8>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	eba0 0009 	sub.w	r0, r0, r9
 8003a10:	fa03 f000 	lsl.w	r0, r3, r0
 8003a14:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003a16:	4318      	orrs	r0, r3
 8003a18:	9041      	str	r0, [sp, #260]	; 0x104
 8003a1a:	4655      	mov	r5, sl
 8003a1c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003a20:	2b78      	cmp	r3, #120	; 0x78
 8003a22:	d806      	bhi.n	8003a32 <__ssvfiscanf_r+0xee>
 8003a24:	2b57      	cmp	r3, #87	; 0x57
 8003a26:	d810      	bhi.n	8003a4a <__ssvfiscanf_r+0x106>
 8003a28:	2b25      	cmp	r3, #37	; 0x25
 8003a2a:	d0c6      	beq.n	80039ba <__ssvfiscanf_r+0x76>
 8003a2c:	d856      	bhi.n	8003adc <__ssvfiscanf_r+0x198>
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d064      	beq.n	8003afc <__ssvfiscanf_r+0x1b8>
 8003a32:	2303      	movs	r3, #3
 8003a34:	9347      	str	r3, [sp, #284]	; 0x11c
 8003a36:	230a      	movs	r3, #10
 8003a38:	9342      	str	r3, [sp, #264]	; 0x108
 8003a3a:	e071      	b.n	8003b20 <__ssvfiscanf_r+0x1dc>
 8003a3c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003a3e:	fb02 1103 	mla	r1, r2, r3, r1
 8003a42:	3930      	subs	r1, #48	; 0x30
 8003a44:	9143      	str	r1, [sp, #268]	; 0x10c
 8003a46:	4655      	mov	r5, sl
 8003a48:	e7d3      	b.n	80039f2 <__ssvfiscanf_r+0xae>
 8003a4a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8003a4e:	2a20      	cmp	r2, #32
 8003a50:	d8ef      	bhi.n	8003a32 <__ssvfiscanf_r+0xee>
 8003a52:	a101      	add	r1, pc, #4	; (adr r1, 8003a58 <__ssvfiscanf_r+0x114>)
 8003a54:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003a58:	08003b0b 	.word	0x08003b0b
 8003a5c:	08003a33 	.word	0x08003a33
 8003a60:	08003a33 	.word	0x08003a33
 8003a64:	08003b69 	.word	0x08003b69
 8003a68:	08003a33 	.word	0x08003a33
 8003a6c:	08003a33 	.word	0x08003a33
 8003a70:	08003a33 	.word	0x08003a33
 8003a74:	08003a33 	.word	0x08003a33
 8003a78:	08003a33 	.word	0x08003a33
 8003a7c:	08003a33 	.word	0x08003a33
 8003a80:	08003a33 	.word	0x08003a33
 8003a84:	08003b7f 	.word	0x08003b7f
 8003a88:	08003b55 	.word	0x08003b55
 8003a8c:	08003ae3 	.word	0x08003ae3
 8003a90:	08003ae3 	.word	0x08003ae3
 8003a94:	08003ae3 	.word	0x08003ae3
 8003a98:	08003a33 	.word	0x08003a33
 8003a9c:	08003b59 	.word	0x08003b59
 8003aa0:	08003a33 	.word	0x08003a33
 8003aa4:	08003a33 	.word	0x08003a33
 8003aa8:	08003a33 	.word	0x08003a33
 8003aac:	08003a33 	.word	0x08003a33
 8003ab0:	08003b8f 	.word	0x08003b8f
 8003ab4:	08003b61 	.word	0x08003b61
 8003ab8:	08003b03 	.word	0x08003b03
 8003abc:	08003a33 	.word	0x08003a33
 8003ac0:	08003a33 	.word	0x08003a33
 8003ac4:	08003b8b 	.word	0x08003b8b
 8003ac8:	08003a33 	.word	0x08003a33
 8003acc:	08003b55 	.word	0x08003b55
 8003ad0:	08003a33 	.word	0x08003a33
 8003ad4:	08003a33 	.word	0x08003a33
 8003ad8:	08003b0b 	.word	0x08003b0b
 8003adc:	3b45      	subs	r3, #69	; 0x45
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d8a7      	bhi.n	8003a32 <__ssvfiscanf_r+0xee>
 8003ae2:	2305      	movs	r3, #5
 8003ae4:	e01b      	b.n	8003b1e <__ssvfiscanf_r+0x1da>
 8003ae6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003ae8:	4621      	mov	r1, r4
 8003aea:	4630      	mov	r0, r6
 8003aec:	4798      	blx	r3
 8003aee:	2800      	cmp	r0, #0
 8003af0:	f43f af68 	beq.w	80039c4 <__ssvfiscanf_r+0x80>
 8003af4:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003af6:	2800      	cmp	r0, #0
 8003af8:	f040 808d 	bne.w	8003c16 <__ssvfiscanf_r+0x2d2>
 8003afc:	f04f 30ff 	mov.w	r0, #4294967295
 8003b00:	e08f      	b.n	8003c22 <__ssvfiscanf_r+0x2de>
 8003b02:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003b04:	f042 0220 	orr.w	r2, r2, #32
 8003b08:	9241      	str	r2, [sp, #260]	; 0x104
 8003b0a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003b0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b10:	9241      	str	r2, [sp, #260]	; 0x104
 8003b12:	2210      	movs	r2, #16
 8003b14:	2b6f      	cmp	r3, #111	; 0x6f
 8003b16:	9242      	str	r2, [sp, #264]	; 0x108
 8003b18:	bf34      	ite	cc
 8003b1a:	2303      	movcc	r3, #3
 8003b1c:	2304      	movcs	r3, #4
 8003b1e:	9347      	str	r3, [sp, #284]	; 0x11c
 8003b20:	6863      	ldr	r3, [r4, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	dd42      	ble.n	8003bac <__ssvfiscanf_r+0x268>
 8003b26:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003b28:	0659      	lsls	r1, r3, #25
 8003b2a:	d404      	bmi.n	8003b36 <__ssvfiscanf_r+0x1f2>
 8003b2c:	6823      	ldr	r3, [r4, #0]
 8003b2e:	781a      	ldrb	r2, [r3, #0]
 8003b30:	5cba      	ldrb	r2, [r7, r2]
 8003b32:	0712      	lsls	r2, r2, #28
 8003b34:	d441      	bmi.n	8003bba <__ssvfiscanf_r+0x276>
 8003b36:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	dc50      	bgt.n	8003bde <__ssvfiscanf_r+0x29a>
 8003b3c:	466b      	mov	r3, sp
 8003b3e:	4622      	mov	r2, r4
 8003b40:	a941      	add	r1, sp, #260	; 0x104
 8003b42:	4630      	mov	r0, r6
 8003b44:	f000 fa0a 	bl	8003f5c <_scanf_chars>
 8003b48:	2801      	cmp	r0, #1
 8003b4a:	d06e      	beq.n	8003c2a <__ssvfiscanf_r+0x2e6>
 8003b4c:	2802      	cmp	r0, #2
 8003b4e:	f47f af20 	bne.w	8003992 <__ssvfiscanf_r+0x4e>
 8003b52:	e7cf      	b.n	8003af4 <__ssvfiscanf_r+0x1b0>
 8003b54:	220a      	movs	r2, #10
 8003b56:	e7dd      	b.n	8003b14 <__ssvfiscanf_r+0x1d0>
 8003b58:	2300      	movs	r3, #0
 8003b5a:	9342      	str	r3, [sp, #264]	; 0x108
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e7de      	b.n	8003b1e <__ssvfiscanf_r+0x1da>
 8003b60:	2308      	movs	r3, #8
 8003b62:	9342      	str	r3, [sp, #264]	; 0x108
 8003b64:	2304      	movs	r3, #4
 8003b66:	e7da      	b.n	8003b1e <__ssvfiscanf_r+0x1da>
 8003b68:	4629      	mov	r1, r5
 8003b6a:	4640      	mov	r0, r8
 8003b6c:	f000 fb48 	bl	8004200 <__sccl>
 8003b70:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003b72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b76:	9341      	str	r3, [sp, #260]	; 0x104
 8003b78:	4605      	mov	r5, r0
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e7cf      	b.n	8003b1e <__ssvfiscanf_r+0x1da>
 8003b7e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003b80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b84:	9341      	str	r3, [sp, #260]	; 0x104
 8003b86:	2300      	movs	r3, #0
 8003b88:	e7c9      	b.n	8003b1e <__ssvfiscanf_r+0x1da>
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	e7c7      	b.n	8003b1e <__ssvfiscanf_r+0x1da>
 8003b8e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8003b90:	06c3      	lsls	r3, r0, #27
 8003b92:	f53f aefe 	bmi.w	8003992 <__ssvfiscanf_r+0x4e>
 8003b96:	9b00      	ldr	r3, [sp, #0]
 8003b98:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003b9a:	1d19      	adds	r1, r3, #4
 8003b9c:	9100      	str	r1, [sp, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f010 0f01 	tst.w	r0, #1
 8003ba4:	bf14      	ite	ne
 8003ba6:	801a      	strhne	r2, [r3, #0]
 8003ba8:	601a      	streq	r2, [r3, #0]
 8003baa:	e6f2      	b.n	8003992 <__ssvfiscanf_r+0x4e>
 8003bac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003bae:	4621      	mov	r1, r4
 8003bb0:	4630      	mov	r0, r6
 8003bb2:	4798      	blx	r3
 8003bb4:	2800      	cmp	r0, #0
 8003bb6:	d0b6      	beq.n	8003b26 <__ssvfiscanf_r+0x1e2>
 8003bb8:	e79c      	b.n	8003af4 <__ssvfiscanf_r+0x1b0>
 8003bba:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003bbc:	3201      	adds	r2, #1
 8003bbe:	9245      	str	r2, [sp, #276]	; 0x114
 8003bc0:	6862      	ldr	r2, [r4, #4]
 8003bc2:	3a01      	subs	r2, #1
 8003bc4:	2a00      	cmp	r2, #0
 8003bc6:	6062      	str	r2, [r4, #4]
 8003bc8:	dd02      	ble.n	8003bd0 <__ssvfiscanf_r+0x28c>
 8003bca:	3301      	adds	r3, #1
 8003bcc:	6023      	str	r3, [r4, #0]
 8003bce:	e7ad      	b.n	8003b2c <__ssvfiscanf_r+0x1e8>
 8003bd0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003bd2:	4621      	mov	r1, r4
 8003bd4:	4630      	mov	r0, r6
 8003bd6:	4798      	blx	r3
 8003bd8:	2800      	cmp	r0, #0
 8003bda:	d0a7      	beq.n	8003b2c <__ssvfiscanf_r+0x1e8>
 8003bdc:	e78a      	b.n	8003af4 <__ssvfiscanf_r+0x1b0>
 8003bde:	2b04      	cmp	r3, #4
 8003be0:	dc0e      	bgt.n	8003c00 <__ssvfiscanf_r+0x2bc>
 8003be2:	466b      	mov	r3, sp
 8003be4:	4622      	mov	r2, r4
 8003be6:	a941      	add	r1, sp, #260	; 0x104
 8003be8:	4630      	mov	r0, r6
 8003bea:	f000 fa11 	bl	8004010 <_scanf_i>
 8003bee:	e7ab      	b.n	8003b48 <__ssvfiscanf_r+0x204>
 8003bf0:	08003891 	.word	0x08003891
 8003bf4:	0800390b 	.word	0x0800390b
 8003bf8:	08004acf 	.word	0x08004acf
 8003bfc:	08004a86 	.word	0x08004a86
 8003c00:	4b0b      	ldr	r3, [pc, #44]	; (8003c30 <__ssvfiscanf_r+0x2ec>)
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f43f aec5 	beq.w	8003992 <__ssvfiscanf_r+0x4e>
 8003c08:	466b      	mov	r3, sp
 8003c0a:	4622      	mov	r2, r4
 8003c0c:	a941      	add	r1, sp, #260	; 0x104
 8003c0e:	4630      	mov	r0, r6
 8003c10:	f3af 8000 	nop.w
 8003c14:	e798      	b.n	8003b48 <__ssvfiscanf_r+0x204>
 8003c16:	89a3      	ldrh	r3, [r4, #12]
 8003c18:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003c1c:	bf18      	it	ne
 8003c1e:	f04f 30ff 	movne.w	r0, #4294967295
 8003c22:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8003c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c2a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003c2c:	e7f9      	b.n	8003c22 <__ssvfiscanf_r+0x2de>
 8003c2e:	bf00      	nop
 8003c30:	00000000 	.word	0x00000000

08003c34 <_printf_common>:
 8003c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c38:	4616      	mov	r6, r2
 8003c3a:	4699      	mov	r9, r3
 8003c3c:	688a      	ldr	r2, [r1, #8]
 8003c3e:	690b      	ldr	r3, [r1, #16]
 8003c40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c44:	4293      	cmp	r3, r2
 8003c46:	bfb8      	it	lt
 8003c48:	4613      	movlt	r3, r2
 8003c4a:	6033      	str	r3, [r6, #0]
 8003c4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c50:	4607      	mov	r7, r0
 8003c52:	460c      	mov	r4, r1
 8003c54:	b10a      	cbz	r2, 8003c5a <_printf_common+0x26>
 8003c56:	3301      	adds	r3, #1
 8003c58:	6033      	str	r3, [r6, #0]
 8003c5a:	6823      	ldr	r3, [r4, #0]
 8003c5c:	0699      	lsls	r1, r3, #26
 8003c5e:	bf42      	ittt	mi
 8003c60:	6833      	ldrmi	r3, [r6, #0]
 8003c62:	3302      	addmi	r3, #2
 8003c64:	6033      	strmi	r3, [r6, #0]
 8003c66:	6825      	ldr	r5, [r4, #0]
 8003c68:	f015 0506 	ands.w	r5, r5, #6
 8003c6c:	d106      	bne.n	8003c7c <_printf_common+0x48>
 8003c6e:	f104 0a19 	add.w	sl, r4, #25
 8003c72:	68e3      	ldr	r3, [r4, #12]
 8003c74:	6832      	ldr	r2, [r6, #0]
 8003c76:	1a9b      	subs	r3, r3, r2
 8003c78:	42ab      	cmp	r3, r5
 8003c7a:	dc26      	bgt.n	8003cca <_printf_common+0x96>
 8003c7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c80:	1e13      	subs	r3, r2, #0
 8003c82:	6822      	ldr	r2, [r4, #0]
 8003c84:	bf18      	it	ne
 8003c86:	2301      	movne	r3, #1
 8003c88:	0692      	lsls	r2, r2, #26
 8003c8a:	d42b      	bmi.n	8003ce4 <_printf_common+0xb0>
 8003c8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c90:	4649      	mov	r1, r9
 8003c92:	4638      	mov	r0, r7
 8003c94:	47c0      	blx	r8
 8003c96:	3001      	adds	r0, #1
 8003c98:	d01e      	beq.n	8003cd8 <_printf_common+0xa4>
 8003c9a:	6823      	ldr	r3, [r4, #0]
 8003c9c:	68e5      	ldr	r5, [r4, #12]
 8003c9e:	6832      	ldr	r2, [r6, #0]
 8003ca0:	f003 0306 	and.w	r3, r3, #6
 8003ca4:	2b04      	cmp	r3, #4
 8003ca6:	bf08      	it	eq
 8003ca8:	1aad      	subeq	r5, r5, r2
 8003caa:	68a3      	ldr	r3, [r4, #8]
 8003cac:	6922      	ldr	r2, [r4, #16]
 8003cae:	bf0c      	ite	eq
 8003cb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cb4:	2500      	movne	r5, #0
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	bfc4      	itt	gt
 8003cba:	1a9b      	subgt	r3, r3, r2
 8003cbc:	18ed      	addgt	r5, r5, r3
 8003cbe:	2600      	movs	r6, #0
 8003cc0:	341a      	adds	r4, #26
 8003cc2:	42b5      	cmp	r5, r6
 8003cc4:	d11a      	bne.n	8003cfc <_printf_common+0xc8>
 8003cc6:	2000      	movs	r0, #0
 8003cc8:	e008      	b.n	8003cdc <_printf_common+0xa8>
 8003cca:	2301      	movs	r3, #1
 8003ccc:	4652      	mov	r2, sl
 8003cce:	4649      	mov	r1, r9
 8003cd0:	4638      	mov	r0, r7
 8003cd2:	47c0      	blx	r8
 8003cd4:	3001      	adds	r0, #1
 8003cd6:	d103      	bne.n	8003ce0 <_printf_common+0xac>
 8003cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ce0:	3501      	adds	r5, #1
 8003ce2:	e7c6      	b.n	8003c72 <_printf_common+0x3e>
 8003ce4:	18e1      	adds	r1, r4, r3
 8003ce6:	1c5a      	adds	r2, r3, #1
 8003ce8:	2030      	movs	r0, #48	; 0x30
 8003cea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003cee:	4422      	add	r2, r4
 8003cf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003cf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003cf8:	3302      	adds	r3, #2
 8003cfa:	e7c7      	b.n	8003c8c <_printf_common+0x58>
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	4622      	mov	r2, r4
 8003d00:	4649      	mov	r1, r9
 8003d02:	4638      	mov	r0, r7
 8003d04:	47c0      	blx	r8
 8003d06:	3001      	adds	r0, #1
 8003d08:	d0e6      	beq.n	8003cd8 <_printf_common+0xa4>
 8003d0a:	3601      	adds	r6, #1
 8003d0c:	e7d9      	b.n	8003cc2 <_printf_common+0x8e>
	...

08003d10 <_printf_i>:
 8003d10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d14:	7e0f      	ldrb	r7, [r1, #24]
 8003d16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d18:	2f78      	cmp	r7, #120	; 0x78
 8003d1a:	4691      	mov	r9, r2
 8003d1c:	4680      	mov	r8, r0
 8003d1e:	460c      	mov	r4, r1
 8003d20:	469a      	mov	sl, r3
 8003d22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d26:	d807      	bhi.n	8003d38 <_printf_i+0x28>
 8003d28:	2f62      	cmp	r7, #98	; 0x62
 8003d2a:	d80a      	bhi.n	8003d42 <_printf_i+0x32>
 8003d2c:	2f00      	cmp	r7, #0
 8003d2e:	f000 80d8 	beq.w	8003ee2 <_printf_i+0x1d2>
 8003d32:	2f58      	cmp	r7, #88	; 0x58
 8003d34:	f000 80a3 	beq.w	8003e7e <_printf_i+0x16e>
 8003d38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d40:	e03a      	b.n	8003db8 <_printf_i+0xa8>
 8003d42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d46:	2b15      	cmp	r3, #21
 8003d48:	d8f6      	bhi.n	8003d38 <_printf_i+0x28>
 8003d4a:	a101      	add	r1, pc, #4	; (adr r1, 8003d50 <_printf_i+0x40>)
 8003d4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d50:	08003da9 	.word	0x08003da9
 8003d54:	08003dbd 	.word	0x08003dbd
 8003d58:	08003d39 	.word	0x08003d39
 8003d5c:	08003d39 	.word	0x08003d39
 8003d60:	08003d39 	.word	0x08003d39
 8003d64:	08003d39 	.word	0x08003d39
 8003d68:	08003dbd 	.word	0x08003dbd
 8003d6c:	08003d39 	.word	0x08003d39
 8003d70:	08003d39 	.word	0x08003d39
 8003d74:	08003d39 	.word	0x08003d39
 8003d78:	08003d39 	.word	0x08003d39
 8003d7c:	08003ec9 	.word	0x08003ec9
 8003d80:	08003ded 	.word	0x08003ded
 8003d84:	08003eab 	.word	0x08003eab
 8003d88:	08003d39 	.word	0x08003d39
 8003d8c:	08003d39 	.word	0x08003d39
 8003d90:	08003eeb 	.word	0x08003eeb
 8003d94:	08003d39 	.word	0x08003d39
 8003d98:	08003ded 	.word	0x08003ded
 8003d9c:	08003d39 	.word	0x08003d39
 8003da0:	08003d39 	.word	0x08003d39
 8003da4:	08003eb3 	.word	0x08003eb3
 8003da8:	682b      	ldr	r3, [r5, #0]
 8003daa:	1d1a      	adds	r2, r3, #4
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	602a      	str	r2, [r5, #0]
 8003db0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003db4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003db8:	2301      	movs	r3, #1
 8003dba:	e0a3      	b.n	8003f04 <_printf_i+0x1f4>
 8003dbc:	6820      	ldr	r0, [r4, #0]
 8003dbe:	6829      	ldr	r1, [r5, #0]
 8003dc0:	0606      	lsls	r6, r0, #24
 8003dc2:	f101 0304 	add.w	r3, r1, #4
 8003dc6:	d50a      	bpl.n	8003dde <_printf_i+0xce>
 8003dc8:	680e      	ldr	r6, [r1, #0]
 8003dca:	602b      	str	r3, [r5, #0]
 8003dcc:	2e00      	cmp	r6, #0
 8003dce:	da03      	bge.n	8003dd8 <_printf_i+0xc8>
 8003dd0:	232d      	movs	r3, #45	; 0x2d
 8003dd2:	4276      	negs	r6, r6
 8003dd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dd8:	485e      	ldr	r0, [pc, #376]	; (8003f54 <_printf_i+0x244>)
 8003dda:	230a      	movs	r3, #10
 8003ddc:	e019      	b.n	8003e12 <_printf_i+0x102>
 8003dde:	680e      	ldr	r6, [r1, #0]
 8003de0:	602b      	str	r3, [r5, #0]
 8003de2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003de6:	bf18      	it	ne
 8003de8:	b236      	sxthne	r6, r6
 8003dea:	e7ef      	b.n	8003dcc <_printf_i+0xbc>
 8003dec:	682b      	ldr	r3, [r5, #0]
 8003dee:	6820      	ldr	r0, [r4, #0]
 8003df0:	1d19      	adds	r1, r3, #4
 8003df2:	6029      	str	r1, [r5, #0]
 8003df4:	0601      	lsls	r1, r0, #24
 8003df6:	d501      	bpl.n	8003dfc <_printf_i+0xec>
 8003df8:	681e      	ldr	r6, [r3, #0]
 8003dfa:	e002      	b.n	8003e02 <_printf_i+0xf2>
 8003dfc:	0646      	lsls	r6, r0, #25
 8003dfe:	d5fb      	bpl.n	8003df8 <_printf_i+0xe8>
 8003e00:	881e      	ldrh	r6, [r3, #0]
 8003e02:	4854      	ldr	r0, [pc, #336]	; (8003f54 <_printf_i+0x244>)
 8003e04:	2f6f      	cmp	r7, #111	; 0x6f
 8003e06:	bf0c      	ite	eq
 8003e08:	2308      	moveq	r3, #8
 8003e0a:	230a      	movne	r3, #10
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e12:	6865      	ldr	r5, [r4, #4]
 8003e14:	60a5      	str	r5, [r4, #8]
 8003e16:	2d00      	cmp	r5, #0
 8003e18:	bfa2      	ittt	ge
 8003e1a:	6821      	ldrge	r1, [r4, #0]
 8003e1c:	f021 0104 	bicge.w	r1, r1, #4
 8003e20:	6021      	strge	r1, [r4, #0]
 8003e22:	b90e      	cbnz	r6, 8003e28 <_printf_i+0x118>
 8003e24:	2d00      	cmp	r5, #0
 8003e26:	d04d      	beq.n	8003ec4 <_printf_i+0x1b4>
 8003e28:	4615      	mov	r5, r2
 8003e2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e2e:	fb03 6711 	mls	r7, r3, r1, r6
 8003e32:	5dc7      	ldrb	r7, [r0, r7]
 8003e34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e38:	4637      	mov	r7, r6
 8003e3a:	42bb      	cmp	r3, r7
 8003e3c:	460e      	mov	r6, r1
 8003e3e:	d9f4      	bls.n	8003e2a <_printf_i+0x11a>
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d10b      	bne.n	8003e5c <_printf_i+0x14c>
 8003e44:	6823      	ldr	r3, [r4, #0]
 8003e46:	07de      	lsls	r6, r3, #31
 8003e48:	d508      	bpl.n	8003e5c <_printf_i+0x14c>
 8003e4a:	6923      	ldr	r3, [r4, #16]
 8003e4c:	6861      	ldr	r1, [r4, #4]
 8003e4e:	4299      	cmp	r1, r3
 8003e50:	bfde      	ittt	le
 8003e52:	2330      	movle	r3, #48	; 0x30
 8003e54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e58:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e5c:	1b52      	subs	r2, r2, r5
 8003e5e:	6122      	str	r2, [r4, #16]
 8003e60:	f8cd a000 	str.w	sl, [sp]
 8003e64:	464b      	mov	r3, r9
 8003e66:	aa03      	add	r2, sp, #12
 8003e68:	4621      	mov	r1, r4
 8003e6a:	4640      	mov	r0, r8
 8003e6c:	f7ff fee2 	bl	8003c34 <_printf_common>
 8003e70:	3001      	adds	r0, #1
 8003e72:	d14c      	bne.n	8003f0e <_printf_i+0x1fe>
 8003e74:	f04f 30ff 	mov.w	r0, #4294967295
 8003e78:	b004      	add	sp, #16
 8003e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e7e:	4835      	ldr	r0, [pc, #212]	; (8003f54 <_printf_i+0x244>)
 8003e80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003e84:	6829      	ldr	r1, [r5, #0]
 8003e86:	6823      	ldr	r3, [r4, #0]
 8003e88:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e8c:	6029      	str	r1, [r5, #0]
 8003e8e:	061d      	lsls	r5, r3, #24
 8003e90:	d514      	bpl.n	8003ebc <_printf_i+0x1ac>
 8003e92:	07df      	lsls	r7, r3, #31
 8003e94:	bf44      	itt	mi
 8003e96:	f043 0320 	orrmi.w	r3, r3, #32
 8003e9a:	6023      	strmi	r3, [r4, #0]
 8003e9c:	b91e      	cbnz	r6, 8003ea6 <_printf_i+0x196>
 8003e9e:	6823      	ldr	r3, [r4, #0]
 8003ea0:	f023 0320 	bic.w	r3, r3, #32
 8003ea4:	6023      	str	r3, [r4, #0]
 8003ea6:	2310      	movs	r3, #16
 8003ea8:	e7b0      	b.n	8003e0c <_printf_i+0xfc>
 8003eaa:	6823      	ldr	r3, [r4, #0]
 8003eac:	f043 0320 	orr.w	r3, r3, #32
 8003eb0:	6023      	str	r3, [r4, #0]
 8003eb2:	2378      	movs	r3, #120	; 0x78
 8003eb4:	4828      	ldr	r0, [pc, #160]	; (8003f58 <_printf_i+0x248>)
 8003eb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003eba:	e7e3      	b.n	8003e84 <_printf_i+0x174>
 8003ebc:	0659      	lsls	r1, r3, #25
 8003ebe:	bf48      	it	mi
 8003ec0:	b2b6      	uxthmi	r6, r6
 8003ec2:	e7e6      	b.n	8003e92 <_printf_i+0x182>
 8003ec4:	4615      	mov	r5, r2
 8003ec6:	e7bb      	b.n	8003e40 <_printf_i+0x130>
 8003ec8:	682b      	ldr	r3, [r5, #0]
 8003eca:	6826      	ldr	r6, [r4, #0]
 8003ecc:	6961      	ldr	r1, [r4, #20]
 8003ece:	1d18      	adds	r0, r3, #4
 8003ed0:	6028      	str	r0, [r5, #0]
 8003ed2:	0635      	lsls	r5, r6, #24
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	d501      	bpl.n	8003edc <_printf_i+0x1cc>
 8003ed8:	6019      	str	r1, [r3, #0]
 8003eda:	e002      	b.n	8003ee2 <_printf_i+0x1d2>
 8003edc:	0670      	lsls	r0, r6, #25
 8003ede:	d5fb      	bpl.n	8003ed8 <_printf_i+0x1c8>
 8003ee0:	8019      	strh	r1, [r3, #0]
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	6123      	str	r3, [r4, #16]
 8003ee6:	4615      	mov	r5, r2
 8003ee8:	e7ba      	b.n	8003e60 <_printf_i+0x150>
 8003eea:	682b      	ldr	r3, [r5, #0]
 8003eec:	1d1a      	adds	r2, r3, #4
 8003eee:	602a      	str	r2, [r5, #0]
 8003ef0:	681d      	ldr	r5, [r3, #0]
 8003ef2:	6862      	ldr	r2, [r4, #4]
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	4628      	mov	r0, r5
 8003ef8:	f7fc f982 	bl	8000200 <memchr>
 8003efc:	b108      	cbz	r0, 8003f02 <_printf_i+0x1f2>
 8003efe:	1b40      	subs	r0, r0, r5
 8003f00:	6060      	str	r0, [r4, #4]
 8003f02:	6863      	ldr	r3, [r4, #4]
 8003f04:	6123      	str	r3, [r4, #16]
 8003f06:	2300      	movs	r3, #0
 8003f08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f0c:	e7a8      	b.n	8003e60 <_printf_i+0x150>
 8003f0e:	6923      	ldr	r3, [r4, #16]
 8003f10:	462a      	mov	r2, r5
 8003f12:	4649      	mov	r1, r9
 8003f14:	4640      	mov	r0, r8
 8003f16:	47d0      	blx	sl
 8003f18:	3001      	adds	r0, #1
 8003f1a:	d0ab      	beq.n	8003e74 <_printf_i+0x164>
 8003f1c:	6823      	ldr	r3, [r4, #0]
 8003f1e:	079b      	lsls	r3, r3, #30
 8003f20:	d413      	bmi.n	8003f4a <_printf_i+0x23a>
 8003f22:	68e0      	ldr	r0, [r4, #12]
 8003f24:	9b03      	ldr	r3, [sp, #12]
 8003f26:	4298      	cmp	r0, r3
 8003f28:	bfb8      	it	lt
 8003f2a:	4618      	movlt	r0, r3
 8003f2c:	e7a4      	b.n	8003e78 <_printf_i+0x168>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	4632      	mov	r2, r6
 8003f32:	4649      	mov	r1, r9
 8003f34:	4640      	mov	r0, r8
 8003f36:	47d0      	blx	sl
 8003f38:	3001      	adds	r0, #1
 8003f3a:	d09b      	beq.n	8003e74 <_printf_i+0x164>
 8003f3c:	3501      	adds	r5, #1
 8003f3e:	68e3      	ldr	r3, [r4, #12]
 8003f40:	9903      	ldr	r1, [sp, #12]
 8003f42:	1a5b      	subs	r3, r3, r1
 8003f44:	42ab      	cmp	r3, r5
 8003f46:	dcf2      	bgt.n	8003f2e <_printf_i+0x21e>
 8003f48:	e7eb      	b.n	8003f22 <_printf_i+0x212>
 8003f4a:	2500      	movs	r5, #0
 8003f4c:	f104 0619 	add.w	r6, r4, #25
 8003f50:	e7f5      	b.n	8003f3e <_printf_i+0x22e>
 8003f52:	bf00      	nop
 8003f54:	08004a91 	.word	0x08004a91
 8003f58:	08004aa2 	.word	0x08004aa2

08003f5c <_scanf_chars>:
 8003f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f60:	4615      	mov	r5, r2
 8003f62:	688a      	ldr	r2, [r1, #8]
 8003f64:	4680      	mov	r8, r0
 8003f66:	460c      	mov	r4, r1
 8003f68:	b932      	cbnz	r2, 8003f78 <_scanf_chars+0x1c>
 8003f6a:	698a      	ldr	r2, [r1, #24]
 8003f6c:	2a00      	cmp	r2, #0
 8003f6e:	bf0c      	ite	eq
 8003f70:	2201      	moveq	r2, #1
 8003f72:	f04f 32ff 	movne.w	r2, #4294967295
 8003f76:	608a      	str	r2, [r1, #8]
 8003f78:	6822      	ldr	r2, [r4, #0]
 8003f7a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800400c <_scanf_chars+0xb0>
 8003f7e:	06d1      	lsls	r1, r2, #27
 8003f80:	bf5f      	itttt	pl
 8003f82:	681a      	ldrpl	r2, [r3, #0]
 8003f84:	1d11      	addpl	r1, r2, #4
 8003f86:	6019      	strpl	r1, [r3, #0]
 8003f88:	6816      	ldrpl	r6, [r2, #0]
 8003f8a:	2700      	movs	r7, #0
 8003f8c:	69a0      	ldr	r0, [r4, #24]
 8003f8e:	b188      	cbz	r0, 8003fb4 <_scanf_chars+0x58>
 8003f90:	2801      	cmp	r0, #1
 8003f92:	d107      	bne.n	8003fa4 <_scanf_chars+0x48>
 8003f94:	682a      	ldr	r2, [r5, #0]
 8003f96:	7811      	ldrb	r1, [r2, #0]
 8003f98:	6962      	ldr	r2, [r4, #20]
 8003f9a:	5c52      	ldrb	r2, [r2, r1]
 8003f9c:	b952      	cbnz	r2, 8003fb4 <_scanf_chars+0x58>
 8003f9e:	2f00      	cmp	r7, #0
 8003fa0:	d031      	beq.n	8004006 <_scanf_chars+0xaa>
 8003fa2:	e022      	b.n	8003fea <_scanf_chars+0x8e>
 8003fa4:	2802      	cmp	r0, #2
 8003fa6:	d120      	bne.n	8003fea <_scanf_chars+0x8e>
 8003fa8:	682b      	ldr	r3, [r5, #0]
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	f813 3009 	ldrb.w	r3, [r3, r9]
 8003fb0:	071b      	lsls	r3, r3, #28
 8003fb2:	d41a      	bmi.n	8003fea <_scanf_chars+0x8e>
 8003fb4:	6823      	ldr	r3, [r4, #0]
 8003fb6:	06da      	lsls	r2, r3, #27
 8003fb8:	bf5e      	ittt	pl
 8003fba:	682b      	ldrpl	r3, [r5, #0]
 8003fbc:	781b      	ldrbpl	r3, [r3, #0]
 8003fbe:	f806 3b01 	strbpl.w	r3, [r6], #1
 8003fc2:	682a      	ldr	r2, [r5, #0]
 8003fc4:	686b      	ldr	r3, [r5, #4]
 8003fc6:	3201      	adds	r2, #1
 8003fc8:	602a      	str	r2, [r5, #0]
 8003fca:	68a2      	ldr	r2, [r4, #8]
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	3a01      	subs	r2, #1
 8003fd0:	606b      	str	r3, [r5, #4]
 8003fd2:	3701      	adds	r7, #1
 8003fd4:	60a2      	str	r2, [r4, #8]
 8003fd6:	b142      	cbz	r2, 8003fea <_scanf_chars+0x8e>
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	dcd7      	bgt.n	8003f8c <_scanf_chars+0x30>
 8003fdc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003fe0:	4629      	mov	r1, r5
 8003fe2:	4640      	mov	r0, r8
 8003fe4:	4798      	blx	r3
 8003fe6:	2800      	cmp	r0, #0
 8003fe8:	d0d0      	beq.n	8003f8c <_scanf_chars+0x30>
 8003fea:	6823      	ldr	r3, [r4, #0]
 8003fec:	f013 0310 	ands.w	r3, r3, #16
 8003ff0:	d105      	bne.n	8003ffe <_scanf_chars+0xa2>
 8003ff2:	68e2      	ldr	r2, [r4, #12]
 8003ff4:	3201      	adds	r2, #1
 8003ff6:	60e2      	str	r2, [r4, #12]
 8003ff8:	69a2      	ldr	r2, [r4, #24]
 8003ffa:	b102      	cbz	r2, 8003ffe <_scanf_chars+0xa2>
 8003ffc:	7033      	strb	r3, [r6, #0]
 8003ffe:	6923      	ldr	r3, [r4, #16]
 8004000:	443b      	add	r3, r7
 8004002:	6123      	str	r3, [r4, #16]
 8004004:	2000      	movs	r0, #0
 8004006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800400a:	bf00      	nop
 800400c:	08004acf 	.word	0x08004acf

08004010 <_scanf_i>:
 8004010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004014:	4698      	mov	r8, r3
 8004016:	4b76      	ldr	r3, [pc, #472]	; (80041f0 <_scanf_i+0x1e0>)
 8004018:	460c      	mov	r4, r1
 800401a:	4682      	mov	sl, r0
 800401c:	4616      	mov	r6, r2
 800401e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004022:	b087      	sub	sp, #28
 8004024:	ab03      	add	r3, sp, #12
 8004026:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800402a:	4b72      	ldr	r3, [pc, #456]	; (80041f4 <_scanf_i+0x1e4>)
 800402c:	69a1      	ldr	r1, [r4, #24]
 800402e:	4a72      	ldr	r2, [pc, #456]	; (80041f8 <_scanf_i+0x1e8>)
 8004030:	2903      	cmp	r1, #3
 8004032:	bf18      	it	ne
 8004034:	461a      	movne	r2, r3
 8004036:	68a3      	ldr	r3, [r4, #8]
 8004038:	9201      	str	r2, [sp, #4]
 800403a:	1e5a      	subs	r2, r3, #1
 800403c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004040:	bf88      	it	hi
 8004042:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004046:	4627      	mov	r7, r4
 8004048:	bf82      	ittt	hi
 800404a:	eb03 0905 	addhi.w	r9, r3, r5
 800404e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004052:	60a3      	strhi	r3, [r4, #8]
 8004054:	f857 3b1c 	ldr.w	r3, [r7], #28
 8004058:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800405c:	bf98      	it	ls
 800405e:	f04f 0900 	movls.w	r9, #0
 8004062:	6023      	str	r3, [r4, #0]
 8004064:	463d      	mov	r5, r7
 8004066:	f04f 0b00 	mov.w	fp, #0
 800406a:	6831      	ldr	r1, [r6, #0]
 800406c:	ab03      	add	r3, sp, #12
 800406e:	7809      	ldrb	r1, [r1, #0]
 8004070:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004074:	2202      	movs	r2, #2
 8004076:	f7fc f8c3 	bl	8000200 <memchr>
 800407a:	b328      	cbz	r0, 80040c8 <_scanf_i+0xb8>
 800407c:	f1bb 0f01 	cmp.w	fp, #1
 8004080:	d159      	bne.n	8004136 <_scanf_i+0x126>
 8004082:	6862      	ldr	r2, [r4, #4]
 8004084:	b92a      	cbnz	r2, 8004092 <_scanf_i+0x82>
 8004086:	6822      	ldr	r2, [r4, #0]
 8004088:	2308      	movs	r3, #8
 800408a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800408e:	6063      	str	r3, [r4, #4]
 8004090:	6022      	str	r2, [r4, #0]
 8004092:	6822      	ldr	r2, [r4, #0]
 8004094:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004098:	6022      	str	r2, [r4, #0]
 800409a:	68a2      	ldr	r2, [r4, #8]
 800409c:	1e51      	subs	r1, r2, #1
 800409e:	60a1      	str	r1, [r4, #8]
 80040a0:	b192      	cbz	r2, 80040c8 <_scanf_i+0xb8>
 80040a2:	6832      	ldr	r2, [r6, #0]
 80040a4:	1c51      	adds	r1, r2, #1
 80040a6:	6031      	str	r1, [r6, #0]
 80040a8:	7812      	ldrb	r2, [r2, #0]
 80040aa:	f805 2b01 	strb.w	r2, [r5], #1
 80040ae:	6872      	ldr	r2, [r6, #4]
 80040b0:	3a01      	subs	r2, #1
 80040b2:	2a00      	cmp	r2, #0
 80040b4:	6072      	str	r2, [r6, #4]
 80040b6:	dc07      	bgt.n	80040c8 <_scanf_i+0xb8>
 80040b8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80040bc:	4631      	mov	r1, r6
 80040be:	4650      	mov	r0, sl
 80040c0:	4790      	blx	r2
 80040c2:	2800      	cmp	r0, #0
 80040c4:	f040 8085 	bne.w	80041d2 <_scanf_i+0x1c2>
 80040c8:	f10b 0b01 	add.w	fp, fp, #1
 80040cc:	f1bb 0f03 	cmp.w	fp, #3
 80040d0:	d1cb      	bne.n	800406a <_scanf_i+0x5a>
 80040d2:	6863      	ldr	r3, [r4, #4]
 80040d4:	b90b      	cbnz	r3, 80040da <_scanf_i+0xca>
 80040d6:	230a      	movs	r3, #10
 80040d8:	6063      	str	r3, [r4, #4]
 80040da:	6863      	ldr	r3, [r4, #4]
 80040dc:	4947      	ldr	r1, [pc, #284]	; (80041fc <_scanf_i+0x1ec>)
 80040de:	6960      	ldr	r0, [r4, #20]
 80040e0:	1ac9      	subs	r1, r1, r3
 80040e2:	f000 f88d 	bl	8004200 <__sccl>
 80040e6:	f04f 0b00 	mov.w	fp, #0
 80040ea:	68a3      	ldr	r3, [r4, #8]
 80040ec:	6822      	ldr	r2, [r4, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d03d      	beq.n	800416e <_scanf_i+0x15e>
 80040f2:	6831      	ldr	r1, [r6, #0]
 80040f4:	6960      	ldr	r0, [r4, #20]
 80040f6:	f891 c000 	ldrb.w	ip, [r1]
 80040fa:	f810 000c 	ldrb.w	r0, [r0, ip]
 80040fe:	2800      	cmp	r0, #0
 8004100:	d035      	beq.n	800416e <_scanf_i+0x15e>
 8004102:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8004106:	d124      	bne.n	8004152 <_scanf_i+0x142>
 8004108:	0510      	lsls	r0, r2, #20
 800410a:	d522      	bpl.n	8004152 <_scanf_i+0x142>
 800410c:	f10b 0b01 	add.w	fp, fp, #1
 8004110:	f1b9 0f00 	cmp.w	r9, #0
 8004114:	d003      	beq.n	800411e <_scanf_i+0x10e>
 8004116:	3301      	adds	r3, #1
 8004118:	f109 39ff 	add.w	r9, r9, #4294967295
 800411c:	60a3      	str	r3, [r4, #8]
 800411e:	6873      	ldr	r3, [r6, #4]
 8004120:	3b01      	subs	r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	6073      	str	r3, [r6, #4]
 8004126:	dd1b      	ble.n	8004160 <_scanf_i+0x150>
 8004128:	6833      	ldr	r3, [r6, #0]
 800412a:	3301      	adds	r3, #1
 800412c:	6033      	str	r3, [r6, #0]
 800412e:	68a3      	ldr	r3, [r4, #8]
 8004130:	3b01      	subs	r3, #1
 8004132:	60a3      	str	r3, [r4, #8]
 8004134:	e7d9      	b.n	80040ea <_scanf_i+0xda>
 8004136:	f1bb 0f02 	cmp.w	fp, #2
 800413a:	d1ae      	bne.n	800409a <_scanf_i+0x8a>
 800413c:	6822      	ldr	r2, [r4, #0]
 800413e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8004142:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004146:	d1bf      	bne.n	80040c8 <_scanf_i+0xb8>
 8004148:	2310      	movs	r3, #16
 800414a:	6063      	str	r3, [r4, #4]
 800414c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004150:	e7a2      	b.n	8004098 <_scanf_i+0x88>
 8004152:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8004156:	6022      	str	r2, [r4, #0]
 8004158:	780b      	ldrb	r3, [r1, #0]
 800415a:	f805 3b01 	strb.w	r3, [r5], #1
 800415e:	e7de      	b.n	800411e <_scanf_i+0x10e>
 8004160:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004164:	4631      	mov	r1, r6
 8004166:	4650      	mov	r0, sl
 8004168:	4798      	blx	r3
 800416a:	2800      	cmp	r0, #0
 800416c:	d0df      	beq.n	800412e <_scanf_i+0x11e>
 800416e:	6823      	ldr	r3, [r4, #0]
 8004170:	05db      	lsls	r3, r3, #23
 8004172:	d50d      	bpl.n	8004190 <_scanf_i+0x180>
 8004174:	42bd      	cmp	r5, r7
 8004176:	d909      	bls.n	800418c <_scanf_i+0x17c>
 8004178:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800417c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004180:	4632      	mov	r2, r6
 8004182:	4650      	mov	r0, sl
 8004184:	4798      	blx	r3
 8004186:	f105 39ff 	add.w	r9, r5, #4294967295
 800418a:	464d      	mov	r5, r9
 800418c:	42bd      	cmp	r5, r7
 800418e:	d02d      	beq.n	80041ec <_scanf_i+0x1dc>
 8004190:	6822      	ldr	r2, [r4, #0]
 8004192:	f012 0210 	ands.w	r2, r2, #16
 8004196:	d113      	bne.n	80041c0 <_scanf_i+0x1b0>
 8004198:	702a      	strb	r2, [r5, #0]
 800419a:	6863      	ldr	r3, [r4, #4]
 800419c:	9e01      	ldr	r6, [sp, #4]
 800419e:	4639      	mov	r1, r7
 80041a0:	4650      	mov	r0, sl
 80041a2:	47b0      	blx	r6
 80041a4:	6821      	ldr	r1, [r4, #0]
 80041a6:	f8d8 3000 	ldr.w	r3, [r8]
 80041aa:	f011 0f20 	tst.w	r1, #32
 80041ae:	d013      	beq.n	80041d8 <_scanf_i+0x1c8>
 80041b0:	1d1a      	adds	r2, r3, #4
 80041b2:	f8c8 2000 	str.w	r2, [r8]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6018      	str	r0, [r3, #0]
 80041ba:	68e3      	ldr	r3, [r4, #12]
 80041bc:	3301      	adds	r3, #1
 80041be:	60e3      	str	r3, [r4, #12]
 80041c0:	1bed      	subs	r5, r5, r7
 80041c2:	44ab      	add	fp, r5
 80041c4:	6925      	ldr	r5, [r4, #16]
 80041c6:	445d      	add	r5, fp
 80041c8:	6125      	str	r5, [r4, #16]
 80041ca:	2000      	movs	r0, #0
 80041cc:	b007      	add	sp, #28
 80041ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041d2:	f04f 0b00 	mov.w	fp, #0
 80041d6:	e7ca      	b.n	800416e <_scanf_i+0x15e>
 80041d8:	1d1a      	adds	r2, r3, #4
 80041da:	f8c8 2000 	str.w	r2, [r8]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f011 0f01 	tst.w	r1, #1
 80041e4:	bf14      	ite	ne
 80041e6:	8018      	strhne	r0, [r3, #0]
 80041e8:	6018      	streq	r0, [r3, #0]
 80041ea:	e7e6      	b.n	80041ba <_scanf_i+0x1aa>
 80041ec:	2001      	movs	r0, #1
 80041ee:	e7ed      	b.n	80041cc <_scanf_i+0x1bc>
 80041f0:	08004a5c 	.word	0x08004a5c
 80041f4:	0800445d 	.word	0x0800445d
 80041f8:	08004375 	.word	0x08004375
 80041fc:	08004acc 	.word	0x08004acc

08004200 <__sccl>:
 8004200:	b570      	push	{r4, r5, r6, lr}
 8004202:	780b      	ldrb	r3, [r1, #0]
 8004204:	4604      	mov	r4, r0
 8004206:	2b5e      	cmp	r3, #94	; 0x5e
 8004208:	bf0b      	itete	eq
 800420a:	784b      	ldrbeq	r3, [r1, #1]
 800420c:	1c48      	addne	r0, r1, #1
 800420e:	1c88      	addeq	r0, r1, #2
 8004210:	2200      	movne	r2, #0
 8004212:	bf08      	it	eq
 8004214:	2201      	moveq	r2, #1
 8004216:	1e61      	subs	r1, r4, #1
 8004218:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800421c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8004220:	42a9      	cmp	r1, r5
 8004222:	d1fb      	bne.n	800421c <__sccl+0x1c>
 8004224:	b90b      	cbnz	r3, 800422a <__sccl+0x2a>
 8004226:	3801      	subs	r0, #1
 8004228:	bd70      	pop	{r4, r5, r6, pc}
 800422a:	f082 0201 	eor.w	r2, r2, #1
 800422e:	54e2      	strb	r2, [r4, r3]
 8004230:	4605      	mov	r5, r0
 8004232:	4628      	mov	r0, r5
 8004234:	f810 1b01 	ldrb.w	r1, [r0], #1
 8004238:	292d      	cmp	r1, #45	; 0x2d
 800423a:	d006      	beq.n	800424a <__sccl+0x4a>
 800423c:	295d      	cmp	r1, #93	; 0x5d
 800423e:	d0f3      	beq.n	8004228 <__sccl+0x28>
 8004240:	b909      	cbnz	r1, 8004246 <__sccl+0x46>
 8004242:	4628      	mov	r0, r5
 8004244:	e7f0      	b.n	8004228 <__sccl+0x28>
 8004246:	460b      	mov	r3, r1
 8004248:	e7f1      	b.n	800422e <__sccl+0x2e>
 800424a:	786e      	ldrb	r6, [r5, #1]
 800424c:	2e5d      	cmp	r6, #93	; 0x5d
 800424e:	d0fa      	beq.n	8004246 <__sccl+0x46>
 8004250:	42b3      	cmp	r3, r6
 8004252:	dcf8      	bgt.n	8004246 <__sccl+0x46>
 8004254:	3502      	adds	r5, #2
 8004256:	4619      	mov	r1, r3
 8004258:	3101      	adds	r1, #1
 800425a:	428e      	cmp	r6, r1
 800425c:	5462      	strb	r2, [r4, r1]
 800425e:	dcfb      	bgt.n	8004258 <__sccl+0x58>
 8004260:	1af1      	subs	r1, r6, r3
 8004262:	3901      	subs	r1, #1
 8004264:	1c58      	adds	r0, r3, #1
 8004266:	42b3      	cmp	r3, r6
 8004268:	bfa8      	it	ge
 800426a:	2100      	movge	r1, #0
 800426c:	1843      	adds	r3, r0, r1
 800426e:	e7e0      	b.n	8004232 <__sccl+0x32>

08004270 <_strtol_l.constprop.0>:
 8004270:	2b01      	cmp	r3, #1
 8004272:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004276:	d001      	beq.n	800427c <_strtol_l.constprop.0+0xc>
 8004278:	2b24      	cmp	r3, #36	; 0x24
 800427a:	d906      	bls.n	800428a <_strtol_l.constprop.0+0x1a>
 800427c:	f7ff f918 	bl	80034b0 <__errno>
 8004280:	2316      	movs	r3, #22
 8004282:	6003      	str	r3, [r0, #0]
 8004284:	2000      	movs	r0, #0
 8004286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800428a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004370 <_strtol_l.constprop.0+0x100>
 800428e:	460d      	mov	r5, r1
 8004290:	462e      	mov	r6, r5
 8004292:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004296:	f814 700c 	ldrb.w	r7, [r4, ip]
 800429a:	f017 0708 	ands.w	r7, r7, #8
 800429e:	d1f7      	bne.n	8004290 <_strtol_l.constprop.0+0x20>
 80042a0:	2c2d      	cmp	r4, #45	; 0x2d
 80042a2:	d132      	bne.n	800430a <_strtol_l.constprop.0+0x9a>
 80042a4:	782c      	ldrb	r4, [r5, #0]
 80042a6:	2701      	movs	r7, #1
 80042a8:	1cb5      	adds	r5, r6, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d05b      	beq.n	8004366 <_strtol_l.constprop.0+0xf6>
 80042ae:	2b10      	cmp	r3, #16
 80042b0:	d109      	bne.n	80042c6 <_strtol_l.constprop.0+0x56>
 80042b2:	2c30      	cmp	r4, #48	; 0x30
 80042b4:	d107      	bne.n	80042c6 <_strtol_l.constprop.0+0x56>
 80042b6:	782c      	ldrb	r4, [r5, #0]
 80042b8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80042bc:	2c58      	cmp	r4, #88	; 0x58
 80042be:	d14d      	bne.n	800435c <_strtol_l.constprop.0+0xec>
 80042c0:	786c      	ldrb	r4, [r5, #1]
 80042c2:	2310      	movs	r3, #16
 80042c4:	3502      	adds	r5, #2
 80042c6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80042ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80042ce:	f04f 0c00 	mov.w	ip, #0
 80042d2:	fbb8 f9f3 	udiv	r9, r8, r3
 80042d6:	4666      	mov	r6, ip
 80042d8:	fb03 8a19 	mls	sl, r3, r9, r8
 80042dc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80042e0:	f1be 0f09 	cmp.w	lr, #9
 80042e4:	d816      	bhi.n	8004314 <_strtol_l.constprop.0+0xa4>
 80042e6:	4674      	mov	r4, lr
 80042e8:	42a3      	cmp	r3, r4
 80042ea:	dd24      	ble.n	8004336 <_strtol_l.constprop.0+0xc6>
 80042ec:	f1bc 0f00 	cmp.w	ip, #0
 80042f0:	db1e      	blt.n	8004330 <_strtol_l.constprop.0+0xc0>
 80042f2:	45b1      	cmp	r9, r6
 80042f4:	d31c      	bcc.n	8004330 <_strtol_l.constprop.0+0xc0>
 80042f6:	d101      	bne.n	80042fc <_strtol_l.constprop.0+0x8c>
 80042f8:	45a2      	cmp	sl, r4
 80042fa:	db19      	blt.n	8004330 <_strtol_l.constprop.0+0xc0>
 80042fc:	fb06 4603 	mla	r6, r6, r3, r4
 8004300:	f04f 0c01 	mov.w	ip, #1
 8004304:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004308:	e7e8      	b.n	80042dc <_strtol_l.constprop.0+0x6c>
 800430a:	2c2b      	cmp	r4, #43	; 0x2b
 800430c:	bf04      	itt	eq
 800430e:	782c      	ldrbeq	r4, [r5, #0]
 8004310:	1cb5      	addeq	r5, r6, #2
 8004312:	e7ca      	b.n	80042aa <_strtol_l.constprop.0+0x3a>
 8004314:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004318:	f1be 0f19 	cmp.w	lr, #25
 800431c:	d801      	bhi.n	8004322 <_strtol_l.constprop.0+0xb2>
 800431e:	3c37      	subs	r4, #55	; 0x37
 8004320:	e7e2      	b.n	80042e8 <_strtol_l.constprop.0+0x78>
 8004322:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004326:	f1be 0f19 	cmp.w	lr, #25
 800432a:	d804      	bhi.n	8004336 <_strtol_l.constprop.0+0xc6>
 800432c:	3c57      	subs	r4, #87	; 0x57
 800432e:	e7db      	b.n	80042e8 <_strtol_l.constprop.0+0x78>
 8004330:	f04f 3cff 	mov.w	ip, #4294967295
 8004334:	e7e6      	b.n	8004304 <_strtol_l.constprop.0+0x94>
 8004336:	f1bc 0f00 	cmp.w	ip, #0
 800433a:	da05      	bge.n	8004348 <_strtol_l.constprop.0+0xd8>
 800433c:	2322      	movs	r3, #34	; 0x22
 800433e:	6003      	str	r3, [r0, #0]
 8004340:	4646      	mov	r6, r8
 8004342:	b942      	cbnz	r2, 8004356 <_strtol_l.constprop.0+0xe6>
 8004344:	4630      	mov	r0, r6
 8004346:	e79e      	b.n	8004286 <_strtol_l.constprop.0+0x16>
 8004348:	b107      	cbz	r7, 800434c <_strtol_l.constprop.0+0xdc>
 800434a:	4276      	negs	r6, r6
 800434c:	2a00      	cmp	r2, #0
 800434e:	d0f9      	beq.n	8004344 <_strtol_l.constprop.0+0xd4>
 8004350:	f1bc 0f00 	cmp.w	ip, #0
 8004354:	d000      	beq.n	8004358 <_strtol_l.constprop.0+0xe8>
 8004356:	1e69      	subs	r1, r5, #1
 8004358:	6011      	str	r1, [r2, #0]
 800435a:	e7f3      	b.n	8004344 <_strtol_l.constprop.0+0xd4>
 800435c:	2430      	movs	r4, #48	; 0x30
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1b1      	bne.n	80042c6 <_strtol_l.constprop.0+0x56>
 8004362:	2308      	movs	r3, #8
 8004364:	e7af      	b.n	80042c6 <_strtol_l.constprop.0+0x56>
 8004366:	2c30      	cmp	r4, #48	; 0x30
 8004368:	d0a5      	beq.n	80042b6 <_strtol_l.constprop.0+0x46>
 800436a:	230a      	movs	r3, #10
 800436c:	e7ab      	b.n	80042c6 <_strtol_l.constprop.0+0x56>
 800436e:	bf00      	nop
 8004370:	08004acf 	.word	0x08004acf

08004374 <_strtol_r>:
 8004374:	f7ff bf7c 	b.w	8004270 <_strtol_l.constprop.0>

08004378 <_strtoul_l.constprop.0>:
 8004378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800437c:	4f36      	ldr	r7, [pc, #216]	; (8004458 <_strtoul_l.constprop.0+0xe0>)
 800437e:	4686      	mov	lr, r0
 8004380:	460d      	mov	r5, r1
 8004382:	4628      	mov	r0, r5
 8004384:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004388:	5de6      	ldrb	r6, [r4, r7]
 800438a:	f016 0608 	ands.w	r6, r6, #8
 800438e:	d1f8      	bne.n	8004382 <_strtoul_l.constprop.0+0xa>
 8004390:	2c2d      	cmp	r4, #45	; 0x2d
 8004392:	d12f      	bne.n	80043f4 <_strtoul_l.constprop.0+0x7c>
 8004394:	782c      	ldrb	r4, [r5, #0]
 8004396:	2601      	movs	r6, #1
 8004398:	1c85      	adds	r5, r0, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d057      	beq.n	800444e <_strtoul_l.constprop.0+0xd6>
 800439e:	2b10      	cmp	r3, #16
 80043a0:	d109      	bne.n	80043b6 <_strtoul_l.constprop.0+0x3e>
 80043a2:	2c30      	cmp	r4, #48	; 0x30
 80043a4:	d107      	bne.n	80043b6 <_strtoul_l.constprop.0+0x3e>
 80043a6:	7828      	ldrb	r0, [r5, #0]
 80043a8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80043ac:	2858      	cmp	r0, #88	; 0x58
 80043ae:	d149      	bne.n	8004444 <_strtoul_l.constprop.0+0xcc>
 80043b0:	786c      	ldrb	r4, [r5, #1]
 80043b2:	2310      	movs	r3, #16
 80043b4:	3502      	adds	r5, #2
 80043b6:	f04f 38ff 	mov.w	r8, #4294967295
 80043ba:	2700      	movs	r7, #0
 80043bc:	fbb8 f8f3 	udiv	r8, r8, r3
 80043c0:	fb03 f908 	mul.w	r9, r3, r8
 80043c4:	ea6f 0909 	mvn.w	r9, r9
 80043c8:	4638      	mov	r0, r7
 80043ca:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80043ce:	f1bc 0f09 	cmp.w	ip, #9
 80043d2:	d814      	bhi.n	80043fe <_strtoul_l.constprop.0+0x86>
 80043d4:	4664      	mov	r4, ip
 80043d6:	42a3      	cmp	r3, r4
 80043d8:	dd22      	ble.n	8004420 <_strtoul_l.constprop.0+0xa8>
 80043da:	2f00      	cmp	r7, #0
 80043dc:	db1d      	blt.n	800441a <_strtoul_l.constprop.0+0xa2>
 80043de:	4580      	cmp	r8, r0
 80043e0:	d31b      	bcc.n	800441a <_strtoul_l.constprop.0+0xa2>
 80043e2:	d101      	bne.n	80043e8 <_strtoul_l.constprop.0+0x70>
 80043e4:	45a1      	cmp	r9, r4
 80043e6:	db18      	blt.n	800441a <_strtoul_l.constprop.0+0xa2>
 80043e8:	fb00 4003 	mla	r0, r0, r3, r4
 80043ec:	2701      	movs	r7, #1
 80043ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80043f2:	e7ea      	b.n	80043ca <_strtoul_l.constprop.0+0x52>
 80043f4:	2c2b      	cmp	r4, #43	; 0x2b
 80043f6:	bf04      	itt	eq
 80043f8:	782c      	ldrbeq	r4, [r5, #0]
 80043fa:	1c85      	addeq	r5, r0, #2
 80043fc:	e7cd      	b.n	800439a <_strtoul_l.constprop.0+0x22>
 80043fe:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004402:	f1bc 0f19 	cmp.w	ip, #25
 8004406:	d801      	bhi.n	800440c <_strtoul_l.constprop.0+0x94>
 8004408:	3c37      	subs	r4, #55	; 0x37
 800440a:	e7e4      	b.n	80043d6 <_strtoul_l.constprop.0+0x5e>
 800440c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004410:	f1bc 0f19 	cmp.w	ip, #25
 8004414:	d804      	bhi.n	8004420 <_strtoul_l.constprop.0+0xa8>
 8004416:	3c57      	subs	r4, #87	; 0x57
 8004418:	e7dd      	b.n	80043d6 <_strtoul_l.constprop.0+0x5e>
 800441a:	f04f 37ff 	mov.w	r7, #4294967295
 800441e:	e7e6      	b.n	80043ee <_strtoul_l.constprop.0+0x76>
 8004420:	2f00      	cmp	r7, #0
 8004422:	da07      	bge.n	8004434 <_strtoul_l.constprop.0+0xbc>
 8004424:	2322      	movs	r3, #34	; 0x22
 8004426:	f8ce 3000 	str.w	r3, [lr]
 800442a:	f04f 30ff 	mov.w	r0, #4294967295
 800442e:	b932      	cbnz	r2, 800443e <_strtoul_l.constprop.0+0xc6>
 8004430:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004434:	b106      	cbz	r6, 8004438 <_strtoul_l.constprop.0+0xc0>
 8004436:	4240      	negs	r0, r0
 8004438:	2a00      	cmp	r2, #0
 800443a:	d0f9      	beq.n	8004430 <_strtoul_l.constprop.0+0xb8>
 800443c:	b107      	cbz	r7, 8004440 <_strtoul_l.constprop.0+0xc8>
 800443e:	1e69      	subs	r1, r5, #1
 8004440:	6011      	str	r1, [r2, #0]
 8004442:	e7f5      	b.n	8004430 <_strtoul_l.constprop.0+0xb8>
 8004444:	2430      	movs	r4, #48	; 0x30
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1b5      	bne.n	80043b6 <_strtoul_l.constprop.0+0x3e>
 800444a:	2308      	movs	r3, #8
 800444c:	e7b3      	b.n	80043b6 <_strtoul_l.constprop.0+0x3e>
 800444e:	2c30      	cmp	r4, #48	; 0x30
 8004450:	d0a9      	beq.n	80043a6 <_strtoul_l.constprop.0+0x2e>
 8004452:	230a      	movs	r3, #10
 8004454:	e7af      	b.n	80043b6 <_strtoul_l.constprop.0+0x3e>
 8004456:	bf00      	nop
 8004458:	08004acf 	.word	0x08004acf

0800445c <_strtoul_r>:
 800445c:	f7ff bf8c 	b.w	8004378 <_strtoul_l.constprop.0>

08004460 <__submore>:
 8004460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004464:	460c      	mov	r4, r1
 8004466:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004468:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800446c:	4299      	cmp	r1, r3
 800446e:	d11d      	bne.n	80044ac <__submore+0x4c>
 8004470:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004474:	f000 f8c4 	bl	8004600 <_malloc_r>
 8004478:	b918      	cbnz	r0, 8004482 <__submore+0x22>
 800447a:	f04f 30ff 	mov.w	r0, #4294967295
 800447e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004482:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004486:	63a3      	str	r3, [r4, #56]	; 0x38
 8004488:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800448c:	6360      	str	r0, [r4, #52]	; 0x34
 800448e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8004492:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004496:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800449a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800449e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80044a2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80044a6:	6020      	str	r0, [r4, #0]
 80044a8:	2000      	movs	r0, #0
 80044aa:	e7e8      	b.n	800447e <__submore+0x1e>
 80044ac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80044ae:	0077      	lsls	r7, r6, #1
 80044b0:	463a      	mov	r2, r7
 80044b2:	f000 f919 	bl	80046e8 <_realloc_r>
 80044b6:	4605      	mov	r5, r0
 80044b8:	2800      	cmp	r0, #0
 80044ba:	d0de      	beq.n	800447a <__submore+0x1a>
 80044bc:	eb00 0806 	add.w	r8, r0, r6
 80044c0:	4601      	mov	r1, r0
 80044c2:	4632      	mov	r2, r6
 80044c4:	4640      	mov	r0, r8
 80044c6:	f000 f807 	bl	80044d8 <memcpy>
 80044ca:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80044ce:	f8c4 8000 	str.w	r8, [r4]
 80044d2:	e7e9      	b.n	80044a8 <__submore+0x48>

080044d4 <__retarget_lock_acquire_recursive>:
 80044d4:	4770      	bx	lr

080044d6 <__retarget_lock_release_recursive>:
 80044d6:	4770      	bx	lr

080044d8 <memcpy>:
 80044d8:	440a      	add	r2, r1
 80044da:	4291      	cmp	r1, r2
 80044dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80044e0:	d100      	bne.n	80044e4 <memcpy+0xc>
 80044e2:	4770      	bx	lr
 80044e4:	b510      	push	{r4, lr}
 80044e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044ee:	4291      	cmp	r1, r2
 80044f0:	d1f9      	bne.n	80044e6 <memcpy+0xe>
 80044f2:	bd10      	pop	{r4, pc}

080044f4 <memmove>:
 80044f4:	4288      	cmp	r0, r1
 80044f6:	b510      	push	{r4, lr}
 80044f8:	eb01 0402 	add.w	r4, r1, r2
 80044fc:	d902      	bls.n	8004504 <memmove+0x10>
 80044fe:	4284      	cmp	r4, r0
 8004500:	4623      	mov	r3, r4
 8004502:	d807      	bhi.n	8004514 <memmove+0x20>
 8004504:	1e43      	subs	r3, r0, #1
 8004506:	42a1      	cmp	r1, r4
 8004508:	d008      	beq.n	800451c <memmove+0x28>
 800450a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800450e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004512:	e7f8      	b.n	8004506 <memmove+0x12>
 8004514:	4402      	add	r2, r0
 8004516:	4601      	mov	r1, r0
 8004518:	428a      	cmp	r2, r1
 800451a:	d100      	bne.n	800451e <memmove+0x2a>
 800451c:	bd10      	pop	{r4, pc}
 800451e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004522:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004526:	e7f7      	b.n	8004518 <memmove+0x24>

08004528 <_free_r>:
 8004528:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800452a:	2900      	cmp	r1, #0
 800452c:	d044      	beq.n	80045b8 <_free_r+0x90>
 800452e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004532:	9001      	str	r0, [sp, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	f1a1 0404 	sub.w	r4, r1, #4
 800453a:	bfb8      	it	lt
 800453c:	18e4      	addlt	r4, r4, r3
 800453e:	f000 f913 	bl	8004768 <__malloc_lock>
 8004542:	4a1e      	ldr	r2, [pc, #120]	; (80045bc <_free_r+0x94>)
 8004544:	9801      	ldr	r0, [sp, #4]
 8004546:	6813      	ldr	r3, [r2, #0]
 8004548:	b933      	cbnz	r3, 8004558 <_free_r+0x30>
 800454a:	6063      	str	r3, [r4, #4]
 800454c:	6014      	str	r4, [r2, #0]
 800454e:	b003      	add	sp, #12
 8004550:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004554:	f000 b90e 	b.w	8004774 <__malloc_unlock>
 8004558:	42a3      	cmp	r3, r4
 800455a:	d908      	bls.n	800456e <_free_r+0x46>
 800455c:	6825      	ldr	r5, [r4, #0]
 800455e:	1961      	adds	r1, r4, r5
 8004560:	428b      	cmp	r3, r1
 8004562:	bf01      	itttt	eq
 8004564:	6819      	ldreq	r1, [r3, #0]
 8004566:	685b      	ldreq	r3, [r3, #4]
 8004568:	1949      	addeq	r1, r1, r5
 800456a:	6021      	streq	r1, [r4, #0]
 800456c:	e7ed      	b.n	800454a <_free_r+0x22>
 800456e:	461a      	mov	r2, r3
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	b10b      	cbz	r3, 8004578 <_free_r+0x50>
 8004574:	42a3      	cmp	r3, r4
 8004576:	d9fa      	bls.n	800456e <_free_r+0x46>
 8004578:	6811      	ldr	r1, [r2, #0]
 800457a:	1855      	adds	r5, r2, r1
 800457c:	42a5      	cmp	r5, r4
 800457e:	d10b      	bne.n	8004598 <_free_r+0x70>
 8004580:	6824      	ldr	r4, [r4, #0]
 8004582:	4421      	add	r1, r4
 8004584:	1854      	adds	r4, r2, r1
 8004586:	42a3      	cmp	r3, r4
 8004588:	6011      	str	r1, [r2, #0]
 800458a:	d1e0      	bne.n	800454e <_free_r+0x26>
 800458c:	681c      	ldr	r4, [r3, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	6053      	str	r3, [r2, #4]
 8004592:	4421      	add	r1, r4
 8004594:	6011      	str	r1, [r2, #0]
 8004596:	e7da      	b.n	800454e <_free_r+0x26>
 8004598:	d902      	bls.n	80045a0 <_free_r+0x78>
 800459a:	230c      	movs	r3, #12
 800459c:	6003      	str	r3, [r0, #0]
 800459e:	e7d6      	b.n	800454e <_free_r+0x26>
 80045a0:	6825      	ldr	r5, [r4, #0]
 80045a2:	1961      	adds	r1, r4, r5
 80045a4:	428b      	cmp	r3, r1
 80045a6:	bf04      	itt	eq
 80045a8:	6819      	ldreq	r1, [r3, #0]
 80045aa:	685b      	ldreq	r3, [r3, #4]
 80045ac:	6063      	str	r3, [r4, #4]
 80045ae:	bf04      	itt	eq
 80045b0:	1949      	addeq	r1, r1, r5
 80045b2:	6021      	streq	r1, [r4, #0]
 80045b4:	6054      	str	r4, [r2, #4]
 80045b6:	e7ca      	b.n	800454e <_free_r+0x26>
 80045b8:	b003      	add	sp, #12
 80045ba:	bd30      	pop	{r4, r5, pc}
 80045bc:	20000228 	.word	0x20000228

080045c0 <sbrk_aligned>:
 80045c0:	b570      	push	{r4, r5, r6, lr}
 80045c2:	4e0e      	ldr	r6, [pc, #56]	; (80045fc <sbrk_aligned+0x3c>)
 80045c4:	460c      	mov	r4, r1
 80045c6:	6831      	ldr	r1, [r6, #0]
 80045c8:	4605      	mov	r5, r0
 80045ca:	b911      	cbnz	r1, 80045d2 <sbrk_aligned+0x12>
 80045cc:	f000 f8bc 	bl	8004748 <_sbrk_r>
 80045d0:	6030      	str	r0, [r6, #0]
 80045d2:	4621      	mov	r1, r4
 80045d4:	4628      	mov	r0, r5
 80045d6:	f000 f8b7 	bl	8004748 <_sbrk_r>
 80045da:	1c43      	adds	r3, r0, #1
 80045dc:	d00a      	beq.n	80045f4 <sbrk_aligned+0x34>
 80045de:	1cc4      	adds	r4, r0, #3
 80045e0:	f024 0403 	bic.w	r4, r4, #3
 80045e4:	42a0      	cmp	r0, r4
 80045e6:	d007      	beq.n	80045f8 <sbrk_aligned+0x38>
 80045e8:	1a21      	subs	r1, r4, r0
 80045ea:	4628      	mov	r0, r5
 80045ec:	f000 f8ac 	bl	8004748 <_sbrk_r>
 80045f0:	3001      	adds	r0, #1
 80045f2:	d101      	bne.n	80045f8 <sbrk_aligned+0x38>
 80045f4:	f04f 34ff 	mov.w	r4, #4294967295
 80045f8:	4620      	mov	r0, r4
 80045fa:	bd70      	pop	{r4, r5, r6, pc}
 80045fc:	2000022c 	.word	0x2000022c

08004600 <_malloc_r>:
 8004600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004604:	1ccd      	adds	r5, r1, #3
 8004606:	f025 0503 	bic.w	r5, r5, #3
 800460a:	3508      	adds	r5, #8
 800460c:	2d0c      	cmp	r5, #12
 800460e:	bf38      	it	cc
 8004610:	250c      	movcc	r5, #12
 8004612:	2d00      	cmp	r5, #0
 8004614:	4607      	mov	r7, r0
 8004616:	db01      	blt.n	800461c <_malloc_r+0x1c>
 8004618:	42a9      	cmp	r1, r5
 800461a:	d905      	bls.n	8004628 <_malloc_r+0x28>
 800461c:	230c      	movs	r3, #12
 800461e:	603b      	str	r3, [r7, #0]
 8004620:	2600      	movs	r6, #0
 8004622:	4630      	mov	r0, r6
 8004624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004628:	4e2e      	ldr	r6, [pc, #184]	; (80046e4 <_malloc_r+0xe4>)
 800462a:	f000 f89d 	bl	8004768 <__malloc_lock>
 800462e:	6833      	ldr	r3, [r6, #0]
 8004630:	461c      	mov	r4, r3
 8004632:	bb34      	cbnz	r4, 8004682 <_malloc_r+0x82>
 8004634:	4629      	mov	r1, r5
 8004636:	4638      	mov	r0, r7
 8004638:	f7ff ffc2 	bl	80045c0 <sbrk_aligned>
 800463c:	1c43      	adds	r3, r0, #1
 800463e:	4604      	mov	r4, r0
 8004640:	d14d      	bne.n	80046de <_malloc_r+0xde>
 8004642:	6834      	ldr	r4, [r6, #0]
 8004644:	4626      	mov	r6, r4
 8004646:	2e00      	cmp	r6, #0
 8004648:	d140      	bne.n	80046cc <_malloc_r+0xcc>
 800464a:	6823      	ldr	r3, [r4, #0]
 800464c:	4631      	mov	r1, r6
 800464e:	4638      	mov	r0, r7
 8004650:	eb04 0803 	add.w	r8, r4, r3
 8004654:	f000 f878 	bl	8004748 <_sbrk_r>
 8004658:	4580      	cmp	r8, r0
 800465a:	d13a      	bne.n	80046d2 <_malloc_r+0xd2>
 800465c:	6821      	ldr	r1, [r4, #0]
 800465e:	3503      	adds	r5, #3
 8004660:	1a6d      	subs	r5, r5, r1
 8004662:	f025 0503 	bic.w	r5, r5, #3
 8004666:	3508      	adds	r5, #8
 8004668:	2d0c      	cmp	r5, #12
 800466a:	bf38      	it	cc
 800466c:	250c      	movcc	r5, #12
 800466e:	4629      	mov	r1, r5
 8004670:	4638      	mov	r0, r7
 8004672:	f7ff ffa5 	bl	80045c0 <sbrk_aligned>
 8004676:	3001      	adds	r0, #1
 8004678:	d02b      	beq.n	80046d2 <_malloc_r+0xd2>
 800467a:	6823      	ldr	r3, [r4, #0]
 800467c:	442b      	add	r3, r5
 800467e:	6023      	str	r3, [r4, #0]
 8004680:	e00e      	b.n	80046a0 <_malloc_r+0xa0>
 8004682:	6822      	ldr	r2, [r4, #0]
 8004684:	1b52      	subs	r2, r2, r5
 8004686:	d41e      	bmi.n	80046c6 <_malloc_r+0xc6>
 8004688:	2a0b      	cmp	r2, #11
 800468a:	d916      	bls.n	80046ba <_malloc_r+0xba>
 800468c:	1961      	adds	r1, r4, r5
 800468e:	42a3      	cmp	r3, r4
 8004690:	6025      	str	r5, [r4, #0]
 8004692:	bf18      	it	ne
 8004694:	6059      	strne	r1, [r3, #4]
 8004696:	6863      	ldr	r3, [r4, #4]
 8004698:	bf08      	it	eq
 800469a:	6031      	streq	r1, [r6, #0]
 800469c:	5162      	str	r2, [r4, r5]
 800469e:	604b      	str	r3, [r1, #4]
 80046a0:	4638      	mov	r0, r7
 80046a2:	f104 060b 	add.w	r6, r4, #11
 80046a6:	f000 f865 	bl	8004774 <__malloc_unlock>
 80046aa:	f026 0607 	bic.w	r6, r6, #7
 80046ae:	1d23      	adds	r3, r4, #4
 80046b0:	1af2      	subs	r2, r6, r3
 80046b2:	d0b6      	beq.n	8004622 <_malloc_r+0x22>
 80046b4:	1b9b      	subs	r3, r3, r6
 80046b6:	50a3      	str	r3, [r4, r2]
 80046b8:	e7b3      	b.n	8004622 <_malloc_r+0x22>
 80046ba:	6862      	ldr	r2, [r4, #4]
 80046bc:	42a3      	cmp	r3, r4
 80046be:	bf0c      	ite	eq
 80046c0:	6032      	streq	r2, [r6, #0]
 80046c2:	605a      	strne	r2, [r3, #4]
 80046c4:	e7ec      	b.n	80046a0 <_malloc_r+0xa0>
 80046c6:	4623      	mov	r3, r4
 80046c8:	6864      	ldr	r4, [r4, #4]
 80046ca:	e7b2      	b.n	8004632 <_malloc_r+0x32>
 80046cc:	4634      	mov	r4, r6
 80046ce:	6876      	ldr	r6, [r6, #4]
 80046d0:	e7b9      	b.n	8004646 <_malloc_r+0x46>
 80046d2:	230c      	movs	r3, #12
 80046d4:	603b      	str	r3, [r7, #0]
 80046d6:	4638      	mov	r0, r7
 80046d8:	f000 f84c 	bl	8004774 <__malloc_unlock>
 80046dc:	e7a1      	b.n	8004622 <_malloc_r+0x22>
 80046de:	6025      	str	r5, [r4, #0]
 80046e0:	e7de      	b.n	80046a0 <_malloc_r+0xa0>
 80046e2:	bf00      	nop
 80046e4:	20000228 	.word	0x20000228

080046e8 <_realloc_r>:
 80046e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046ec:	4680      	mov	r8, r0
 80046ee:	4614      	mov	r4, r2
 80046f0:	460e      	mov	r6, r1
 80046f2:	b921      	cbnz	r1, 80046fe <_realloc_r+0x16>
 80046f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046f8:	4611      	mov	r1, r2
 80046fa:	f7ff bf81 	b.w	8004600 <_malloc_r>
 80046fe:	b92a      	cbnz	r2, 800470c <_realloc_r+0x24>
 8004700:	f7ff ff12 	bl	8004528 <_free_r>
 8004704:	4625      	mov	r5, r4
 8004706:	4628      	mov	r0, r5
 8004708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800470c:	f000 f838 	bl	8004780 <_malloc_usable_size_r>
 8004710:	4284      	cmp	r4, r0
 8004712:	4607      	mov	r7, r0
 8004714:	d802      	bhi.n	800471c <_realloc_r+0x34>
 8004716:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800471a:	d812      	bhi.n	8004742 <_realloc_r+0x5a>
 800471c:	4621      	mov	r1, r4
 800471e:	4640      	mov	r0, r8
 8004720:	f7ff ff6e 	bl	8004600 <_malloc_r>
 8004724:	4605      	mov	r5, r0
 8004726:	2800      	cmp	r0, #0
 8004728:	d0ed      	beq.n	8004706 <_realloc_r+0x1e>
 800472a:	42bc      	cmp	r4, r7
 800472c:	4622      	mov	r2, r4
 800472e:	4631      	mov	r1, r6
 8004730:	bf28      	it	cs
 8004732:	463a      	movcs	r2, r7
 8004734:	f7ff fed0 	bl	80044d8 <memcpy>
 8004738:	4631      	mov	r1, r6
 800473a:	4640      	mov	r0, r8
 800473c:	f7ff fef4 	bl	8004528 <_free_r>
 8004740:	e7e1      	b.n	8004706 <_realloc_r+0x1e>
 8004742:	4635      	mov	r5, r6
 8004744:	e7df      	b.n	8004706 <_realloc_r+0x1e>
	...

08004748 <_sbrk_r>:
 8004748:	b538      	push	{r3, r4, r5, lr}
 800474a:	4d06      	ldr	r5, [pc, #24]	; (8004764 <_sbrk_r+0x1c>)
 800474c:	2300      	movs	r3, #0
 800474e:	4604      	mov	r4, r0
 8004750:	4608      	mov	r0, r1
 8004752:	602b      	str	r3, [r5, #0]
 8004754:	f7fc fbf2 	bl	8000f3c <_sbrk>
 8004758:	1c43      	adds	r3, r0, #1
 800475a:	d102      	bne.n	8004762 <_sbrk_r+0x1a>
 800475c:	682b      	ldr	r3, [r5, #0]
 800475e:	b103      	cbz	r3, 8004762 <_sbrk_r+0x1a>
 8004760:	6023      	str	r3, [r4, #0]
 8004762:	bd38      	pop	{r3, r4, r5, pc}
 8004764:	20000220 	.word	0x20000220

08004768 <__malloc_lock>:
 8004768:	4801      	ldr	r0, [pc, #4]	; (8004770 <__malloc_lock+0x8>)
 800476a:	f7ff beb3 	b.w	80044d4 <__retarget_lock_acquire_recursive>
 800476e:	bf00      	nop
 8004770:	20000224 	.word	0x20000224

08004774 <__malloc_unlock>:
 8004774:	4801      	ldr	r0, [pc, #4]	; (800477c <__malloc_unlock+0x8>)
 8004776:	f7ff beae 	b.w	80044d6 <__retarget_lock_release_recursive>
 800477a:	bf00      	nop
 800477c:	20000224 	.word	0x20000224

08004780 <_malloc_usable_size_r>:
 8004780:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004784:	1f18      	subs	r0, r3, #4
 8004786:	2b00      	cmp	r3, #0
 8004788:	bfbc      	itt	lt
 800478a:	580b      	ldrlt	r3, [r1, r0]
 800478c:	18c0      	addlt	r0, r0, r3
 800478e:	4770      	bx	lr

08004790 <_init>:
 8004790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004792:	bf00      	nop
 8004794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004796:	bc08      	pop	{r3}
 8004798:	469e      	mov	lr, r3
 800479a:	4770      	bx	lr

0800479c <_fini>:
 800479c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479e:	bf00      	nop
 80047a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047a2:	bc08      	pop	{r3}
 80047a4:	469e      	mov	lr, r3
 80047a6:	4770      	bx	lr
