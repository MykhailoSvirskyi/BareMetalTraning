
BareMetalTraning05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004040  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080041d0  080041d0  000141d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042d0  080042d0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080042d0  080042d0  000142d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042d8  080042d8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042d8  080042d8  000142d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042dc  080042dc  000142dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080042e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000c4  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000134  20000134  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a4b7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b7f  00000000  00000000  0002a557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b0  00000000  00000000  0002c0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006e8  00000000  00000000  0002c888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021037  00000000  00000000  0002cf70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ad78  00000000  00000000  0004dfa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce694  00000000  00000000  00058d1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001273b3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002264  00000000  00000000  00127404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080041b8 	.word	0x080041b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080041b8 	.word	0x080041b8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b974 	b.w	8000d6c <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468e      	mov	lr, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14d      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4694      	mov	ip, r2
 8000aae:	d969      	bls.n	8000b84 <__udivmoddi4+0xe8>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b152      	cbz	r2, 8000acc <__udivmoddi4+0x30>
 8000ab6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aba:	f1c2 0120 	rsb	r1, r2, #32
 8000abe:	fa20 f101 	lsr.w	r1, r0, r1
 8000ac2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aca:	4094      	lsls	r4, r2
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	0c21      	lsrs	r1, r4, #16
 8000ad2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ad6:	fa1f f78c 	uxth.w	r7, ip
 8000ada:	fb08 e316 	mls	r3, r8, r6, lr
 8000ade:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ae2:	fb06 f107 	mul.w	r1, r6, r7
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000af2:	f080 811f 	bcs.w	8000d34 <__udivmoddi4+0x298>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 811c 	bls.w	8000d34 <__udivmoddi4+0x298>
 8000afc:	3e02      	subs	r6, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b08:	fb08 3310 	mls	r3, r8, r0, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb00 f707 	mul.w	r7, r0, r7
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x92>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b20:	f080 810a 	bcs.w	8000d38 <__udivmoddi4+0x29c>
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	f240 8107 	bls.w	8000d38 <__udivmoddi4+0x29c>
 8000b2a:	4464      	add	r4, ip
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	1be4      	subs	r4, r4, r7
 8000b34:	2600      	movs	r6, #0
 8000b36:	b11d      	cbz	r5, 8000b40 <__udivmoddi4+0xa4>
 8000b38:	40d4      	lsrs	r4, r2
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0xc2>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	f000 80ef 	beq.w	8000d2e <__udivmoddi4+0x292>
 8000b50:	2600      	movs	r6, #0
 8000b52:	e9c5 0100 	strd	r0, r1, [r5]
 8000b56:	4630      	mov	r0, r6
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	fab3 f683 	clz	r6, r3
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d14a      	bne.n	8000bfc <__udivmoddi4+0x160>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xd4>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80f9 	bhi.w	8000d62 <__udivmoddi4+0x2c6>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb61 0303 	sbc.w	r3, r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	469e      	mov	lr, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d0e0      	beq.n	8000b40 <__udivmoddi4+0xa4>
 8000b7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b82:	e7dd      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b84:	b902      	cbnz	r2, 8000b88 <__udivmoddi4+0xec>
 8000b86:	deff      	udf	#255	; 0xff
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	f040 8092 	bne.w	8000cb6 <__udivmoddi4+0x21a>
 8000b92:	eba1 010c 	sub.w	r1, r1, ip
 8000b96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9a:	fa1f fe8c 	uxth.w	lr, ip
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	0c20      	lsrs	r0, r4, #16
 8000ba2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ba6:	fb07 1113 	mls	r1, r7, r3, r1
 8000baa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bae:	fb0e f003 	mul.w	r0, lr, r3
 8000bb2:	4288      	cmp	r0, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x12c>
 8000bb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x12a>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f200 80cb 	bhi.w	8000d5c <__udivmoddi4+0x2c0>
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bdc:	45a6      	cmp	lr, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x156>
 8000be0:	eb1c 0404 	adds.w	r4, ip, r4
 8000be4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be8:	d202      	bcs.n	8000bf0 <__udivmoddi4+0x154>
 8000bea:	45a6      	cmp	lr, r4
 8000bec:	f200 80bb 	bhi.w	8000d66 <__udivmoddi4+0x2ca>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bfa:	e79c      	b.n	8000b36 <__udivmoddi4+0x9a>
 8000bfc:	f1c6 0720 	rsb	r7, r6, #32
 8000c00:	40b3      	lsls	r3, r6
 8000c02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c12:	431c      	orrs	r4, r3
 8000c14:	40f9      	lsrs	r1, r7
 8000c16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c22:	0c20      	lsrs	r0, r4, #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fb09 1118 	mls	r1, r9, r8, r1
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	fb08 f00e 	mul.w	r0, r8, lr
 8000c34:	4288      	cmp	r0, r1
 8000c36:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x1b8>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c44:	f080 8088 	bcs.w	8000d58 <__udivmoddi4+0x2bc>
 8000c48:	4288      	cmp	r0, r1
 8000c4a:	f240 8085 	bls.w	8000d58 <__udivmoddi4+0x2bc>
 8000c4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c52:	4461      	add	r1, ip
 8000c54:	1a09      	subs	r1, r1, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c68:	458e      	cmp	lr, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x1e2>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c74:	d26c      	bcs.n	8000d50 <__udivmoddi4+0x2b4>
 8000c76:	458e      	cmp	lr, r1
 8000c78:	d96a      	bls.n	8000d50 <__udivmoddi4+0x2b4>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c82:	fba0 9402 	umull	r9, r4, r0, r2
 8000c86:	eba1 010e 	sub.w	r1, r1, lr
 8000c8a:	42a1      	cmp	r1, r4
 8000c8c:	46c8      	mov	r8, r9
 8000c8e:	46a6      	mov	lr, r4
 8000c90:	d356      	bcc.n	8000d40 <__udivmoddi4+0x2a4>
 8000c92:	d053      	beq.n	8000d3c <__udivmoddi4+0x2a0>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x212>
 8000c96:	ebb3 0208 	subs.w	r2, r3, r8
 8000c9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ca2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ca6:	40f1      	lsrs	r1, r6
 8000ca8:	431f      	orrs	r7, r3
 8000caa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	f1c2 0320 	rsb	r3, r2, #32
 8000cba:	40d8      	lsrs	r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	4301      	orrs	r1, r0
 8000cc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cd8:	0c0b      	lsrs	r3, r1, #16
 8000cda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cde:	fb00 f60e 	mul.w	r6, r0, lr
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x260>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cf2:	d22f      	bcs.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf4:	429e      	cmp	r6, r3
 8000cf6:	d92d      	bls.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	b289      	uxth	r1, r1
 8000d00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d04:	fb07 3316 	mls	r3, r7, r6, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x28a>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d1c:	d216      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d914      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000d22:	3e02      	subs	r6, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	1ac9      	subs	r1, r1, r3
 8000d28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d2c:	e738      	b.n	8000ba0 <__udivmoddi4+0x104>
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e705      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e3      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6f8      	b.n	8000b2e <__udivmoddi4+0x92>
 8000d3c:	454b      	cmp	r3, r9
 8000d3e:	d2a9      	bcs.n	8000c94 <__udivmoddi4+0x1f8>
 8000d40:	ebb9 0802 	subs.w	r8, r9, r2
 8000d44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7a3      	b.n	8000c94 <__udivmoddi4+0x1f8>
 8000d4c:	4646      	mov	r6, r8
 8000d4e:	e7ea      	b.n	8000d26 <__udivmoddi4+0x28a>
 8000d50:	4620      	mov	r0, r4
 8000d52:	e794      	b.n	8000c7e <__udivmoddi4+0x1e2>
 8000d54:	4640      	mov	r0, r8
 8000d56:	e7d1      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d58:	46d0      	mov	r8, sl
 8000d5a:	e77b      	b.n	8000c54 <__udivmoddi4+0x1b8>
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	e732      	b.n	8000bc8 <__udivmoddi4+0x12c>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e709      	b.n	8000b7a <__udivmoddi4+0xde>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	e742      	b.n	8000bf2 <__udivmoddi4+0x156>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d76:	463b      	mov	r3, r7
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000d82:	4b21      	ldr	r3, [pc, #132]	; (8000e08 <MX_ADC2_Init+0x98>)
 8000d84:	4a21      	ldr	r2, [pc, #132]	; (8000e0c <MX_ADC2_Init+0x9c>)
 8000d86:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000d88:	4b1f      	ldr	r3, [pc, #124]	; (8000e08 <MX_ADC2_Init+0x98>)
 8000d8a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d8e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000d90:	4b1d      	ldr	r3, [pc, #116]	; (8000e08 <MX_ADC2_Init+0x98>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8000d96:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <MX_ADC2_Init+0x98>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <MX_ADC2_Init+0x98>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000da2:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <MX_ADC2_Init+0x98>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000daa:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <MX_ADC2_Init+0x98>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000db0:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <MX_ADC2_Init+0x98>)
 8000db2:	4a17      	ldr	r2, [pc, #92]	; (8000e10 <MX_ADC2_Init+0xa0>)
 8000db4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000db6:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <MX_ADC2_Init+0x98>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <MX_ADC2_Init+0x98>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <MX_ADC2_Init+0x98>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dca:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <MX_ADC2_Init+0x98>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000dd0:	480d      	ldr	r0, [pc, #52]	; (8000e08 <MX_ADC2_Init+0x98>)
 8000dd2:	f000 fd77 	bl	80018c4 <HAL_ADC_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000ddc:	f000 fba8 	bl	8001530 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000de0:	2309      	movs	r3, #9
 8000de2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000de4:	2301      	movs	r3, #1
 8000de6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000de8:	2307      	movs	r3, #7
 8000dea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000dec:	463b      	mov	r3, r7
 8000dee:	4619      	mov	r1, r3
 8000df0:	4805      	ldr	r0, [pc, #20]	; (8000e08 <MX_ADC2_Init+0x98>)
 8000df2:	f000 ff15 	bl	8001c20 <HAL_ADC_ConfigChannel>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000dfc:	f000 fb98 	bl	8001530 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e00:	bf00      	nop
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	2000008c 	.word	0x2000008c
 8000e0c:	40012100 	.word	0x40012100
 8000e10:	0f000001 	.word	0x0f000001

08000e14 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	; 0x28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a17      	ldr	r2, [pc, #92]	; (8000e90 <HAL_ADC_MspInit+0x7c>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d127      	bne.n	8000e86 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <HAL_ADC_MspInit+0x80>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3e:	4a15      	ldr	r2, [pc, #84]	; (8000e94 <HAL_ADC_MspInit+0x80>)
 8000e40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e44:	6453      	str	r3, [r2, #68]	; 0x44
 8000e46:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <HAL_ADC_MspInit+0x80>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <HAL_ADC_MspInit+0x80>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <HAL_ADC_MspInit+0x80>)
 8000e5c:	f043 0302 	orr.w	r3, r3, #2
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <HAL_ADC_MspInit+0x80>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e72:	2303      	movs	r3, #3
 8000e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4805      	ldr	r0, [pc, #20]	; (8000e98 <HAL_ADC_MspInit+0x84>)
 8000e82:	f001 f9fd 	bl	8002280 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000e86:	bf00      	nop
 8000e88:	3728      	adds	r7, #40	; 0x28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40012100 	.word	0x40012100
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40020400 	.word	0x40020400

08000e9c <_LED_STATUS>:
#include "usart.h"
#include <string.h>

void
_LED_STATUS (GPIO_TypeDef *gPIOx, uint16_t gPIO_Pin)
{
 8000e9c:	b590      	push	{r4, r7, lr}
 8000e9e:	b097      	sub	sp, #92	; 0x5c
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	807b      	strh	r3, [r7, #2]

  char gpioBLUE[] = "BLUE LED";
 8000ea8:	4a62      	ldr	r2, [pc, #392]	; (8001034 <_LED_STATUS+0x198>)
 8000eaa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000eae:	ca07      	ldmia	r2, {r0, r1, r2}
 8000eb0:	c303      	stmia	r3!, {r0, r1}
 8000eb2:	701a      	strb	r2, [r3, #0]
  char gpioRED[] = "RED LED";
 8000eb4:	4a60      	ldr	r2, [pc, #384]	; (8001038 <_LED_STATUS+0x19c>)
 8000eb6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000eba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ebe:	e883 0003 	stmia.w	r3, {r0, r1}
  char gpioGREEN[] = "GREEN LED";
 8000ec2:	4a5e      	ldr	r2, [pc, #376]	; (800103c <_LED_STATUS+0x1a0>)
 8000ec4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ec8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000eca:	c303      	stmia	r3!, {r0, r1}
 8000ecc:	801a      	strh	r2, [r3, #0]
  char gpioORANGE[] = "ORANGE LED";
 8000ece:	4a5c      	ldr	r2, [pc, #368]	; (8001040 <_LED_STATUS+0x1a4>)
 8000ed0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ed4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ed6:	c303      	stmia	r3!, {r0, r1}
 8000ed8:	801a      	strh	r2, [r3, #0]
 8000eda:	3302      	adds	r3, #2
 8000edc:	0c12      	lsrs	r2, r2, #16
 8000ede:	701a      	strb	r2, [r3, #0]
  char gpionotselect[] = "unknown gPIOx";
 8000ee0:	4b58      	ldr	r3, [pc, #352]	; (8001044 <_LED_STATUS+0x1a8>)
 8000ee2:	f107 0418 	add.w	r4, r7, #24
 8000ee6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ee8:	c407      	stmia	r4!, {r0, r1, r2}
 8000eea:	8023      	strh	r3, [r4, #0]
  uint32_t pointer;
  uint8_t size;
  char off[] = " OFF";
 8000eec:	4a56      	ldr	r2, [pc, #344]	; (8001048 <_LED_STATUS+0x1ac>)
 8000eee:	f107 0310 	add.w	r3, r7, #16
 8000ef2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ef6:	6018      	str	r0, [r3, #0]
 8000ef8:	3304      	adds	r3, #4
 8000efa:	7019      	strb	r1, [r3, #0]
  char on[] = "  ON";
 8000efc:	4a53      	ldr	r2, [pc, #332]	; (800104c <_LED_STATUS+0x1b0>)
 8000efe:	f107 0308 	add.w	r3, r7, #8
 8000f02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f06:	6018      	str	r0, [r3, #0]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	7019      	strb	r1, [r3, #0]

  HAL_GPIO_TogglePin (gPIOx, gPIO_Pin); //set pin
 8000f0c:	887b      	ldrh	r3, [r7, #2]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f001 fb82 	bl	800261a <HAL_GPIO_TogglePin>

  if (gPIOx == GPIOD)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a4d      	ldr	r2, [pc, #308]	; (8001050 <_LED_STATUS+0x1b4>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d14f      	bne.n	8000fbe <_LED_STATUS+0x122>
    {
      switch (gPIO_Pin)
 8000f1e:	887b      	ldrh	r3, [r7, #2]
 8000f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f24:	d033      	beq.n	8000f8e <_LED_STATUS+0xf2>
 8000f26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f2a:	dc3c      	bgt.n	8000fa6 <_LED_STATUS+0x10a>
 8000f2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f30:	d021      	beq.n	8000f76 <_LED_STATUS+0xda>
 8000f32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f36:	dc36      	bgt.n	8000fa6 <_LED_STATUS+0x10a>
 8000f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f3c:	d003      	beq.n	8000f46 <_LED_STATUS+0xaa>
 8000f3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f42:	d00c      	beq.n	8000f5e <_LED_STATUS+0xc2>
 8000f44:	e02f      	b.n	8000fa6 <_LED_STATUS+0x10a>
	{
	case LED_GREEN_Pin:
	  pointer = gpioGREEN;
 8000f46:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f4a:	657b      	str	r3, [r7, #84]	; 0x54
	  size = strlen ((char*) gpioGREEN);
 8000f4c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff f93d 	bl	80001d0 <strlen>
 8000f56:	4603      	mov	r3, r0
 8000f58:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	  break;
 8000f5c:	e035      	b.n	8000fca <_LED_STATUS+0x12e>

	case LED_ORANGE_Pin:
	  pointer = gpioORANGE;
 8000f5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f62:	657b      	str	r3, [r7, #84]	; 0x54
	  size = strlen ((char*) gpioORANGE);
 8000f64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff f931 	bl	80001d0 <strlen>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	  break;
 8000f74:	e029      	b.n	8000fca <_LED_STATUS+0x12e>

	case LED_RED_Pin:
	  pointer = gpioRED;
 8000f76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f7a:	657b      	str	r3, [r7, #84]	; 0x54
	  size = strlen ((char*) gpioRED);
 8000f7c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff f925 	bl	80001d0 <strlen>
 8000f86:	4603      	mov	r3, r0
 8000f88:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	  break;
 8000f8c:	e01d      	b.n	8000fca <_LED_STATUS+0x12e>

	case LED_BLUE_Pin:
	  pointer = gpioBLUE;
 8000f8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f92:	657b      	str	r3, [r7, #84]	; 0x54
	  size = strlen ((char*) gpioBLUE);
 8000f94:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff f919 	bl	80001d0 <strlen>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	  break;
 8000fa4:	e011      	b.n	8000fca <_LED_STATUS+0x12e>
	default:
	  pointer = gpionotselect;
 8000fa6:	f107 0318 	add.w	r3, r7, #24
 8000faa:	657b      	str	r3, [r7, #84]	; 0x54
	  size = strlen ((char*) gpionotselect);
 8000fac:	f107 0318 	add.w	r3, r7, #24
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff f90d 	bl	80001d0 <strlen>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	  break;
 8000fbc:	e005      	b.n	8000fca <_LED_STATUS+0x12e>
	}
    }
  else
    {
      HAL_UART_Transmit (&huart3, "PORT not D\r\n", 10, 100);
 8000fbe:	2364      	movs	r3, #100	; 0x64
 8000fc0:	220a      	movs	r2, #10
 8000fc2:	4924      	ldr	r1, [pc, #144]	; (8001054 <_LED_STATUS+0x1b8>)
 8000fc4:	4824      	ldr	r0, [pc, #144]	; (8001058 <_LED_STATUS+0x1bc>)
 8000fc6:	f002 f840 	bl	800304a <HAL_UART_Transmit>
    }
  HAL_UART_Transmit (&huart3, pointer, size, 100); //send name of pin
 8000fca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000fcc:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	2364      	movs	r3, #100	; 0x64
 8000fd4:	4820      	ldr	r0, [pc, #128]	; (8001058 <_LED_STATUS+0x1bc>)
 8000fd6:	f002 f838 	bl	800304a <HAL_UART_Transmit>

  if (HAL_GPIO_ReadPin (gPIOx, gPIO_Pin) == GPIO_PIN_SET) //check if on/off and print in terminal //not work if open-drain mode!
 8000fda:	887b      	ldrh	r3, [r7, #2]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f001 faea 	bl	80025b8 <HAL_GPIO_ReadPin>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d10d      	bne.n	8001006 <_LED_STATUS+0x16a>
    {
      HAL_UART_Transmit (&huart3, on, strlen ((char*) on), 100);
 8000fea:	f107 0308 	add.w	r3, r7, #8
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff f8ee 	bl	80001d0 <strlen>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	f107 0108 	add.w	r1, r7, #8
 8000ffc:	2364      	movs	r3, #100	; 0x64
 8000ffe:	4816      	ldr	r0, [pc, #88]	; (8001058 <_LED_STATUS+0x1bc>)
 8001000:	f002 f823 	bl	800304a <HAL_UART_Transmit>
 8001004:	e00c      	b.n	8001020 <_LED_STATUS+0x184>
    }
  else
    {
      HAL_UART_Transmit (&huart3, off, strlen ((char*) off), 100);
 8001006:	f107 0310 	add.w	r3, r7, #16
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff f8e0 	bl	80001d0 <strlen>
 8001010:	4603      	mov	r3, r0
 8001012:	b29a      	uxth	r2, r3
 8001014:	f107 0110 	add.w	r1, r7, #16
 8001018:	2364      	movs	r3, #100	; 0x64
 800101a:	480f      	ldr	r0, [pc, #60]	; (8001058 <_LED_STATUS+0x1bc>)
 800101c:	f002 f815 	bl	800304a <HAL_UART_Transmit>
    }
  HAL_UART_Transmit (&huart3, "\r\n", 2, 100);
 8001020:	2364      	movs	r3, #100	; 0x64
 8001022:	2202      	movs	r2, #2
 8001024:	490d      	ldr	r1, [pc, #52]	; (800105c <_LED_STATUS+0x1c0>)
 8001026:	480c      	ldr	r0, [pc, #48]	; (8001058 <_LED_STATUS+0x1bc>)
 8001028:	f002 f80f 	bl	800304a <HAL_UART_Transmit>
}
 800102c:	bf00      	nop
 800102e:	375c      	adds	r7, #92	; 0x5c
 8001030:	46bd      	mov	sp, r7
 8001032:	bd90      	pop	{r4, r7, pc}
 8001034:	080041e4 	.word	0x080041e4
 8001038:	080041f0 	.word	0x080041f0
 800103c:	080041f8 	.word	0x080041f8
 8001040:	08004204 	.word	0x08004204
 8001044:	08004210 	.word	0x08004210
 8001048:	08004220 	.word	0x08004220
 800104c:	08004228 	.word	0x08004228
 8001050:	40020c00 	.word	0x40020c00
 8001054:	080041d0 	.word	0x080041d0
 8001058:	200000dc 	.word	0x200000dc
 800105c:	080041e0 	.word	0x080041e0

08001060 <_Button_reader>:

void
_Button_reader (uint16_t GPIO)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	80fb      	strh	r3, [r7, #6]

  switch (GPIO)
 800106a:	88fb      	ldrh	r3, [r7, #6]
 800106c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001070:	d01a      	beq.n	80010a8 <_Button_reader+0x48>
 8001072:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001076:	dc3e      	bgt.n	80010f6 <_Button_reader+0x96>
 8001078:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800107c:	d00e      	beq.n	800109c <_Button_reader+0x3c>
 800107e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001082:	dc38      	bgt.n	80010f6 <_Button_reader+0x96>
 8001084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001088:	d023      	beq.n	80010d2 <_Button_reader+0x72>
 800108a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800108e:	dc32      	bgt.n	80010f6 <_Button_reader+0x96>
 8001090:	2b40      	cmp	r3, #64	; 0x40
 8001092:	d024      	beq.n	80010de <_Button_reader+0x7e>
 8001094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001098:	d027      	beq.n	80010ea <_Button_reader+0x8a>

    case SWT5_Pin:
      _LED_STATUS (GPIOD, LED_GREEN_Pin);
      break;
    }
}
 800109a:	e02c      	b.n	80010f6 <_Button_reader+0x96>
      _LED_STATUS (GPIOD, LED_BLUE_Pin);
 800109c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010a0:	4817      	ldr	r0, [pc, #92]	; (8001100 <_Button_reader+0xa0>)
 80010a2:	f7ff fefb 	bl	8000e9c <_LED_STATUS>
      break;
 80010a6:	e026      	b.n	80010f6 <_Button_reader+0x96>
      _LED_STATUS (GPIOD, LED_BLUE_Pin);
 80010a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ac:	4814      	ldr	r0, [pc, #80]	; (8001100 <_Button_reader+0xa0>)
 80010ae:	f7ff fef5 	bl	8000e9c <_LED_STATUS>
      _LED_STATUS (GPIOD, LED_ORANGE_Pin);
 80010b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010b6:	4812      	ldr	r0, [pc, #72]	; (8001100 <_Button_reader+0xa0>)
 80010b8:	f7ff fef0 	bl	8000e9c <_LED_STATUS>
      _LED_STATUS (GPIOD, LED_RED_Pin);
 80010bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010c0:	480f      	ldr	r0, [pc, #60]	; (8001100 <_Button_reader+0xa0>)
 80010c2:	f7ff feeb 	bl	8000e9c <_LED_STATUS>
      _LED_STATUS (GPIOD, LED_GREEN_Pin);
 80010c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ca:	480d      	ldr	r0, [pc, #52]	; (8001100 <_Button_reader+0xa0>)
 80010cc:	f7ff fee6 	bl	8000e9c <_LED_STATUS>
      break;
 80010d0:	e011      	b.n	80010f6 <_Button_reader+0x96>
      _LED_STATUS (GPIOD, LED_ORANGE_Pin);
 80010d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010d6:	480a      	ldr	r0, [pc, #40]	; (8001100 <_Button_reader+0xa0>)
 80010d8:	f7ff fee0 	bl	8000e9c <_LED_STATUS>
      break;
 80010dc:	e00b      	b.n	80010f6 <_Button_reader+0x96>
      _LED_STATUS (GPIOD, LED_RED_Pin);
 80010de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010e2:	4807      	ldr	r0, [pc, #28]	; (8001100 <_Button_reader+0xa0>)
 80010e4:	f7ff feda 	bl	8000e9c <_LED_STATUS>
      break;
 80010e8:	e005      	b.n	80010f6 <_Button_reader+0x96>
      _LED_STATUS (GPIOD, LED_GREEN_Pin);
 80010ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ee:	4804      	ldr	r0, [pc, #16]	; (8001100 <_Button_reader+0xa0>)
 80010f0:	f7ff fed4 	bl	8000e9c <_LED_STATUS>
      break;
 80010f4:	bf00      	nop
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40020c00 	.word	0x40020c00

08001104 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB1   ------> ADCx_IN9
*/
void MX_GPIO_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	; 0x28
 8001108:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
 8001118:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	4b4a      	ldr	r3, [pc, #296]	; (8001248 <MX_GPIO_Init+0x144>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a49      	ldr	r2, [pc, #292]	; (8001248 <MX_GPIO_Init+0x144>)
 8001124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b47      	ldr	r3, [pc, #284]	; (8001248 <MX_GPIO_Init+0x144>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	4b43      	ldr	r3, [pc, #268]	; (8001248 <MX_GPIO_Init+0x144>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a42      	ldr	r2, [pc, #264]	; (8001248 <MX_GPIO_Init+0x144>)
 8001140:	f043 0302 	orr.w	r3, r3, #2
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b40      	ldr	r3, [pc, #256]	; (8001248 <MX_GPIO_Init+0x144>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	4b3c      	ldr	r3, [pc, #240]	; (8001248 <MX_GPIO_Init+0x144>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a3b      	ldr	r2, [pc, #236]	; (8001248 <MX_GPIO_Init+0x144>)
 800115c:	f043 0308 	orr.w	r3, r3, #8
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b39      	ldr	r3, [pc, #228]	; (8001248 <MX_GPIO_Init+0x144>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0308 	and.w	r3, r3, #8
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	4b35      	ldr	r3, [pc, #212]	; (8001248 <MX_GPIO_Init+0x144>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a34      	ldr	r2, [pc, #208]	; (8001248 <MX_GPIO_Init+0x144>)
 8001178:	f043 0304 	orr.w	r3, r3, #4
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b32      	ldr	r3, [pc, #200]	; (8001248 <MX_GPIO_Init+0x144>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0304 	and.w	r3, r3, #4
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	603b      	str	r3, [r7, #0]
 800118e:	4b2e      	ldr	r3, [pc, #184]	; (8001248 <MX_GPIO_Init+0x144>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a2d      	ldr	r2, [pc, #180]	; (8001248 <MX_GPIO_Init+0x144>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b2b      	ldr	r3, [pc, #172]	; (8001248 <MX_GPIO_Init+0x144>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	603b      	str	r3, [r7, #0]
 80011a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80011ac:	4827      	ldr	r0, [pc, #156]	; (800124c <MX_GPIO_Init+0x148>)
 80011ae:	f001 fa1b 	bl	80025e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011b2:	2302      	movs	r3, #2
 80011b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011b6:	2303      	movs	r3, #3
 80011b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4619      	mov	r1, r3
 80011c4:	4822      	ldr	r0, [pc, #136]	; (8001250 <MX_GPIO_Init+0x14c>)
 80011c6:	f001 f85b 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin;
 80011ca:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80011ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d0:	2301      	movs	r3, #1
 80011d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d8:	2300      	movs	r3, #0
 80011da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	4619      	mov	r1, r3
 80011e2:	481a      	ldr	r0, [pc, #104]	; (800124c <MX_GPIO_Init+0x148>)
 80011e4:	f001 f84c 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SWT4_Pin|SWT5_Pin|SWT3_Pin|SWT1_Pin;
 80011e8:	f44f 6334 	mov.w	r3, #2880	; 0xb40
 80011ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	4619      	mov	r1, r3
 80011fe:	4815      	ldr	r0, [pc, #84]	; (8001254 <MX_GPIO_Init+0x150>)
 8001200:	f001 f83e 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SWT2_Pin;
 8001204:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001208:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800120a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800120e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SWT2_GPIO_Port, &GPIO_InitStruct);
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4619      	mov	r1, r3
 800121a:	480f      	ldr	r0, [pc, #60]	; (8001258 <MX_GPIO_Init+0x154>)
 800121c:	f001 f830 	bl	8002280 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001220:	2200      	movs	r2, #0
 8001222:	2100      	movs	r1, #0
 8001224:	2017      	movs	r0, #23
 8001226:	f000 fff4 	bl	8002212 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800122a:	2017      	movs	r0, #23
 800122c:	f001 f80d 	bl	800224a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001230:	2200      	movs	r2, #0
 8001232:	2100      	movs	r1, #0
 8001234:	2028      	movs	r0, #40	; 0x28
 8001236:	f000 ffec 	bl	8002212 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800123a:	2028      	movs	r0, #40	; 0x28
 800123c:	f001 f805 	bl	800224a <HAL_NVIC_EnableIRQ>

}
 8001240:	bf00      	nop
 8001242:	3728      	adds	r7, #40	; 0x28
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40023800 	.word	0x40023800
 800124c:	40020c00 	.word	0x40020c00
 8001250:	40020400 	.word	0x40020400
 8001254:	40020800 	.word	0x40020800
 8001258:	40020000 	.word	0x40020000

0800125c <HAL_GPIO_EXTI_Callback>:
void
SystemClock_Config (void);
/* USER CODE BEGIN PFP */
void
HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	80fb      	strh	r3, [r7, #6]
  uint32_t time = HAL_GetTick ();
 8001266:	f000 fb21 	bl	80018ac <HAL_GetTick>
 800126a:	60f8      	str	r0, [r7, #12]

  if (time - last_time > DEBOUNCE)
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <HAL_GPIO_EXTI_Callback+0x34>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b64      	cmp	r3, #100	; 0x64
 8001276:	d903      	bls.n	8001280 <HAL_GPIO_EXTI_Callback+0x24>
    {
      _Button_reader (GPIO_Pin);
 8001278:	88fb      	ldrh	r3, [r7, #6]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fef0 	bl	8001060 <_Button_reader>
    }
  last_time = time;
 8001280:	4a03      	ldr	r2, [pc, #12]	; (8001290 <HAL_GPIO_EXTI_Callback+0x34>)
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	6013      	str	r3, [r2, #0]

}
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200000d4 	.word	0x200000d4
 8001294:	00000000 	.word	0x00000000

08001298 <main>:
 * @brief  The application entry point.
 * @retval int
 */
int
main (void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b096      	sub	sp, #88	; 0x58
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init ();
 800129e:	f000 fa9f 	bl	80017e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config ();
 80012a2:	f000 f8e7 	bl	8001474 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init ();
 80012a6:	f7ff ff2d 	bl	8001104 <MX_GPIO_Init>
  MX_USART3_UART_Init ();
 80012aa:	f000 f9fd 	bl	80016a8 <MX_USART3_UART_Init>
  MX_ADC2_Init ();
 80012ae:	f7ff fd5f 	bl	8000d70 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  volatile HAL_StatusTypeDef adcPoolResult;
  uint32_t lastTick = 0, maxTick = temp_time_every_ms,      adcValue = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	657b      	str	r3, [r7, #84]	; 0x54
 80012b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80012ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80012bc:	2300      	movs	r3, #0
 80012be:	653b      	str	r3, [r7, #80]	; 0x50
  int8_t temp = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  uint8_t tx[64];
  uint8_t rx;
  HAL_UART_Transmit (&huart3, "togle led pin use $<> 1-4 if all led $5\r\n", 41,100); /*start text*/
 80012c6:	2364      	movs	r3, #100	; 0x64
 80012c8:	2229      	movs	r2, #41	; 0x29
 80012ca:	4963      	ldr	r1, [pc, #396]	; (8001458 <main+0x1c0>)
 80012cc:	4863      	ldr	r0, [pc, #396]	; (800145c <main+0x1c4>)
 80012ce:	f001 febc 	bl	800304a <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
    {
/*temperature deterimine and send */
      if (HAL_GetTick () - lastTick >= maxTick)
 80012d2:	f000 faeb 	bl	80018ac <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80012de:	429a      	cmp	r2, r3
 80012e0:	d84b      	bhi.n	800137a <main+0xe2>
	{

	  HAL_ADC_Start (&hadc2);
 80012e2:	485f      	ldr	r0, [pc, #380]	; (8001460 <main+0x1c8>)
 80012e4:	f000 fb32 	bl	800194c <HAL_ADC_Start>
	  adcPoolResult = HAL_ADC_PollForConversion (&hadc2, 100);
 80012e8:	2164      	movs	r1, #100	; 0x64
 80012ea:	485d      	ldr	r0, [pc, #372]	; (8001460 <main+0x1c8>)
 80012ec:	f000 fc00 	bl	8001af0 <HAL_ADC_PollForConversion>
 80012f0:	4603      	mov	r3, r0
 80012f2:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	  if (adcPoolResult == HAL_OK)
 80012f6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d103      	bne.n	8001308 <main+0x70>
	    {
	      adcValue = HAL_ADC_GetValue (&hadc2);
 8001300:	4857      	ldr	r0, [pc, #348]	; (8001460 <main+0x1c8>)
 8001302:	f000 fc80 	bl	8001c06 <HAL_ADC_GetValue>
 8001306:	6538      	str	r0, [r7, #80]	; 0x50
	    }
	  lastTick = HAL_GetTick ();
 8001308:	f000 fad0 	bl	80018ac <HAL_GetTick>
 800130c:	6578      	str	r0, [r7, #84]	; 0x54
	  temp = ADC_TO_CELSIUS(adcValue);
 800130e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001310:	f640 12cb 	movw	r2, #2507	; 0x9cb
 8001314:	4293      	cmp	r3, r2
 8001316:	d817      	bhi.n	8001348 <main+0xb0>
 8001318:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800131a:	f7ff f8f3 	bl	8000504 <__aeabi_ui2d>
 800131e:	a34c      	add	r3, pc, #304	; (adr r3, 8001450 <main+0x1b8>)
 8001320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001324:	f7ff fa92 	bl	800084c <__aeabi_ddiv>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	f04f 0000 	mov.w	r0, #0
 8001330:	494c      	ldr	r1, [pc, #304]	; (8001464 <main+0x1cc>)
 8001332:	f7fe ffa9 	bl	8000288 <__aeabi_dsub>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	f7ff fb6d 	bl	8000a1c <__aeabi_d2iz>
 8001342:	4603      	mov	r3, r0
 8001344:	b25b      	sxtb	r3, r3
 8001346:	e001      	b.n	800134c <main+0xb4>
 8001348:	f06f 0357 	mvn.w	r3, #87	; 0x57
 800134c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	  sprintf (tx, "temperature=%d C\r\n", temp); //
 8001350:	f997 204b 	ldrsb.w	r2, [r7, #75]	; 0x4b
 8001354:	f107 0308 	add.w	r3, r7, #8
 8001358:	4943      	ldr	r1, [pc, #268]	; (8001468 <main+0x1d0>)
 800135a:	4618      	mov	r0, r3
 800135c:	f002 fabe 	bl	80038dc <siprintf>
	  HAL_UART_Transmit (&huart3, tx, strlen ((char*) tx), 100);
 8001360:	f107 0308 	add.w	r3, r7, #8
 8001364:	4618      	mov	r0, r3
 8001366:	f7fe ff33 	bl	80001d0 <strlen>
 800136a:	4603      	mov	r3, r0
 800136c:	b29a      	uxth	r2, r3
 800136e:	f107 0108 	add.w	r1, r7, #8
 8001372:	2364      	movs	r3, #100	; 0x64
 8001374:	4839      	ldr	r0, [pc, #228]	; (800145c <main+0x1c4>)
 8001376:	f001 fe68 	bl	800304a <HAL_UART_Transmit>

	}
/*read command from terminal, setup pin*/
      if (HAL_UART_Receive (&huart3, &rx, 1, 10) == HAL_OK)
 800137a:	1df9      	adds	r1, r7, #7
 800137c:	230a      	movs	r3, #10
 800137e:	2201      	movs	r2, #1
 8001380:	4836      	ldr	r0, [pc, #216]	; (800145c <main+0x1c4>)
 8001382:	f001 fef4 	bl	800316e <HAL_UART_Receive>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d15d      	bne.n	8001448 <main+0x1b0>
	{
	  if (rx == '\r' || rx == '\n')
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	2b0d      	cmp	r3, #13
 8001390:	d05a      	beq.n	8001448 <main+0x1b0>
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	2b0a      	cmp	r3, #10
 8001396:	d09c      	beq.n	80012d2 <main+0x3a>
	    {
	    } /* If \r or \n print text */

	  else if (rx == '$'&& HAL_UART_Receive (&huart3, &rx, 1, 10) == HAL_OK) //read second byte from UART buffer
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	2b24      	cmp	r3, #36	; 0x24
 800139c:	d154      	bne.n	8001448 <main+0x1b0>
 800139e:	1df9      	adds	r1, r7, #7
 80013a0:	230a      	movs	r3, #10
 80013a2:	2201      	movs	r2, #1
 80013a4:	482d      	ldr	r0, [pc, #180]	; (800145c <main+0x1c4>)
 80013a6:	f001 fee2 	bl	800316e <HAL_UART_Receive>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d14b      	bne.n	8001448 <main+0x1b0>
	    {
	      switch (rx)
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	3b31      	subs	r3, #49	; 0x31
 80013b4:	2b04      	cmp	r3, #4
 80013b6:	d83a      	bhi.n	800142e <main+0x196>
 80013b8:	a201      	add	r2, pc, #4	; (adr r2, 80013c0 <main+0x128>)
 80013ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013be:	bf00      	nop
 80013c0:	080013d5 	.word	0x080013d5
 80013c4:	080013e1 	.word	0x080013e1
 80013c8:	080013ed 	.word	0x080013ed
 80013cc:	080013f9 	.word	0x080013f9
 80013d0:	08001405 	.word	0x08001405
		{
		case '1':
		  _LED_STATUS (GPIOD, LED_BLUE_Pin); //Toggle pin and print to terminal pin status
 80013d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013d8:	4824      	ldr	r0, [pc, #144]	; (800146c <main+0x1d4>)
 80013da:	f7ff fd5f 	bl	8000e9c <_LED_STATUS>
		  break;
 80013de:	e034      	b.n	800144a <main+0x1b2>
		case '2':
		  _LED_STATUS (GPIOD, LED_ORANGE_Pin);
 80013e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013e4:	4821      	ldr	r0, [pc, #132]	; (800146c <main+0x1d4>)
 80013e6:	f7ff fd59 	bl	8000e9c <_LED_STATUS>
		  break;
 80013ea:	e02e      	b.n	800144a <main+0x1b2>
		case '3':
		  _LED_STATUS (GPIOD, LED_RED_Pin);
 80013ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013f0:	481e      	ldr	r0, [pc, #120]	; (800146c <main+0x1d4>)
 80013f2:	f7ff fd53 	bl	8000e9c <_LED_STATUS>
		  break;
 80013f6:	e028      	b.n	800144a <main+0x1b2>
		case '4':
		  _LED_STATUS (GPIOD, LED_GREEN_Pin);
 80013f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013fc:	481b      	ldr	r0, [pc, #108]	; (800146c <main+0x1d4>)
 80013fe:	f7ff fd4d 	bl	8000e9c <_LED_STATUS>
		  break;
 8001402:	e022      	b.n	800144a <main+0x1b2>
		case '5':
		  _LED_STATUS (GPIOD, LED_BLUE_Pin);
 8001404:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001408:	4818      	ldr	r0, [pc, #96]	; (800146c <main+0x1d4>)
 800140a:	f7ff fd47 	bl	8000e9c <_LED_STATUS>
		  _LED_STATUS (GPIOD, LED_ORANGE_Pin);
 800140e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001412:	4816      	ldr	r0, [pc, #88]	; (800146c <main+0x1d4>)
 8001414:	f7ff fd42 	bl	8000e9c <_LED_STATUS>
		  _LED_STATUS (GPIOD, LED_RED_Pin);
 8001418:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800141c:	4813      	ldr	r0, [pc, #76]	; (800146c <main+0x1d4>)
 800141e:	f7ff fd3d 	bl	8000e9c <_LED_STATUS>
		  _LED_STATUS (GPIOD, LED_GREEN_Pin);
 8001422:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001426:	4811      	ldr	r0, [pc, #68]	; (800146c <main+0x1d4>)
 8001428:	f7ff fd38 	bl	8000e9c <_LED_STATUS>
		  break;
 800142c:	e00d      	b.n	800144a <main+0x1b2>

		default:
		  HAL_UART_Transmit (&huart3, "unknown command\r\n", 2, 100);
 800142e:	2364      	movs	r3, #100	; 0x64
 8001430:	2202      	movs	r2, #2
 8001432:	490f      	ldr	r1, [pc, #60]	; (8001470 <main+0x1d8>)
 8001434:	4809      	ldr	r0, [pc, #36]	; (800145c <main+0x1c4>)
 8001436:	f001 fe08 	bl	800304a <HAL_UART_Transmit>
		  HAL_UART_Transmit (
 800143a:	2364      	movs	r3, #100	; 0x64
 800143c:	2229      	movs	r2, #41	; 0x29
 800143e:	4906      	ldr	r1, [pc, #24]	; (8001458 <main+0x1c0>)
 8001440:	4806      	ldr	r0, [pc, #24]	; (800145c <main+0x1c4>)
 8001442:	f001 fe02 	bl	800304a <HAL_UART_Transmit>
		      &huart3, "togle led pin use $<> 1-4 if all led $5\r\n", 41, 100);
		  break;
 8001446:	e000      	b.n	800144a <main+0x1b2>
		}
	    }
 8001448:	bf00      	nop
      if (HAL_GetTick () - lastTick >= maxTick)
 800144a:	e742      	b.n	80012d2 <main+0x3a>
 800144c:	f3af 8000 	nop.w
 8001450:	5df5b2ad 	.word	0x5df5b2ad
 8001454:	4039128e 	.word	0x4039128e
 8001458:	08004230 	.word	0x08004230
 800145c:	200000dc 	.word	0x200000dc
 8001460:	2000008c 	.word	0x2000008c
 8001464:	405b8000 	.word	0x405b8000
 8001468:	0800425c 	.word	0x0800425c
 800146c:	40020c00 	.word	0x40020c00
 8001470:	08004270 	.word	0x08004270

08001474 <SystemClock_Config>:
 * @brief System Clock Configuration
 * @retval None
 */
void
SystemClock_Config (void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b094      	sub	sp, #80	; 0x50
 8001478:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct =
 800147a:	f107 0320 	add.w	r3, r7, #32
 800147e:	2230      	movs	r2, #48	; 0x30
 8001480:	2100      	movs	r1, #0
 8001482:	4618      	mov	r0, r3
 8001484:	f002 fa22 	bl	80038cc <memset>
    { 0 };
  RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8001488:	f107 030c 	add.w	r3, r7, #12
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
    { 0 };

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001498:	2300      	movs	r3, #0
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	4b22      	ldr	r3, [pc, #136]	; (8001528 <SystemClock_Config+0xb4>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	4a21      	ldr	r2, [pc, #132]	; (8001528 <SystemClock_Config+0xb4>)
 80014a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a6:	6413      	str	r3, [r2, #64]	; 0x40
 80014a8:	4b1f      	ldr	r3, [pc, #124]	; (8001528 <SystemClock_Config+0xb4>)
 80014aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014b4:	2300      	movs	r3, #0
 80014b6:	607b      	str	r3, [r7, #4]
 80014b8:	4b1c      	ldr	r3, [pc, #112]	; (800152c <SystemClock_Config+0xb8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a1b      	ldr	r2, [pc, #108]	; (800152c <SystemClock_Config+0xb8>)
 80014be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	4b19      	ldr	r3, [pc, #100]	; (800152c <SystemClock_Config+0xb8>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014cc:	607b      	str	r3, [r7, #4]
 80014ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014d0:	2302      	movs	r3, #2
 80014d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014d4:	2301      	movs	r3, #1
 80014d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014d8:	2310      	movs	r3, #16
 80014da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014dc:	2300      	movs	r3, #0
 80014de:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig (&RCC_OscInitStruct) != HAL_OK)
 80014e0:	f107 0320 	add.w	r3, r7, #32
 80014e4:	4618      	mov	r0, r3
 80014e6:	f001 f8cb 	bl	8002680 <HAL_RCC_OscConfig>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <SystemClock_Config+0x80>
    {
      Error_Handler ();
 80014f0:	f000 f81e 	bl	8001530 <Error_Handler>
    }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80014f4:	230f      	movs	r3, #15
 80014f6:	60fb      	str	r3, [r7, #12]
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014f8:	2300      	movs	r3, #0
 80014fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001500:	2300      	movs	r3, #0
 8001502:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig (&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001508:	f107 030c 	add.w	r3, r7, #12
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f001 fb2e 	bl	8002b70 <HAL_RCC_ClockConfig>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <SystemClock_Config+0xaa>
    {
      Error_Handler ();
 800151a:	f000 f809 	bl	8001530 <Error_Handler>
    }
}
 800151e:	bf00      	nop
 8001520:	3750      	adds	r7, #80	; 0x50
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800
 800152c:	40007000 	.word	0x40007000

08001530 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void
Error_Handler (void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001534:	b672      	cpsid	i
}
 8001536:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq ();
  while (1)
 8001538:	e7fe      	b.n	8001538 <Error_Handler+0x8>
	...

0800153c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	607b      	str	r3, [r7, #4]
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <HAL_MspInit+0x4c>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	4a0f      	ldr	r2, [pc, #60]	; (8001588 <HAL_MspInit+0x4c>)
 800154c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001550:	6453      	str	r3, [r2, #68]	; 0x44
 8001552:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <HAL_MspInit+0x4c>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	603b      	str	r3, [r7, #0]
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <HAL_MspInit+0x4c>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	4a08      	ldr	r2, [pc, #32]	; (8001588 <HAL_MspInit+0x4c>)
 8001568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800156c:	6413      	str	r3, [r2, #64]	; 0x40
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_MspInit+0x4c>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	40023800 	.word	0x40023800

0800158c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <NMI_Handler+0x4>

08001592 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001596:	e7fe      	b.n	8001596 <HardFault_Handler+0x4>

08001598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800159c:	e7fe      	b.n	800159c <MemManage_Handler+0x4>

0800159e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015a2:	e7fe      	b.n	80015a2 <BusFault_Handler+0x4>

080015a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <UsageFault_Handler+0x4>

080015aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d8:	f000 f954 	bl	8001884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}

080015e0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SWT4_Pin);
 80015e4:	2040      	movs	r0, #64	; 0x40
 80015e6:	f001 f833 	bl	8002650 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SWT5_Pin);
 80015ea:	f44f 7080 	mov.w	r0, #256	; 0x100
 80015ee:	f001 f82f 	bl	8002650 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SWT3_Pin);
 80015f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015f6:	f001 f82b 	bl	8002650 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}

080015fe <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SWT1_Pin);
 8001602:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001606:	f001 f823 	bl	8002650 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SWT2_Pin);
 800160a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800160e:	f001 f81f 	bl	8002650 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001620:	4a14      	ldr	r2, [pc, #80]	; (8001674 <_sbrk+0x5c>)
 8001622:	4b15      	ldr	r3, [pc, #84]	; (8001678 <_sbrk+0x60>)
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800162c:	4b13      	ldr	r3, [pc, #76]	; (800167c <_sbrk+0x64>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d102      	bne.n	800163a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <_sbrk+0x64>)
 8001636:	4a12      	ldr	r2, [pc, #72]	; (8001680 <_sbrk+0x68>)
 8001638:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <_sbrk+0x64>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	429a      	cmp	r2, r3
 8001646:	d207      	bcs.n	8001658 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001648:	f002 f916 	bl	8003878 <__errno>
 800164c:	4603      	mov	r3, r0
 800164e:	220c      	movs	r2, #12
 8001650:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001652:	f04f 33ff 	mov.w	r3, #4294967295
 8001656:	e009      	b.n	800166c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <_sbrk+0x64>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800165e:	4b07      	ldr	r3, [pc, #28]	; (800167c <_sbrk+0x64>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	4a05      	ldr	r2, [pc, #20]	; (800167c <_sbrk+0x64>)
 8001668:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800166a:	68fb      	ldr	r3, [r7, #12]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3718      	adds	r7, #24
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20020000 	.word	0x20020000
 8001678:	00000400 	.word	0x00000400
 800167c:	200000d8 	.word	0x200000d8
 8001680:	20000138 	.word	0x20000138

08001684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <SystemInit+0x20>)
 800168a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800168e:	4a05      	ldr	r2, [pc, #20]	; (80016a4 <SystemInit+0x20>)
 8001690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016ac:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <MX_USART3_UART_Init+0x4c>)
 80016ae:	4a12      	ldr	r2, [pc, #72]	; (80016f8 <MX_USART3_UART_Init+0x50>)
 80016b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016b2:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <MX_USART3_UART_Init+0x4c>)
 80016b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <MX_USART3_UART_Init+0x4c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <MX_USART3_UART_Init+0x4c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016c6:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <MX_USART3_UART_Init+0x4c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016cc:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <MX_USART3_UART_Init+0x4c>)
 80016ce:	220c      	movs	r2, #12
 80016d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016d2:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <MX_USART3_UART_Init+0x4c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <MX_USART3_UART_Init+0x4c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016de:	4805      	ldr	r0, [pc, #20]	; (80016f4 <MX_USART3_UART_Init+0x4c>)
 80016e0:	f001 fc66 	bl	8002fb0 <HAL_UART_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80016ea:	f7ff ff21 	bl	8001530 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	200000dc 	.word	0x200000dc
 80016f8:	40004800 	.word	0x40004800

080016fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08a      	sub	sp, #40	; 0x28
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a19      	ldr	r2, [pc, #100]	; (8001780 <HAL_UART_MspInit+0x84>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d12c      	bne.n	8001778 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	4b18      	ldr	r3, [pc, #96]	; (8001784 <HAL_UART_MspInit+0x88>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	4a17      	ldr	r2, [pc, #92]	; (8001784 <HAL_UART_MspInit+0x88>)
 8001728:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800172c:	6413      	str	r3, [r2, #64]	; 0x40
 800172e:	4b15      	ldr	r3, [pc, #84]	; (8001784 <HAL_UART_MspInit+0x88>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <HAL_UART_MspInit+0x88>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a10      	ldr	r2, [pc, #64]	; (8001784 <HAL_UART_MspInit+0x88>)
 8001744:	f043 0308 	orr.w	r3, r3, #8
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <HAL_UART_MspInit+0x88>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0308 	and.w	r3, r3, #8
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001756:	f44f 7340 	mov.w	r3, #768	; 0x300
 800175a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175c:	2302      	movs	r3, #2
 800175e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001764:	2303      	movs	r3, #3
 8001766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001768:	2307      	movs	r3, #7
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4619      	mov	r1, r3
 8001772:	4805      	ldr	r0, [pc, #20]	; (8001788 <HAL_UART_MspInit+0x8c>)
 8001774:	f000 fd84 	bl	8002280 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001778:	bf00      	nop
 800177a:	3728      	adds	r7, #40	; 0x28
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40004800 	.word	0x40004800
 8001784:	40023800 	.word	0x40023800
 8001788:	40020c00 	.word	0x40020c00

0800178c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800178c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001790:	480d      	ldr	r0, [pc, #52]	; (80017c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001792:	490e      	ldr	r1, [pc, #56]	; (80017cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001794:	4a0e      	ldr	r2, [pc, #56]	; (80017d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001798:	e002      	b.n	80017a0 <LoopCopyDataInit>

0800179a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800179a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800179c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800179e:	3304      	adds	r3, #4

080017a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a4:	d3f9      	bcc.n	800179a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017a6:	4a0b      	ldr	r2, [pc, #44]	; (80017d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017a8:	4c0b      	ldr	r4, [pc, #44]	; (80017d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017ac:	e001      	b.n	80017b2 <LoopFillZerobss>

080017ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b0:	3204      	adds	r2, #4

080017b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b4:	d3fb      	bcc.n	80017ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017b6:	f7ff ff65 	bl	8001684 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ba:	f002 f863 	bl	8003884 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017be:	f7ff fd6b 	bl	8001298 <main>
  bx  lr    
 80017c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017cc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80017d0:	080042e0 	.word	0x080042e0
  ldr r2, =_sbss
 80017d4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80017d8:	20000134 	.word	0x20000134

080017dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017dc:	e7fe      	b.n	80017dc <ADC_IRQHandler>
	...

080017e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017e4:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <HAL_Init+0x40>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a0d      	ldr	r2, [pc, #52]	; (8001820 <HAL_Init+0x40>)
 80017ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017f0:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <HAL_Init+0x40>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a0a      	ldr	r2, [pc, #40]	; (8001820 <HAL_Init+0x40>)
 80017f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <HAL_Init+0x40>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a07      	ldr	r2, [pc, #28]	; (8001820 <HAL_Init+0x40>)
 8001802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001806:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001808:	2003      	movs	r0, #3
 800180a:	f000 fcf7 	bl	80021fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800180e:	200f      	movs	r0, #15
 8001810:	f000 f808 	bl	8001824 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001814:	f7ff fe92 	bl	800153c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40023c00 	.word	0x40023c00

08001824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800182c:	4b12      	ldr	r3, [pc, #72]	; (8001878 <HAL_InitTick+0x54>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4b12      	ldr	r3, [pc, #72]	; (800187c <HAL_InitTick+0x58>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	4619      	mov	r1, r3
 8001836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800183a:	fbb3 f3f1 	udiv	r3, r3, r1
 800183e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001842:	4618      	mov	r0, r3
 8001844:	f000 fd0f 	bl	8002266 <HAL_SYSTICK_Config>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e00e      	b.n	8001870 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b0f      	cmp	r3, #15
 8001856:	d80a      	bhi.n	800186e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001858:	2200      	movs	r2, #0
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	f04f 30ff 	mov.w	r0, #4294967295
 8001860:	f000 fcd7 	bl	8002212 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001864:	4a06      	ldr	r2, [pc, #24]	; (8001880 <HAL_InitTick+0x5c>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800186a:	2300      	movs	r3, #0
 800186c:	e000      	b.n	8001870 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
}
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20000000 	.word	0x20000000
 800187c:	20000008 	.word	0x20000008
 8001880:	20000004 	.word	0x20000004

08001884 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_IncTick+0x20>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_IncTick+0x24>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4413      	add	r3, r2
 8001894:	4a04      	ldr	r2, [pc, #16]	; (80018a8 <HAL_IncTick+0x24>)
 8001896:	6013      	str	r3, [r2, #0]
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	20000008 	.word	0x20000008
 80018a8:	20000120 	.word	0x20000120

080018ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return uwTick;
 80018b0:	4b03      	ldr	r3, [pc, #12]	; (80018c0 <HAL_GetTick+0x14>)
 80018b2:	681b      	ldr	r3, [r3, #0]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20000120 	.word	0x20000120

080018c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e033      	b.n	8001942 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d109      	bne.n	80018f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff fa96 	bl	8000e14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	f003 0310 	and.w	r3, r3, #16
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d118      	bne.n	8001934 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800190a:	f023 0302 	bic.w	r3, r3, #2
 800190e:	f043 0202 	orr.w	r2, r3, #2
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 faa4 	bl	8001e64 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	f023 0303 	bic.w	r3, r3, #3
 800192a:	f043 0201 	orr.w	r2, r3, #1
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	641a      	str	r2, [r3, #64]	; 0x40
 8001932:	e001      	b.n	8001938 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001940:	7bfb      	ldrb	r3, [r7, #15]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001954:	2300      	movs	r3, #0
 8001956:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800195e:	2b01      	cmp	r3, #1
 8001960:	d101      	bne.n	8001966 <HAL_ADC_Start+0x1a>
 8001962:	2302      	movs	r3, #2
 8001964:	e0b2      	b.n	8001acc <HAL_ADC_Start+0x180>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b01      	cmp	r3, #1
 800197a:	d018      	beq.n	80019ae <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	689a      	ldr	r2, [r3, #8]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 0201 	orr.w	r2, r2, #1
 800198a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800198c:	4b52      	ldr	r3, [pc, #328]	; (8001ad8 <HAL_ADC_Start+0x18c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a52      	ldr	r2, [pc, #328]	; (8001adc <HAL_ADC_Start+0x190>)
 8001992:	fba2 2303 	umull	r2, r3, r2, r3
 8001996:	0c9a      	lsrs	r2, r3, #18
 8001998:	4613      	mov	r3, r2
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	4413      	add	r3, r2
 800199e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80019a0:	e002      	b.n	80019a8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	3b01      	subs	r3, #1
 80019a6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f9      	bne.n	80019a2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d17a      	bne.n	8001ab2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80019c4:	f023 0301 	bic.w	r3, r3, #1
 80019c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d007      	beq.n	80019ee <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019e6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019fa:	d106      	bne.n	8001a0a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a00:	f023 0206 	bic.w	r2, r3, #6
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	645a      	str	r2, [r3, #68]	; 0x44
 8001a08:	e002      	b.n	8001a10 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a18:	4b31      	ldr	r3, [pc, #196]	; (8001ae0 <HAL_ADC_Start+0x194>)
 8001a1a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a24:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 031f 	and.w	r3, r3, #31
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d12a      	bne.n	8001a88 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a2b      	ldr	r2, [pc, #172]	; (8001ae4 <HAL_ADC_Start+0x198>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d015      	beq.n	8001a68 <HAL_ADC_Start+0x11c>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a29      	ldr	r2, [pc, #164]	; (8001ae8 <HAL_ADC_Start+0x19c>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d105      	bne.n	8001a52 <HAL_ADC_Start+0x106>
 8001a46:	4b26      	ldr	r3, [pc, #152]	; (8001ae0 <HAL_ADC_Start+0x194>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 031f 	and.w	r3, r3, #31
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00a      	beq.n	8001a68 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a25      	ldr	r2, [pc, #148]	; (8001aec <HAL_ADC_Start+0x1a0>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d136      	bne.n	8001aca <HAL_ADC_Start+0x17e>
 8001a5c:	4b20      	ldr	r3, [pc, #128]	; (8001ae0 <HAL_ADC_Start+0x194>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 0310 	and.w	r3, r3, #16
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d130      	bne.n	8001aca <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d129      	bne.n	8001aca <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a84:	609a      	str	r2, [r3, #8]
 8001a86:	e020      	b.n	8001aca <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a15      	ldr	r2, [pc, #84]	; (8001ae4 <HAL_ADC_Start+0x198>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d11b      	bne.n	8001aca <HAL_ADC_Start+0x17e>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d114      	bne.n	8001aca <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	e00b      	b.n	8001aca <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	f043 0210 	orr.w	r2, r3, #16
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	f043 0201 	orr.w	r2, r3, #1
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	20000000 	.word	0x20000000
 8001adc:	431bde83 	.word	0x431bde83
 8001ae0:	40012300 	.word	0x40012300
 8001ae4:	40012000 	.word	0x40012000
 8001ae8:	40012100 	.word	0x40012100
 8001aec:	40012200 	.word	0x40012200

08001af0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b0c:	d113      	bne.n	8001b36 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b1c:	d10b      	bne.n	8001b36 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f043 0220 	orr.w	r2, r3, #32
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e063      	b.n	8001bfe <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001b36:	f7ff feb9 	bl	80018ac <HAL_GetTick>
 8001b3a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b3c:	e021      	b.n	8001b82 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b44:	d01d      	beq.n	8001b82 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d007      	beq.n	8001b5c <HAL_ADC_PollForConversion+0x6c>
 8001b4c:	f7ff feae 	bl	80018ac <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d212      	bcs.n	8001b82 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d00b      	beq.n	8001b82 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	f043 0204 	orr.w	r2, r3, #4
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e03d      	b.n	8001bfe <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d1d6      	bne.n	8001b3e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f06f 0212 	mvn.w	r2, #18
 8001b98:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d123      	bne.n	8001bfc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d11f      	bne.n	8001bfc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d006      	beq.n	8001bd8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d111      	bne.n	8001bfc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d105      	bne.n	8001bfc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	f043 0201 	orr.w	r2, r3, #1
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d101      	bne.n	8001c3c <HAL_ADC_ConfigChannel+0x1c>
 8001c38:	2302      	movs	r3, #2
 8001c3a:	e105      	b.n	8001e48 <HAL_ADC_ConfigChannel+0x228>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b09      	cmp	r3, #9
 8001c4a:	d925      	bls.n	8001c98 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68d9      	ldr	r1, [r3, #12]
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	3b1e      	subs	r3, #30
 8001c62:	2207      	movs	r2, #7
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43da      	mvns	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	400a      	ands	r2, r1
 8001c70:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68d9      	ldr	r1, [r3, #12]
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	4618      	mov	r0, r3
 8001c84:	4603      	mov	r3, r0
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	4403      	add	r3, r0
 8001c8a:	3b1e      	subs	r3, #30
 8001c8c:	409a      	lsls	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	e022      	b.n	8001cde <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6919      	ldr	r1, [r3, #16]
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4413      	add	r3, r2
 8001cac:	2207      	movs	r2, #7
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43da      	mvns	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	400a      	ands	r2, r1
 8001cba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6919      	ldr	r1, [r3, #16]
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	4618      	mov	r0, r3
 8001cce:	4603      	mov	r3, r0
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	4403      	add	r3, r0
 8001cd4:	409a      	lsls	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b06      	cmp	r3, #6
 8001ce4:	d824      	bhi.n	8001d30 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	3b05      	subs	r3, #5
 8001cf8:	221f      	movs	r2, #31
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43da      	mvns	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	400a      	ands	r2, r1
 8001d06:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	4618      	mov	r0, r3
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	3b05      	subs	r3, #5
 8001d22:	fa00 f203 	lsl.w	r2, r0, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	635a      	str	r2, [r3, #52]	; 0x34
 8001d2e:	e04c      	b.n	8001dca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	2b0c      	cmp	r3, #12
 8001d36:	d824      	bhi.n	8001d82 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	3b23      	subs	r3, #35	; 0x23
 8001d4a:	221f      	movs	r2, #31
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43da      	mvns	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	400a      	ands	r2, r1
 8001d58:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	4618      	mov	r0, r3
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	3b23      	subs	r3, #35	; 0x23
 8001d74:	fa00 f203 	lsl.w	r2, r0, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	631a      	str	r2, [r3, #48]	; 0x30
 8001d80:	e023      	b.n	8001dca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	3b41      	subs	r3, #65	; 0x41
 8001d94:	221f      	movs	r2, #31
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43da      	mvns	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	400a      	ands	r2, r1
 8001da2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	4618      	mov	r0, r3
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	4613      	mov	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	3b41      	subs	r3, #65	; 0x41
 8001dbe:	fa00 f203 	lsl.w	r2, r0, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dca:	4b22      	ldr	r3, [pc, #136]	; (8001e54 <HAL_ADC_ConfigChannel+0x234>)
 8001dcc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a21      	ldr	r2, [pc, #132]	; (8001e58 <HAL_ADC_ConfigChannel+0x238>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d109      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x1cc>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b12      	cmp	r3, #18
 8001dde:	d105      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a19      	ldr	r2, [pc, #100]	; (8001e58 <HAL_ADC_ConfigChannel+0x238>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d123      	bne.n	8001e3e <HAL_ADC_ConfigChannel+0x21e>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2b10      	cmp	r3, #16
 8001dfc:	d003      	beq.n	8001e06 <HAL_ADC_ConfigChannel+0x1e6>
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2b11      	cmp	r3, #17
 8001e04:	d11b      	bne.n	8001e3e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2b10      	cmp	r3, #16
 8001e18:	d111      	bne.n	8001e3e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e1a:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <HAL_ADC_ConfigChannel+0x23c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a10      	ldr	r2, [pc, #64]	; (8001e60 <HAL_ADC_ConfigChannel+0x240>)
 8001e20:	fba2 2303 	umull	r2, r3, r2, r3
 8001e24:	0c9a      	lsrs	r2, r3, #18
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e30:	e002      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	3b01      	subs	r3, #1
 8001e36:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f9      	bne.n	8001e32 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	40012300 	.word	0x40012300
 8001e58:	40012000 	.word	0x40012000
 8001e5c:	20000000 	.word	0x20000000
 8001e60:	431bde83 	.word	0x431bde83

08001e64 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e6c:	4b79      	ldr	r3, [pc, #484]	; (8002054 <ADC_Init+0x1f0>)
 8001e6e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	431a      	orrs	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6859      	ldr	r1, [r3, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	021a      	lsls	r2, r3, #8
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ebc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6859      	ldr	r1, [r3, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ede:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6899      	ldr	r1, [r3, #8]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68da      	ldr	r2, [r3, #12]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef6:	4a58      	ldr	r2, [pc, #352]	; (8002058 <ADC_Init+0x1f4>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d022      	beq.n	8001f42 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689a      	ldr	r2, [r3, #8]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f0a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6899      	ldr	r1, [r3, #8]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6899      	ldr	r1, [r3, #8]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	e00f      	b.n	8001f62 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f60:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 0202 	bic.w	r2, r2, #2
 8001f70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6899      	ldr	r1, [r3, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	7e1b      	ldrb	r3, [r3, #24]
 8001f7c:	005a      	lsls	r2, r3, #1
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d01b      	beq.n	8001fc8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f9e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	685a      	ldr	r2, [r3, #4]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001fae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6859      	ldr	r1, [r3, #4]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	035a      	lsls	r2, r3, #13
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	e007      	b.n	8001fd8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fd6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001fe6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	051a      	lsls	r2, r3, #20
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800200c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6899      	ldr	r1, [r3, #8]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800201a:	025a      	lsls	r2, r3, #9
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002032:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6899      	ldr	r1, [r3, #8]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	029a      	lsls	r2, r3, #10
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	609a      	str	r2, [r3, #8]
}
 8002048:	bf00      	nop
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	40012300 	.word	0x40012300
 8002058:	0f000001 	.word	0x0f000001

0800205c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800206c:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <__NVIC_SetPriorityGrouping+0x44>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002078:	4013      	ands	r3, r2
 800207a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002084:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800208c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800208e:	4a04      	ldr	r2, [pc, #16]	; (80020a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	60d3      	str	r3, [r2, #12]
}
 8002094:	bf00      	nop
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020a8:	4b04      	ldr	r3, [pc, #16]	; (80020bc <__NVIC_GetPriorityGrouping+0x18>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	0a1b      	lsrs	r3, r3, #8
 80020ae:	f003 0307 	and.w	r3, r3, #7
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	db0b      	blt.n	80020ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020d2:	79fb      	ldrb	r3, [r7, #7]
 80020d4:	f003 021f 	and.w	r2, r3, #31
 80020d8:	4907      	ldr	r1, [pc, #28]	; (80020f8 <__NVIC_EnableIRQ+0x38>)
 80020da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020de:	095b      	lsrs	r3, r3, #5
 80020e0:	2001      	movs	r0, #1
 80020e2:	fa00 f202 	lsl.w	r2, r0, r2
 80020e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	e000e100 	.word	0xe000e100

080020fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	6039      	str	r1, [r7, #0]
 8002106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210c:	2b00      	cmp	r3, #0
 800210e:	db0a      	blt.n	8002126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	b2da      	uxtb	r2, r3
 8002114:	490c      	ldr	r1, [pc, #48]	; (8002148 <__NVIC_SetPriority+0x4c>)
 8002116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211a:	0112      	lsls	r2, r2, #4
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	440b      	add	r3, r1
 8002120:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002124:	e00a      	b.n	800213c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	b2da      	uxtb	r2, r3
 800212a:	4908      	ldr	r1, [pc, #32]	; (800214c <__NVIC_SetPriority+0x50>)
 800212c:	79fb      	ldrb	r3, [r7, #7]
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	3b04      	subs	r3, #4
 8002134:	0112      	lsls	r2, r2, #4
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	440b      	add	r3, r1
 800213a:	761a      	strb	r2, [r3, #24]
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	e000e100 	.word	0xe000e100
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002150:	b480      	push	{r7}
 8002152:	b089      	sub	sp, #36	; 0x24
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f1c3 0307 	rsb	r3, r3, #7
 800216a:	2b04      	cmp	r3, #4
 800216c:	bf28      	it	cs
 800216e:	2304      	movcs	r3, #4
 8002170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	3304      	adds	r3, #4
 8002176:	2b06      	cmp	r3, #6
 8002178:	d902      	bls.n	8002180 <NVIC_EncodePriority+0x30>
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3b03      	subs	r3, #3
 800217e:	e000      	b.n	8002182 <NVIC_EncodePriority+0x32>
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002184:	f04f 32ff 	mov.w	r2, #4294967295
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43da      	mvns	r2, r3
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	401a      	ands	r2, r3
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002198:	f04f 31ff 	mov.w	r1, #4294967295
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	fa01 f303 	lsl.w	r3, r1, r3
 80021a2:	43d9      	mvns	r1, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a8:	4313      	orrs	r3, r2
         );
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3724      	adds	r7, #36	; 0x24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
	...

080021b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3b01      	subs	r3, #1
 80021c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021c8:	d301      	bcc.n	80021ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ca:	2301      	movs	r3, #1
 80021cc:	e00f      	b.n	80021ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ce:	4a0a      	ldr	r2, [pc, #40]	; (80021f8 <SysTick_Config+0x40>)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021d6:	210f      	movs	r1, #15
 80021d8:	f04f 30ff 	mov.w	r0, #4294967295
 80021dc:	f7ff ff8e 	bl	80020fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021e0:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <SysTick_Config+0x40>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021e6:	4b04      	ldr	r3, [pc, #16]	; (80021f8 <SysTick_Config+0x40>)
 80021e8:	2207      	movs	r2, #7
 80021ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	e000e010 	.word	0xe000e010

080021fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7ff ff29 	bl	800205c <__NVIC_SetPriorityGrouping>
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002212:	b580      	push	{r7, lr}
 8002214:	b086      	sub	sp, #24
 8002216:	af00      	add	r7, sp, #0
 8002218:	4603      	mov	r3, r0
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	607a      	str	r2, [r7, #4]
 800221e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002224:	f7ff ff3e 	bl	80020a4 <__NVIC_GetPriorityGrouping>
 8002228:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	68b9      	ldr	r1, [r7, #8]
 800222e:	6978      	ldr	r0, [r7, #20]
 8002230:	f7ff ff8e 	bl	8002150 <NVIC_EncodePriority>
 8002234:	4602      	mov	r2, r0
 8002236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800223a:	4611      	mov	r1, r2
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff ff5d 	bl	80020fc <__NVIC_SetPriority>
}
 8002242:	bf00      	nop
 8002244:	3718      	adds	r7, #24
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
 8002250:	4603      	mov	r3, r0
 8002252:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff ff31 	bl	80020c0 <__NVIC_EnableIRQ>
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7ff ffa2 	bl	80021b8 <SysTick_Config>
 8002274:	4603      	mov	r3, r0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002280:	b480      	push	{r7}
 8002282:	b089      	sub	sp, #36	; 0x24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800228e:	2300      	movs	r3, #0
 8002290:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002292:	2300      	movs	r3, #0
 8002294:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
 800229a:	e16b      	b.n	8002574 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800229c:	2201      	movs	r2, #1
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	4013      	ands	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	f040 815a 	bne.w	800256e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d005      	beq.n	80022d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d130      	bne.n	8002334 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	2203      	movs	r2, #3
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43db      	mvns	r3, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4013      	ands	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002308:	2201      	movs	r2, #1
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	091b      	lsrs	r3, r3, #4
 800231e:	f003 0201 	and.w	r2, r3, #1
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 0303 	and.w	r3, r3, #3
 800233c:	2b03      	cmp	r3, #3
 800233e:	d017      	beq.n	8002370 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	2203      	movs	r2, #3
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4313      	orrs	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d123      	bne.n	80023c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	08da      	lsrs	r2, r3, #3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3208      	adds	r2, #8
 8002384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002388:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	220f      	movs	r2, #15
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4013      	ands	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	691a      	ldr	r2, [r3, #16]
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	08da      	lsrs	r2, r3, #3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3208      	adds	r2, #8
 80023be:	69b9      	ldr	r1, [r7, #24]
 80023c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	2203      	movs	r2, #3
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 0203 	and.w	r2, r3, #3
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 80b4 	beq.w	800256e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	4b60      	ldr	r3, [pc, #384]	; (800258c <HAL_GPIO_Init+0x30c>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	4a5f      	ldr	r2, [pc, #380]	; (800258c <HAL_GPIO_Init+0x30c>)
 8002410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002414:	6453      	str	r3, [r2, #68]	; 0x44
 8002416:	4b5d      	ldr	r3, [pc, #372]	; (800258c <HAL_GPIO_Init+0x30c>)
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002422:	4a5b      	ldr	r2, [pc, #364]	; (8002590 <HAL_GPIO_Init+0x310>)
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	089b      	lsrs	r3, r3, #2
 8002428:	3302      	adds	r3, #2
 800242a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800242e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	220f      	movs	r2, #15
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43db      	mvns	r3, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4013      	ands	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a52      	ldr	r2, [pc, #328]	; (8002594 <HAL_GPIO_Init+0x314>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d02b      	beq.n	80024a6 <HAL_GPIO_Init+0x226>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a51      	ldr	r2, [pc, #324]	; (8002598 <HAL_GPIO_Init+0x318>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d025      	beq.n	80024a2 <HAL_GPIO_Init+0x222>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a50      	ldr	r2, [pc, #320]	; (800259c <HAL_GPIO_Init+0x31c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d01f      	beq.n	800249e <HAL_GPIO_Init+0x21e>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a4f      	ldr	r2, [pc, #316]	; (80025a0 <HAL_GPIO_Init+0x320>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d019      	beq.n	800249a <HAL_GPIO_Init+0x21a>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a4e      	ldr	r2, [pc, #312]	; (80025a4 <HAL_GPIO_Init+0x324>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d013      	beq.n	8002496 <HAL_GPIO_Init+0x216>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a4d      	ldr	r2, [pc, #308]	; (80025a8 <HAL_GPIO_Init+0x328>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d00d      	beq.n	8002492 <HAL_GPIO_Init+0x212>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a4c      	ldr	r2, [pc, #304]	; (80025ac <HAL_GPIO_Init+0x32c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d007      	beq.n	800248e <HAL_GPIO_Init+0x20e>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a4b      	ldr	r2, [pc, #300]	; (80025b0 <HAL_GPIO_Init+0x330>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d101      	bne.n	800248a <HAL_GPIO_Init+0x20a>
 8002486:	2307      	movs	r3, #7
 8002488:	e00e      	b.n	80024a8 <HAL_GPIO_Init+0x228>
 800248a:	2308      	movs	r3, #8
 800248c:	e00c      	b.n	80024a8 <HAL_GPIO_Init+0x228>
 800248e:	2306      	movs	r3, #6
 8002490:	e00a      	b.n	80024a8 <HAL_GPIO_Init+0x228>
 8002492:	2305      	movs	r3, #5
 8002494:	e008      	b.n	80024a8 <HAL_GPIO_Init+0x228>
 8002496:	2304      	movs	r3, #4
 8002498:	e006      	b.n	80024a8 <HAL_GPIO_Init+0x228>
 800249a:	2303      	movs	r3, #3
 800249c:	e004      	b.n	80024a8 <HAL_GPIO_Init+0x228>
 800249e:	2302      	movs	r3, #2
 80024a0:	e002      	b.n	80024a8 <HAL_GPIO_Init+0x228>
 80024a2:	2301      	movs	r3, #1
 80024a4:	e000      	b.n	80024a8 <HAL_GPIO_Init+0x228>
 80024a6:	2300      	movs	r3, #0
 80024a8:	69fa      	ldr	r2, [r7, #28]
 80024aa:	f002 0203 	and.w	r2, r2, #3
 80024ae:	0092      	lsls	r2, r2, #2
 80024b0:	4093      	lsls	r3, r2
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024b8:	4935      	ldr	r1, [pc, #212]	; (8002590 <HAL_GPIO_Init+0x310>)
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	089b      	lsrs	r3, r3, #2
 80024be:	3302      	adds	r3, #2
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024c6:	4b3b      	ldr	r3, [pc, #236]	; (80025b4 <HAL_GPIO_Init+0x334>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	43db      	mvns	r3, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4013      	ands	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024ea:	4a32      	ldr	r2, [pc, #200]	; (80025b4 <HAL_GPIO_Init+0x334>)
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024f0:	4b30      	ldr	r3, [pc, #192]	; (80025b4 <HAL_GPIO_Init+0x334>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002514:	4a27      	ldr	r2, [pc, #156]	; (80025b4 <HAL_GPIO_Init+0x334>)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800251a:	4b26      	ldr	r3, [pc, #152]	; (80025b4 <HAL_GPIO_Init+0x334>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800253e:	4a1d      	ldr	r2, [pc, #116]	; (80025b4 <HAL_GPIO_Init+0x334>)
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002544:	4b1b      	ldr	r3, [pc, #108]	; (80025b4 <HAL_GPIO_Init+0x334>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	4313      	orrs	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002568:	4a12      	ldr	r2, [pc, #72]	; (80025b4 <HAL_GPIO_Init+0x334>)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3301      	adds	r3, #1
 8002572:	61fb      	str	r3, [r7, #28]
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	2b0f      	cmp	r3, #15
 8002578:	f67f ae90 	bls.w	800229c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800257c:	bf00      	nop
 800257e:	bf00      	nop
 8002580:	3724      	adds	r7, #36	; 0x24
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	40023800 	.word	0x40023800
 8002590:	40013800 	.word	0x40013800
 8002594:	40020000 	.word	0x40020000
 8002598:	40020400 	.word	0x40020400
 800259c:	40020800 	.word	0x40020800
 80025a0:	40020c00 	.word	0x40020c00
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40021400 	.word	0x40021400
 80025ac:	40021800 	.word	0x40021800
 80025b0:	40021c00 	.word	0x40021c00
 80025b4:	40013c00 	.word	0x40013c00

080025b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	887b      	ldrh	r3, [r7, #2]
 80025ca:	4013      	ands	r3, r2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d002      	beq.n	80025d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
 80025d4:	e001      	b.n	80025da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025d6:	2300      	movs	r3, #0
 80025d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025da:	7bfb      	ldrb	r3, [r7, #15]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	807b      	strh	r3, [r7, #2]
 80025f4:	4613      	mov	r3, r2
 80025f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025f8:	787b      	ldrb	r3, [r7, #1]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025fe:	887a      	ldrh	r2, [r7, #2]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002604:	e003      	b.n	800260e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002606:	887b      	ldrh	r3, [r7, #2]
 8002608:	041a      	lsls	r2, r3, #16
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	619a      	str	r2, [r3, #24]
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800261a:	b480      	push	{r7}
 800261c:	b085      	sub	sp, #20
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
 8002622:	460b      	mov	r3, r1
 8002624:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800262c:	887a      	ldrh	r2, [r7, #2]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	4013      	ands	r3, r2
 8002632:	041a      	lsls	r2, r3, #16
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	43d9      	mvns	r1, r3
 8002638:	887b      	ldrh	r3, [r7, #2]
 800263a:	400b      	ands	r3, r1
 800263c:	431a      	orrs	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	619a      	str	r2, [r3, #24]
}
 8002642:	bf00      	nop
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
	...

08002650 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800265a:	4b08      	ldr	r3, [pc, #32]	; (800267c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800265c:	695a      	ldr	r2, [r3, #20]
 800265e:	88fb      	ldrh	r3, [r7, #6]
 8002660:	4013      	ands	r3, r2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d006      	beq.n	8002674 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002666:	4a05      	ldr	r2, [pc, #20]	; (800267c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002668:	88fb      	ldrh	r3, [r7, #6]
 800266a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800266c:	88fb      	ldrh	r3, [r7, #6]
 800266e:	4618      	mov	r0, r3
 8002670:	f7fe fdf4 	bl	800125c <HAL_GPIO_EXTI_Callback>
  }
}
 8002674:	bf00      	nop
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40013c00 	.word	0x40013c00

08002680 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e267      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d075      	beq.n	800278a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800269e:	4b88      	ldr	r3, [pc, #544]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 030c 	and.w	r3, r3, #12
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d00c      	beq.n	80026c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026aa:	4b85      	ldr	r3, [pc, #532]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026b2:	2b08      	cmp	r3, #8
 80026b4:	d112      	bne.n	80026dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026b6:	4b82      	ldr	r3, [pc, #520]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026c2:	d10b      	bne.n	80026dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c4:	4b7e      	ldr	r3, [pc, #504]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d05b      	beq.n	8002788 <HAL_RCC_OscConfig+0x108>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d157      	bne.n	8002788 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e242      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e4:	d106      	bne.n	80026f4 <HAL_RCC_OscConfig+0x74>
 80026e6:	4b76      	ldr	r3, [pc, #472]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a75      	ldr	r2, [pc, #468]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80026ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	e01d      	b.n	8002730 <HAL_RCC_OscConfig+0xb0>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026fc:	d10c      	bne.n	8002718 <HAL_RCC_OscConfig+0x98>
 80026fe:	4b70      	ldr	r3, [pc, #448]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a6f      	ldr	r2, [pc, #444]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002708:	6013      	str	r3, [r2, #0]
 800270a:	4b6d      	ldr	r3, [pc, #436]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a6c      	ldr	r2, [pc, #432]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	e00b      	b.n	8002730 <HAL_RCC_OscConfig+0xb0>
 8002718:	4b69      	ldr	r3, [pc, #420]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a68      	ldr	r2, [pc, #416]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 800271e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002722:	6013      	str	r3, [r2, #0]
 8002724:	4b66      	ldr	r3, [pc, #408]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a65      	ldr	r2, [pc, #404]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 800272a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800272e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d013      	beq.n	8002760 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002738:	f7ff f8b8 	bl	80018ac <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002740:	f7ff f8b4 	bl	80018ac <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b64      	cmp	r3, #100	; 0x64
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e207      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002752:	4b5b      	ldr	r3, [pc, #364]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f0      	beq.n	8002740 <HAL_RCC_OscConfig+0xc0>
 800275e:	e014      	b.n	800278a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002760:	f7ff f8a4 	bl	80018ac <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002768:	f7ff f8a0 	bl	80018ac <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b64      	cmp	r3, #100	; 0x64
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e1f3      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800277a:	4b51      	ldr	r3, [pc, #324]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f0      	bne.n	8002768 <HAL_RCC_OscConfig+0xe8>
 8002786:	e000      	b.n	800278a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d063      	beq.n	800285e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002796:	4b4a      	ldr	r3, [pc, #296]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 030c 	and.w	r3, r3, #12
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00b      	beq.n	80027ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027a2:	4b47      	ldr	r3, [pc, #284]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027aa:	2b08      	cmp	r3, #8
 80027ac:	d11c      	bne.n	80027e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ae:	4b44      	ldr	r3, [pc, #272]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d116      	bne.n	80027e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ba:	4b41      	ldr	r3, [pc, #260]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d005      	beq.n	80027d2 <HAL_RCC_OscConfig+0x152>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d001      	beq.n	80027d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e1c7      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d2:	4b3b      	ldr	r3, [pc, #236]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	4937      	ldr	r1, [pc, #220]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027e6:	e03a      	b.n	800285e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d020      	beq.n	8002832 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027f0:	4b34      	ldr	r3, [pc, #208]	; (80028c4 <HAL_RCC_OscConfig+0x244>)
 80027f2:	2201      	movs	r2, #1
 80027f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f6:	f7ff f859 	bl	80018ac <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027fe:	f7ff f855 	bl	80018ac <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e1a8      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002810:	4b2b      	ldr	r3, [pc, #172]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0f0      	beq.n	80027fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281c:	4b28      	ldr	r3, [pc, #160]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	4925      	ldr	r1, [pc, #148]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 800282c:	4313      	orrs	r3, r2
 800282e:	600b      	str	r3, [r1, #0]
 8002830:	e015      	b.n	800285e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002832:	4b24      	ldr	r3, [pc, #144]	; (80028c4 <HAL_RCC_OscConfig+0x244>)
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002838:	f7ff f838 	bl	80018ac <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002840:	f7ff f834 	bl	80018ac <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e187      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002852:	4b1b      	ldr	r3, [pc, #108]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f0      	bne.n	8002840 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d036      	beq.n	80028d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d016      	beq.n	80028a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002872:	4b15      	ldr	r3, [pc, #84]	; (80028c8 <HAL_RCC_OscConfig+0x248>)
 8002874:	2201      	movs	r2, #1
 8002876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002878:	f7ff f818 	bl	80018ac <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002880:	f7ff f814 	bl	80018ac <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e167      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002892:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0f0      	beq.n	8002880 <HAL_RCC_OscConfig+0x200>
 800289e:	e01b      	b.n	80028d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028a0:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <HAL_RCC_OscConfig+0x248>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a6:	f7ff f801 	bl	80018ac <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ac:	e00e      	b.n	80028cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ae:	f7fe fffd 	bl	80018ac <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d907      	bls.n	80028cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e150      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
 80028c0:	40023800 	.word	0x40023800
 80028c4:	42470000 	.word	0x42470000
 80028c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028cc:	4b88      	ldr	r3, [pc, #544]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 80028ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1ea      	bne.n	80028ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 8097 	beq.w	8002a14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028e6:	2300      	movs	r3, #0
 80028e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ea:	4b81      	ldr	r3, [pc, #516]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10f      	bne.n	8002916 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	60bb      	str	r3, [r7, #8]
 80028fa:	4b7d      	ldr	r3, [pc, #500]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	4a7c      	ldr	r2, [pc, #496]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002904:	6413      	str	r3, [r2, #64]	; 0x40
 8002906:	4b7a      	ldr	r3, [pc, #488]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290e:	60bb      	str	r3, [r7, #8]
 8002910:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002912:	2301      	movs	r3, #1
 8002914:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002916:	4b77      	ldr	r3, [pc, #476]	; (8002af4 <HAL_RCC_OscConfig+0x474>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291e:	2b00      	cmp	r3, #0
 8002920:	d118      	bne.n	8002954 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002922:	4b74      	ldr	r3, [pc, #464]	; (8002af4 <HAL_RCC_OscConfig+0x474>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a73      	ldr	r2, [pc, #460]	; (8002af4 <HAL_RCC_OscConfig+0x474>)
 8002928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800292c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800292e:	f7fe ffbd 	bl	80018ac <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002936:	f7fe ffb9 	bl	80018ac <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e10c      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002948:	4b6a      	ldr	r3, [pc, #424]	; (8002af4 <HAL_RCC_OscConfig+0x474>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0f0      	beq.n	8002936 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d106      	bne.n	800296a <HAL_RCC_OscConfig+0x2ea>
 800295c:	4b64      	ldr	r3, [pc, #400]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 800295e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002960:	4a63      	ldr	r2, [pc, #396]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002962:	f043 0301 	orr.w	r3, r3, #1
 8002966:	6713      	str	r3, [r2, #112]	; 0x70
 8002968:	e01c      	b.n	80029a4 <HAL_RCC_OscConfig+0x324>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	2b05      	cmp	r3, #5
 8002970:	d10c      	bne.n	800298c <HAL_RCC_OscConfig+0x30c>
 8002972:	4b5f      	ldr	r3, [pc, #380]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002976:	4a5e      	ldr	r2, [pc, #376]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002978:	f043 0304 	orr.w	r3, r3, #4
 800297c:	6713      	str	r3, [r2, #112]	; 0x70
 800297e:	4b5c      	ldr	r3, [pc, #368]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002982:	4a5b      	ldr	r2, [pc, #364]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	6713      	str	r3, [r2, #112]	; 0x70
 800298a:	e00b      	b.n	80029a4 <HAL_RCC_OscConfig+0x324>
 800298c:	4b58      	ldr	r3, [pc, #352]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 800298e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002990:	4a57      	ldr	r2, [pc, #348]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002992:	f023 0301 	bic.w	r3, r3, #1
 8002996:	6713      	str	r3, [r2, #112]	; 0x70
 8002998:	4b55      	ldr	r3, [pc, #340]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 800299a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299c:	4a54      	ldr	r2, [pc, #336]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 800299e:	f023 0304 	bic.w	r3, r3, #4
 80029a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d015      	beq.n	80029d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ac:	f7fe ff7e 	bl	80018ac <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b2:	e00a      	b.n	80029ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029b4:	f7fe ff7a 	bl	80018ac <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e0cb      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ca:	4b49      	ldr	r3, [pc, #292]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 80029cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0ee      	beq.n	80029b4 <HAL_RCC_OscConfig+0x334>
 80029d6:	e014      	b.n	8002a02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d8:	f7fe ff68 	bl	80018ac <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029de:	e00a      	b.n	80029f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029e0:	f7fe ff64 	bl	80018ac <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e0b5      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029f6:	4b3e      	ldr	r3, [pc, #248]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 80029f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1ee      	bne.n	80029e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a02:	7dfb      	ldrb	r3, [r7, #23]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d105      	bne.n	8002a14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a08:	4b39      	ldr	r3, [pc, #228]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	4a38      	ldr	r2, [pc, #224]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002a0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 80a1 	beq.w	8002b60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a1e:	4b34      	ldr	r3, [pc, #208]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d05c      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d141      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a32:	4b31      	ldr	r3, [pc, #196]	; (8002af8 <HAL_RCC_OscConfig+0x478>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a38:	f7fe ff38 	bl	80018ac <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a40:	f7fe ff34 	bl	80018ac <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e087      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a52:	4b27      	ldr	r3, [pc, #156]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69da      	ldr	r2, [r3, #28]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	019b      	lsls	r3, r3, #6
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a74:	085b      	lsrs	r3, r3, #1
 8002a76:	3b01      	subs	r3, #1
 8002a78:	041b      	lsls	r3, r3, #16
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a80:	061b      	lsls	r3, r3, #24
 8002a82:	491b      	ldr	r1, [pc, #108]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a88:	4b1b      	ldr	r3, [pc, #108]	; (8002af8 <HAL_RCC_OscConfig+0x478>)
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8e:	f7fe ff0d 	bl	80018ac <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a96:	f7fe ff09 	bl	80018ac <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e05c      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aa8:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0f0      	beq.n	8002a96 <HAL_RCC_OscConfig+0x416>
 8002ab4:	e054      	b.n	8002b60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab6:	4b10      	ldr	r3, [pc, #64]	; (8002af8 <HAL_RCC_OscConfig+0x478>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abc:	f7fe fef6 	bl	80018ac <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac4:	f7fe fef2 	bl	80018ac <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e045      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ad6:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f0      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x444>
 8002ae2:	e03d      	b.n	8002b60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d107      	bne.n	8002afc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e038      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
 8002af0:	40023800 	.word	0x40023800
 8002af4:	40007000 	.word	0x40007000
 8002af8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002afc:	4b1b      	ldr	r3, [pc, #108]	; (8002b6c <HAL_RCC_OscConfig+0x4ec>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d028      	beq.n	8002b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d121      	bne.n	8002b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d11a      	bne.n	8002b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d111      	bne.n	8002b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b42:	085b      	lsrs	r3, r3, #1
 8002b44:	3b01      	subs	r3, #1
 8002b46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d107      	bne.n	8002b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d001      	beq.n	8002b60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e000      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40023800 	.word	0x40023800

08002b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e0cc      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b84:	4b68      	ldr	r3, [pc, #416]	; (8002d28 <HAL_RCC_ClockConfig+0x1b8>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d90c      	bls.n	8002bac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b92:	4b65      	ldr	r3, [pc, #404]	; (8002d28 <HAL_RCC_ClockConfig+0x1b8>)
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9a:	4b63      	ldr	r3, [pc, #396]	; (8002d28 <HAL_RCC_ClockConfig+0x1b8>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d001      	beq.n	8002bac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e0b8      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d020      	beq.n	8002bfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bc4:	4b59      	ldr	r3, [pc, #356]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	4a58      	ldr	r2, [pc, #352]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d005      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bdc:	4b53      	ldr	r3, [pc, #332]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	4a52      	ldr	r2, [pc, #328]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002be2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002be6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002be8:	4b50      	ldr	r3, [pc, #320]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	494d      	ldr	r1, [pc, #308]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d044      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d107      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0e:	4b47      	ldr	r3, [pc, #284]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d119      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e07f      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d003      	beq.n	8002c2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c2a:	2b03      	cmp	r3, #3
 8002c2c:	d107      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c2e:	4b3f      	ldr	r3, [pc, #252]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d109      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e06f      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c3e:	4b3b      	ldr	r3, [pc, #236]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e067      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c4e:	4b37      	ldr	r3, [pc, #220]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f023 0203 	bic.w	r2, r3, #3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	4934      	ldr	r1, [pc, #208]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c60:	f7fe fe24 	bl	80018ac <HAL_GetTick>
 8002c64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c66:	e00a      	b.n	8002c7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c68:	f7fe fe20 	bl	80018ac <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e04f      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c7e:	4b2b      	ldr	r3, [pc, #172]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 020c 	and.w	r2, r3, #12
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d1eb      	bne.n	8002c68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c90:	4b25      	ldr	r3, [pc, #148]	; (8002d28 <HAL_RCC_ClockConfig+0x1b8>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d20c      	bcs.n	8002cb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9e:	4b22      	ldr	r3, [pc, #136]	; (8002d28 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca6:	4b20      	ldr	r3, [pc, #128]	; (8002d28 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d001      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e032      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d008      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cc4:	4b19      	ldr	r3, [pc, #100]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	4916      	ldr	r1, [pc, #88]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d009      	beq.n	8002cf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ce2:	4b12      	ldr	r3, [pc, #72]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	490e      	ldr	r1, [pc, #56]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cf6:	f000 f821 	bl	8002d3c <HAL_RCC_GetSysClockFreq>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	091b      	lsrs	r3, r3, #4
 8002d02:	f003 030f 	and.w	r3, r3, #15
 8002d06:	490a      	ldr	r1, [pc, #40]	; (8002d30 <HAL_RCC_ClockConfig+0x1c0>)
 8002d08:	5ccb      	ldrb	r3, [r1, r3]
 8002d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d0e:	4a09      	ldr	r2, [pc, #36]	; (8002d34 <HAL_RCC_ClockConfig+0x1c4>)
 8002d10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d12:	4b09      	ldr	r3, [pc, #36]	; (8002d38 <HAL_RCC_ClockConfig+0x1c8>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fe fd84 	bl	8001824 <HAL_InitTick>

  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40023c00 	.word	0x40023c00
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	08004284 	.word	0x08004284
 8002d34:	20000000 	.word	0x20000000
 8002d38:	20000004 	.word	0x20000004

08002d3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d40:	b094      	sub	sp, #80	; 0x50
 8002d42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	647b      	str	r3, [r7, #68]	; 0x44
 8002d48:	2300      	movs	r3, #0
 8002d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d54:	4b79      	ldr	r3, [pc, #484]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 030c 	and.w	r3, r3, #12
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d00d      	beq.n	8002d7c <HAL_RCC_GetSysClockFreq+0x40>
 8002d60:	2b08      	cmp	r3, #8
 8002d62:	f200 80e1 	bhi.w	8002f28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d002      	beq.n	8002d70 <HAL_RCC_GetSysClockFreq+0x34>
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d003      	beq.n	8002d76 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d6e:	e0db      	b.n	8002f28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d70:	4b73      	ldr	r3, [pc, #460]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d72:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d74:	e0db      	b.n	8002f2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d76:	4b73      	ldr	r3, [pc, #460]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d7a:	e0d8      	b.n	8002f2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d7c:	4b6f      	ldr	r3, [pc, #444]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d84:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d86:	4b6d      	ldr	r3, [pc, #436]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d063      	beq.n	8002e5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d92:	4b6a      	ldr	r3, [pc, #424]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	099b      	lsrs	r3, r3, #6
 8002d98:	2200      	movs	r2, #0
 8002d9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002da4:	633b      	str	r3, [r7, #48]	; 0x30
 8002da6:	2300      	movs	r3, #0
 8002da8:	637b      	str	r3, [r7, #52]	; 0x34
 8002daa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002dae:	4622      	mov	r2, r4
 8002db0:	462b      	mov	r3, r5
 8002db2:	f04f 0000 	mov.w	r0, #0
 8002db6:	f04f 0100 	mov.w	r1, #0
 8002dba:	0159      	lsls	r1, r3, #5
 8002dbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dc0:	0150      	lsls	r0, r2, #5
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	4621      	mov	r1, r4
 8002dc8:	1a51      	subs	r1, r2, r1
 8002dca:	6139      	str	r1, [r7, #16]
 8002dcc:	4629      	mov	r1, r5
 8002dce:	eb63 0301 	sbc.w	r3, r3, r1
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	f04f 0300 	mov.w	r3, #0
 8002ddc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002de0:	4659      	mov	r1, fp
 8002de2:	018b      	lsls	r3, r1, #6
 8002de4:	4651      	mov	r1, sl
 8002de6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dea:	4651      	mov	r1, sl
 8002dec:	018a      	lsls	r2, r1, #6
 8002dee:	4651      	mov	r1, sl
 8002df0:	ebb2 0801 	subs.w	r8, r2, r1
 8002df4:	4659      	mov	r1, fp
 8002df6:	eb63 0901 	sbc.w	r9, r3, r1
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	f04f 0300 	mov.w	r3, #0
 8002e02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e0e:	4690      	mov	r8, r2
 8002e10:	4699      	mov	r9, r3
 8002e12:	4623      	mov	r3, r4
 8002e14:	eb18 0303 	adds.w	r3, r8, r3
 8002e18:	60bb      	str	r3, [r7, #8]
 8002e1a:	462b      	mov	r3, r5
 8002e1c:	eb49 0303 	adc.w	r3, r9, r3
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	f04f 0200 	mov.w	r2, #0
 8002e26:	f04f 0300 	mov.w	r3, #0
 8002e2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e2e:	4629      	mov	r1, r5
 8002e30:	024b      	lsls	r3, r1, #9
 8002e32:	4621      	mov	r1, r4
 8002e34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e38:	4621      	mov	r1, r4
 8002e3a:	024a      	lsls	r2, r1, #9
 8002e3c:	4610      	mov	r0, r2
 8002e3e:	4619      	mov	r1, r3
 8002e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e42:	2200      	movs	r2, #0
 8002e44:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e4c:	f7fd fe0e 	bl	8000a6c <__aeabi_uldivmod>
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	4613      	mov	r3, r2
 8002e56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e58:	e058      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e5a:	4b38      	ldr	r3, [pc, #224]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	099b      	lsrs	r3, r3, #6
 8002e60:	2200      	movs	r2, #0
 8002e62:	4618      	mov	r0, r3
 8002e64:	4611      	mov	r1, r2
 8002e66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e6a:	623b      	str	r3, [r7, #32]
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e74:	4642      	mov	r2, r8
 8002e76:	464b      	mov	r3, r9
 8002e78:	f04f 0000 	mov.w	r0, #0
 8002e7c:	f04f 0100 	mov.w	r1, #0
 8002e80:	0159      	lsls	r1, r3, #5
 8002e82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e86:	0150      	lsls	r0, r2, #5
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4641      	mov	r1, r8
 8002e8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e92:	4649      	mov	r1, r9
 8002e94:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	f04f 0300 	mov.w	r3, #0
 8002ea0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ea4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ea8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002eac:	ebb2 040a 	subs.w	r4, r2, sl
 8002eb0:	eb63 050b 	sbc.w	r5, r3, fp
 8002eb4:	f04f 0200 	mov.w	r2, #0
 8002eb8:	f04f 0300 	mov.w	r3, #0
 8002ebc:	00eb      	lsls	r3, r5, #3
 8002ebe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ec2:	00e2      	lsls	r2, r4, #3
 8002ec4:	4614      	mov	r4, r2
 8002ec6:	461d      	mov	r5, r3
 8002ec8:	4643      	mov	r3, r8
 8002eca:	18e3      	adds	r3, r4, r3
 8002ecc:	603b      	str	r3, [r7, #0]
 8002ece:	464b      	mov	r3, r9
 8002ed0:	eb45 0303 	adc.w	r3, r5, r3
 8002ed4:	607b      	str	r3, [r7, #4]
 8002ed6:	f04f 0200 	mov.w	r2, #0
 8002eda:	f04f 0300 	mov.w	r3, #0
 8002ede:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ee2:	4629      	mov	r1, r5
 8002ee4:	028b      	lsls	r3, r1, #10
 8002ee6:	4621      	mov	r1, r4
 8002ee8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002eec:	4621      	mov	r1, r4
 8002eee:	028a      	lsls	r2, r1, #10
 8002ef0:	4610      	mov	r0, r2
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	61bb      	str	r3, [r7, #24]
 8002efa:	61fa      	str	r2, [r7, #28]
 8002efc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f00:	f7fd fdb4 	bl	8000a6c <__aeabi_uldivmod>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4613      	mov	r3, r2
 8002f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f0c:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	0c1b      	lsrs	r3, r3, #16
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	3301      	adds	r3, #1
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002f1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f26:	e002      	b.n	8002f2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f28:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3750      	adds	r7, #80	; 0x50
 8002f34:	46bd      	mov	sp, r7
 8002f36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	00f42400 	.word	0x00f42400
 8002f44:	007a1200 	.word	0x007a1200

08002f48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f4c:	4b03      	ldr	r3, [pc, #12]	; (8002f5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	20000000 	.word	0x20000000

08002f60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f64:	f7ff fff0 	bl	8002f48 <HAL_RCC_GetHCLKFreq>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	0a9b      	lsrs	r3, r3, #10
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	4903      	ldr	r1, [pc, #12]	; (8002f84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f76:	5ccb      	ldrb	r3, [r1, r3]
 8002f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40023800 	.word	0x40023800
 8002f84:	08004294 	.word	0x08004294

08002f88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f8c:	f7ff ffdc 	bl	8002f48 <HAL_RCC_GetHCLKFreq>
 8002f90:	4602      	mov	r2, r0
 8002f92:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	0b5b      	lsrs	r3, r3, #13
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	4903      	ldr	r1, [pc, #12]	; (8002fac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f9e:	5ccb      	ldrb	r3, [r1, r3]
 8002fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	08004294 	.word	0x08004294

08002fb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e03f      	b.n	8003042 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d106      	bne.n	8002fdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7fe fb90 	bl	80016fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2224      	movs	r2, #36	; 0x24
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ff2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 f9cb 	bl	8003390 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003008:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	695a      	ldr	r2, [r3, #20]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003018:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68da      	ldr	r2, [r3, #12]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003028:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2220      	movs	r2, #32
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2220      	movs	r2, #32
 800303c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b08a      	sub	sp, #40	; 0x28
 800304e:	af02      	add	r7, sp, #8
 8003050:	60f8      	str	r0, [r7, #12]
 8003052:	60b9      	str	r1, [r7, #8]
 8003054:	603b      	str	r3, [r7, #0]
 8003056:	4613      	mov	r3, r2
 8003058:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800305a:	2300      	movs	r3, #0
 800305c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b20      	cmp	r3, #32
 8003068:	d17c      	bne.n	8003164 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d002      	beq.n	8003076 <HAL_UART_Transmit+0x2c>
 8003070:	88fb      	ldrh	r3, [r7, #6]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e075      	b.n	8003166 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003080:	2b01      	cmp	r3, #1
 8003082:	d101      	bne.n	8003088 <HAL_UART_Transmit+0x3e>
 8003084:	2302      	movs	r3, #2
 8003086:	e06e      	b.n	8003166 <HAL_UART_Transmit+0x11c>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2221      	movs	r2, #33	; 0x21
 800309a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800309e:	f7fe fc05 	bl	80018ac <HAL_GetTick>
 80030a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	88fa      	ldrh	r2, [r7, #6]
 80030a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	88fa      	ldrh	r2, [r7, #6]
 80030ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030b8:	d108      	bne.n	80030cc <HAL_UART_Transmit+0x82>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d104      	bne.n	80030cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80030c2:	2300      	movs	r3, #0
 80030c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	61bb      	str	r3, [r7, #24]
 80030ca:	e003      	b.n	80030d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030d0:	2300      	movs	r3, #0
 80030d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80030dc:	e02a      	b.n	8003134 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	2200      	movs	r2, #0
 80030e6:	2180      	movs	r1, #128	; 0x80
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 f8e2 	bl	80032b2 <UART_WaitOnFlagUntilTimeout>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e036      	b.n	8003166 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10b      	bne.n	8003116 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	461a      	mov	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800310c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	3302      	adds	r3, #2
 8003112:	61bb      	str	r3, [r7, #24]
 8003114:	e007      	b.n	8003126 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	781a      	ldrb	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	3301      	adds	r3, #1
 8003124:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800312a:	b29b      	uxth	r3, r3
 800312c:	3b01      	subs	r3, #1
 800312e:	b29a      	uxth	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003138:	b29b      	uxth	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1cf      	bne.n	80030de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	2200      	movs	r2, #0
 8003146:	2140      	movs	r1, #64	; 0x40
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f000 f8b2 	bl	80032b2 <UART_WaitOnFlagUntilTimeout>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e006      	b.n	8003166 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2220      	movs	r2, #32
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003160:	2300      	movs	r3, #0
 8003162:	e000      	b.n	8003166 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003164:	2302      	movs	r3, #2
  }
}
 8003166:	4618      	mov	r0, r3
 8003168:	3720      	adds	r7, #32
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b08a      	sub	sp, #40	; 0x28
 8003172:	af02      	add	r7, sp, #8
 8003174:	60f8      	str	r0, [r7, #12]
 8003176:	60b9      	str	r1, [r7, #8]
 8003178:	603b      	str	r3, [r7, #0]
 800317a:	4613      	mov	r3, r2
 800317c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800317e:	2300      	movs	r3, #0
 8003180:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b20      	cmp	r3, #32
 800318c:	f040 808c 	bne.w	80032a8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d002      	beq.n	800319c <HAL_UART_Receive+0x2e>
 8003196:	88fb      	ldrh	r3, [r7, #6]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e084      	b.n	80032aa <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d101      	bne.n	80031ae <HAL_UART_Receive+0x40>
 80031aa:	2302      	movs	r3, #2
 80031ac:	e07d      	b.n	80032aa <HAL_UART_Receive+0x13c>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2222      	movs	r2, #34	; 0x22
 80031c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031ca:	f7fe fb6f 	bl	80018ac <HAL_GetTick>
 80031ce:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	88fa      	ldrh	r2, [r7, #6]
 80031d4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	88fa      	ldrh	r2, [r7, #6]
 80031da:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031e4:	d108      	bne.n	80031f8 <HAL_UART_Receive+0x8a>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d104      	bne.n	80031f8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	61bb      	str	r3, [r7, #24]
 80031f6:	e003      	b.n	8003200 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031fc:	2300      	movs	r3, #0
 80031fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003208:	e043      	b.n	8003292 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2200      	movs	r2, #0
 8003212:	2120      	movs	r1, #32
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f000 f84c 	bl	80032b2 <UART_WaitOnFlagUntilTimeout>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e042      	b.n	80032aa <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10c      	bne.n	8003244 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	b29b      	uxth	r3, r3
 8003232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003236:	b29a      	uxth	r2, r3
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	3302      	adds	r3, #2
 8003240:	61bb      	str	r3, [r7, #24]
 8003242:	e01f      	b.n	8003284 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800324c:	d007      	beq.n	800325e <HAL_UART_Receive+0xf0>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10a      	bne.n	800326c <HAL_UART_Receive+0xfe>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d106      	bne.n	800326c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	b2da      	uxtb	r2, r3
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	701a      	strb	r2, [r3, #0]
 800326a:	e008      	b.n	800327e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	b2db      	uxtb	r3, r3
 8003274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003278:	b2da      	uxtb	r2, r3
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	3301      	adds	r3, #1
 8003282:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003288:	b29b      	uxth	r3, r3
 800328a:	3b01      	subs	r3, #1
 800328c:	b29a      	uxth	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003296:	b29b      	uxth	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1b6      	bne.n	800320a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80032a4:	2300      	movs	r3, #0
 80032a6:	e000      	b.n	80032aa <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80032a8:	2302      	movs	r3, #2
  }
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3720      	adds	r7, #32
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b090      	sub	sp, #64	; 0x40
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	60f8      	str	r0, [r7, #12]
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	603b      	str	r3, [r7, #0]
 80032be:	4613      	mov	r3, r2
 80032c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032c2:	e050      	b.n	8003366 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ca:	d04c      	beq.n	8003366 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d007      	beq.n	80032e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80032d2:	f7fe faeb 	bl	80018ac <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032de:	429a      	cmp	r2, r3
 80032e0:	d241      	bcs.n	8003366 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	330c      	adds	r3, #12
 80032e8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ec:	e853 3f00 	ldrex	r3, [r3]
 80032f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	330c      	adds	r3, #12
 8003300:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003302:	637a      	str	r2, [r7, #52]	; 0x34
 8003304:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003306:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003308:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800330a:	e841 2300 	strex	r3, r2, [r1]
 800330e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1e5      	bne.n	80032e2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	3314      	adds	r3, #20
 800331c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	e853 3f00 	ldrex	r3, [r3]
 8003324:	613b      	str	r3, [r7, #16]
   return(result);
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	f023 0301 	bic.w	r3, r3, #1
 800332c:	63bb      	str	r3, [r7, #56]	; 0x38
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	3314      	adds	r3, #20
 8003334:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003336:	623a      	str	r2, [r7, #32]
 8003338:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333a:	69f9      	ldr	r1, [r7, #28]
 800333c:	6a3a      	ldr	r2, [r7, #32]
 800333e:	e841 2300 	strex	r3, r2, [r1]
 8003342:	61bb      	str	r3, [r7, #24]
   return(result);
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1e5      	bne.n	8003316 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2220      	movs	r2, #32
 800334e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2220      	movs	r2, #32
 8003356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e00f      	b.n	8003386 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	4013      	ands	r3, r2
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	429a      	cmp	r2, r3
 8003374:	bf0c      	ite	eq
 8003376:	2301      	moveq	r3, #1
 8003378:	2300      	movne	r3, #0
 800337a:	b2db      	uxtb	r3, r3
 800337c:	461a      	mov	r2, r3
 800337e:	79fb      	ldrb	r3, [r7, #7]
 8003380:	429a      	cmp	r2, r3
 8003382:	d09f      	beq.n	80032c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3740      	adds	r7, #64	; 0x40
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
	...

08003390 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003394:	b0c0      	sub	sp, #256	; 0x100
 8003396:	af00      	add	r7, sp, #0
 8003398:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800339c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80033a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ac:	68d9      	ldr	r1, [r3, #12]
 80033ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	ea40 0301 	orr.w	r3, r0, r1
 80033b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	431a      	orrs	r2, r3
 80033c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	431a      	orrs	r2, r3
 80033d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80033dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80033e8:	f021 010c 	bic.w	r1, r1, #12
 80033ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80033f6:	430b      	orrs	r3, r1
 80033f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800340a:	6999      	ldr	r1, [r3, #24]
 800340c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	ea40 0301 	orr.w	r3, r0, r1
 8003416:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	4b8f      	ldr	r3, [pc, #572]	; (800365c <UART_SetConfig+0x2cc>)
 8003420:	429a      	cmp	r2, r3
 8003422:	d005      	beq.n	8003430 <UART_SetConfig+0xa0>
 8003424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	4b8d      	ldr	r3, [pc, #564]	; (8003660 <UART_SetConfig+0x2d0>)
 800342c:	429a      	cmp	r2, r3
 800342e:	d104      	bne.n	800343a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003430:	f7ff fdaa 	bl	8002f88 <HAL_RCC_GetPCLK2Freq>
 8003434:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003438:	e003      	b.n	8003442 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800343a:	f7ff fd91 	bl	8002f60 <HAL_RCC_GetPCLK1Freq>
 800343e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800344c:	f040 810c 	bne.w	8003668 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003450:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003454:	2200      	movs	r2, #0
 8003456:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800345a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800345e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003462:	4622      	mov	r2, r4
 8003464:	462b      	mov	r3, r5
 8003466:	1891      	adds	r1, r2, r2
 8003468:	65b9      	str	r1, [r7, #88]	; 0x58
 800346a:	415b      	adcs	r3, r3
 800346c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800346e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003472:	4621      	mov	r1, r4
 8003474:	eb12 0801 	adds.w	r8, r2, r1
 8003478:	4629      	mov	r1, r5
 800347a:	eb43 0901 	adc.w	r9, r3, r1
 800347e:	f04f 0200 	mov.w	r2, #0
 8003482:	f04f 0300 	mov.w	r3, #0
 8003486:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800348a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800348e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003492:	4690      	mov	r8, r2
 8003494:	4699      	mov	r9, r3
 8003496:	4623      	mov	r3, r4
 8003498:	eb18 0303 	adds.w	r3, r8, r3
 800349c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80034a0:	462b      	mov	r3, r5
 80034a2:	eb49 0303 	adc.w	r3, r9, r3
 80034a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80034aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80034b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80034ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80034be:	460b      	mov	r3, r1
 80034c0:	18db      	adds	r3, r3, r3
 80034c2:	653b      	str	r3, [r7, #80]	; 0x50
 80034c4:	4613      	mov	r3, r2
 80034c6:	eb42 0303 	adc.w	r3, r2, r3
 80034ca:	657b      	str	r3, [r7, #84]	; 0x54
 80034cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80034d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80034d4:	f7fd faca 	bl	8000a6c <__aeabi_uldivmod>
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	4b61      	ldr	r3, [pc, #388]	; (8003664 <UART_SetConfig+0x2d4>)
 80034de:	fba3 2302 	umull	r2, r3, r3, r2
 80034e2:	095b      	lsrs	r3, r3, #5
 80034e4:	011c      	lsls	r4, r3, #4
 80034e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034ea:	2200      	movs	r2, #0
 80034ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80034f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80034f8:	4642      	mov	r2, r8
 80034fa:	464b      	mov	r3, r9
 80034fc:	1891      	adds	r1, r2, r2
 80034fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8003500:	415b      	adcs	r3, r3
 8003502:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003504:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003508:	4641      	mov	r1, r8
 800350a:	eb12 0a01 	adds.w	sl, r2, r1
 800350e:	4649      	mov	r1, r9
 8003510:	eb43 0b01 	adc.w	fp, r3, r1
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	f04f 0300 	mov.w	r3, #0
 800351c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003520:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003524:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003528:	4692      	mov	sl, r2
 800352a:	469b      	mov	fp, r3
 800352c:	4643      	mov	r3, r8
 800352e:	eb1a 0303 	adds.w	r3, sl, r3
 8003532:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003536:	464b      	mov	r3, r9
 8003538:	eb4b 0303 	adc.w	r3, fp, r3
 800353c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800354c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003550:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003554:	460b      	mov	r3, r1
 8003556:	18db      	adds	r3, r3, r3
 8003558:	643b      	str	r3, [r7, #64]	; 0x40
 800355a:	4613      	mov	r3, r2
 800355c:	eb42 0303 	adc.w	r3, r2, r3
 8003560:	647b      	str	r3, [r7, #68]	; 0x44
 8003562:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003566:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800356a:	f7fd fa7f 	bl	8000a6c <__aeabi_uldivmod>
 800356e:	4602      	mov	r2, r0
 8003570:	460b      	mov	r3, r1
 8003572:	4611      	mov	r1, r2
 8003574:	4b3b      	ldr	r3, [pc, #236]	; (8003664 <UART_SetConfig+0x2d4>)
 8003576:	fba3 2301 	umull	r2, r3, r3, r1
 800357a:	095b      	lsrs	r3, r3, #5
 800357c:	2264      	movs	r2, #100	; 0x64
 800357e:	fb02 f303 	mul.w	r3, r2, r3
 8003582:	1acb      	subs	r3, r1, r3
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800358a:	4b36      	ldr	r3, [pc, #216]	; (8003664 <UART_SetConfig+0x2d4>)
 800358c:	fba3 2302 	umull	r2, r3, r3, r2
 8003590:	095b      	lsrs	r3, r3, #5
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003598:	441c      	add	r4, r3
 800359a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800359e:	2200      	movs	r2, #0
 80035a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80035a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80035ac:	4642      	mov	r2, r8
 80035ae:	464b      	mov	r3, r9
 80035b0:	1891      	adds	r1, r2, r2
 80035b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80035b4:	415b      	adcs	r3, r3
 80035b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035bc:	4641      	mov	r1, r8
 80035be:	1851      	adds	r1, r2, r1
 80035c0:	6339      	str	r1, [r7, #48]	; 0x30
 80035c2:	4649      	mov	r1, r9
 80035c4:	414b      	adcs	r3, r1
 80035c6:	637b      	str	r3, [r7, #52]	; 0x34
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	f04f 0300 	mov.w	r3, #0
 80035d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80035d4:	4659      	mov	r1, fp
 80035d6:	00cb      	lsls	r3, r1, #3
 80035d8:	4651      	mov	r1, sl
 80035da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035de:	4651      	mov	r1, sl
 80035e0:	00ca      	lsls	r2, r1, #3
 80035e2:	4610      	mov	r0, r2
 80035e4:	4619      	mov	r1, r3
 80035e6:	4603      	mov	r3, r0
 80035e8:	4642      	mov	r2, r8
 80035ea:	189b      	adds	r3, r3, r2
 80035ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035f0:	464b      	mov	r3, r9
 80035f2:	460a      	mov	r2, r1
 80035f4:	eb42 0303 	adc.w	r3, r2, r3
 80035f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003608:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800360c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003610:	460b      	mov	r3, r1
 8003612:	18db      	adds	r3, r3, r3
 8003614:	62bb      	str	r3, [r7, #40]	; 0x28
 8003616:	4613      	mov	r3, r2
 8003618:	eb42 0303 	adc.w	r3, r2, r3
 800361c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800361e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003622:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003626:	f7fd fa21 	bl	8000a6c <__aeabi_uldivmod>
 800362a:	4602      	mov	r2, r0
 800362c:	460b      	mov	r3, r1
 800362e:	4b0d      	ldr	r3, [pc, #52]	; (8003664 <UART_SetConfig+0x2d4>)
 8003630:	fba3 1302 	umull	r1, r3, r3, r2
 8003634:	095b      	lsrs	r3, r3, #5
 8003636:	2164      	movs	r1, #100	; 0x64
 8003638:	fb01 f303 	mul.w	r3, r1, r3
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	3332      	adds	r3, #50	; 0x32
 8003642:	4a08      	ldr	r2, [pc, #32]	; (8003664 <UART_SetConfig+0x2d4>)
 8003644:	fba2 2303 	umull	r2, r3, r2, r3
 8003648:	095b      	lsrs	r3, r3, #5
 800364a:	f003 0207 	and.w	r2, r3, #7
 800364e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4422      	add	r2, r4
 8003656:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003658:	e105      	b.n	8003866 <UART_SetConfig+0x4d6>
 800365a:	bf00      	nop
 800365c:	40011000 	.word	0x40011000
 8003660:	40011400 	.word	0x40011400
 8003664:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003668:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800366c:	2200      	movs	r2, #0
 800366e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003672:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003676:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800367a:	4642      	mov	r2, r8
 800367c:	464b      	mov	r3, r9
 800367e:	1891      	adds	r1, r2, r2
 8003680:	6239      	str	r1, [r7, #32]
 8003682:	415b      	adcs	r3, r3
 8003684:	627b      	str	r3, [r7, #36]	; 0x24
 8003686:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800368a:	4641      	mov	r1, r8
 800368c:	1854      	adds	r4, r2, r1
 800368e:	4649      	mov	r1, r9
 8003690:	eb43 0501 	adc.w	r5, r3, r1
 8003694:	f04f 0200 	mov.w	r2, #0
 8003698:	f04f 0300 	mov.w	r3, #0
 800369c:	00eb      	lsls	r3, r5, #3
 800369e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036a2:	00e2      	lsls	r2, r4, #3
 80036a4:	4614      	mov	r4, r2
 80036a6:	461d      	mov	r5, r3
 80036a8:	4643      	mov	r3, r8
 80036aa:	18e3      	adds	r3, r4, r3
 80036ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80036b0:	464b      	mov	r3, r9
 80036b2:	eb45 0303 	adc.w	r3, r5, r3
 80036b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80036ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80036ca:	f04f 0200 	mov.w	r2, #0
 80036ce:	f04f 0300 	mov.w	r3, #0
 80036d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80036d6:	4629      	mov	r1, r5
 80036d8:	008b      	lsls	r3, r1, #2
 80036da:	4621      	mov	r1, r4
 80036dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036e0:	4621      	mov	r1, r4
 80036e2:	008a      	lsls	r2, r1, #2
 80036e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80036e8:	f7fd f9c0 	bl	8000a6c <__aeabi_uldivmod>
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	4b60      	ldr	r3, [pc, #384]	; (8003874 <UART_SetConfig+0x4e4>)
 80036f2:	fba3 2302 	umull	r2, r3, r3, r2
 80036f6:	095b      	lsrs	r3, r3, #5
 80036f8:	011c      	lsls	r4, r3, #4
 80036fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036fe:	2200      	movs	r2, #0
 8003700:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003704:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003708:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800370c:	4642      	mov	r2, r8
 800370e:	464b      	mov	r3, r9
 8003710:	1891      	adds	r1, r2, r2
 8003712:	61b9      	str	r1, [r7, #24]
 8003714:	415b      	adcs	r3, r3
 8003716:	61fb      	str	r3, [r7, #28]
 8003718:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800371c:	4641      	mov	r1, r8
 800371e:	1851      	adds	r1, r2, r1
 8003720:	6139      	str	r1, [r7, #16]
 8003722:	4649      	mov	r1, r9
 8003724:	414b      	adcs	r3, r1
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	f04f 0300 	mov.w	r3, #0
 8003730:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003734:	4659      	mov	r1, fp
 8003736:	00cb      	lsls	r3, r1, #3
 8003738:	4651      	mov	r1, sl
 800373a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800373e:	4651      	mov	r1, sl
 8003740:	00ca      	lsls	r2, r1, #3
 8003742:	4610      	mov	r0, r2
 8003744:	4619      	mov	r1, r3
 8003746:	4603      	mov	r3, r0
 8003748:	4642      	mov	r2, r8
 800374a:	189b      	adds	r3, r3, r2
 800374c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003750:	464b      	mov	r3, r9
 8003752:	460a      	mov	r2, r1
 8003754:	eb42 0303 	adc.w	r3, r2, r3
 8003758:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800375c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	67bb      	str	r3, [r7, #120]	; 0x78
 8003766:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003768:	f04f 0200 	mov.w	r2, #0
 800376c:	f04f 0300 	mov.w	r3, #0
 8003770:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003774:	4649      	mov	r1, r9
 8003776:	008b      	lsls	r3, r1, #2
 8003778:	4641      	mov	r1, r8
 800377a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800377e:	4641      	mov	r1, r8
 8003780:	008a      	lsls	r2, r1, #2
 8003782:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003786:	f7fd f971 	bl	8000a6c <__aeabi_uldivmod>
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	4b39      	ldr	r3, [pc, #228]	; (8003874 <UART_SetConfig+0x4e4>)
 8003790:	fba3 1302 	umull	r1, r3, r3, r2
 8003794:	095b      	lsrs	r3, r3, #5
 8003796:	2164      	movs	r1, #100	; 0x64
 8003798:	fb01 f303 	mul.w	r3, r1, r3
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	3332      	adds	r3, #50	; 0x32
 80037a2:	4a34      	ldr	r2, [pc, #208]	; (8003874 <UART_SetConfig+0x4e4>)
 80037a4:	fba2 2303 	umull	r2, r3, r2, r3
 80037a8:	095b      	lsrs	r3, r3, #5
 80037aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037ae:	441c      	add	r4, r3
 80037b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037b4:	2200      	movs	r2, #0
 80037b6:	673b      	str	r3, [r7, #112]	; 0x70
 80037b8:	677a      	str	r2, [r7, #116]	; 0x74
 80037ba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80037be:	4642      	mov	r2, r8
 80037c0:	464b      	mov	r3, r9
 80037c2:	1891      	adds	r1, r2, r2
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	415b      	adcs	r3, r3
 80037c8:	60fb      	str	r3, [r7, #12]
 80037ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037ce:	4641      	mov	r1, r8
 80037d0:	1851      	adds	r1, r2, r1
 80037d2:	6039      	str	r1, [r7, #0]
 80037d4:	4649      	mov	r1, r9
 80037d6:	414b      	adcs	r3, r1
 80037d8:	607b      	str	r3, [r7, #4]
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	f04f 0300 	mov.w	r3, #0
 80037e2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037e6:	4659      	mov	r1, fp
 80037e8:	00cb      	lsls	r3, r1, #3
 80037ea:	4651      	mov	r1, sl
 80037ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037f0:	4651      	mov	r1, sl
 80037f2:	00ca      	lsls	r2, r1, #3
 80037f4:	4610      	mov	r0, r2
 80037f6:	4619      	mov	r1, r3
 80037f8:	4603      	mov	r3, r0
 80037fa:	4642      	mov	r2, r8
 80037fc:	189b      	adds	r3, r3, r2
 80037fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8003800:	464b      	mov	r3, r9
 8003802:	460a      	mov	r2, r1
 8003804:	eb42 0303 	adc.w	r3, r2, r3
 8003808:	66fb      	str	r3, [r7, #108]	; 0x6c
 800380a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	663b      	str	r3, [r7, #96]	; 0x60
 8003814:	667a      	str	r2, [r7, #100]	; 0x64
 8003816:	f04f 0200 	mov.w	r2, #0
 800381a:	f04f 0300 	mov.w	r3, #0
 800381e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003822:	4649      	mov	r1, r9
 8003824:	008b      	lsls	r3, r1, #2
 8003826:	4641      	mov	r1, r8
 8003828:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800382c:	4641      	mov	r1, r8
 800382e:	008a      	lsls	r2, r1, #2
 8003830:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003834:	f7fd f91a 	bl	8000a6c <__aeabi_uldivmod>
 8003838:	4602      	mov	r2, r0
 800383a:	460b      	mov	r3, r1
 800383c:	4b0d      	ldr	r3, [pc, #52]	; (8003874 <UART_SetConfig+0x4e4>)
 800383e:	fba3 1302 	umull	r1, r3, r3, r2
 8003842:	095b      	lsrs	r3, r3, #5
 8003844:	2164      	movs	r1, #100	; 0x64
 8003846:	fb01 f303 	mul.w	r3, r1, r3
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	3332      	adds	r3, #50	; 0x32
 8003850:	4a08      	ldr	r2, [pc, #32]	; (8003874 <UART_SetConfig+0x4e4>)
 8003852:	fba2 2303 	umull	r2, r3, r2, r3
 8003856:	095b      	lsrs	r3, r3, #5
 8003858:	f003 020f 	and.w	r2, r3, #15
 800385c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4422      	add	r2, r4
 8003864:	609a      	str	r2, [r3, #8]
}
 8003866:	bf00      	nop
 8003868:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800386c:	46bd      	mov	sp, r7
 800386e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003872:	bf00      	nop
 8003874:	51eb851f 	.word	0x51eb851f

08003878 <__errno>:
 8003878:	4b01      	ldr	r3, [pc, #4]	; (8003880 <__errno+0x8>)
 800387a:	6818      	ldr	r0, [r3, #0]
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	2000000c 	.word	0x2000000c

08003884 <__libc_init_array>:
 8003884:	b570      	push	{r4, r5, r6, lr}
 8003886:	4d0d      	ldr	r5, [pc, #52]	; (80038bc <__libc_init_array+0x38>)
 8003888:	4c0d      	ldr	r4, [pc, #52]	; (80038c0 <__libc_init_array+0x3c>)
 800388a:	1b64      	subs	r4, r4, r5
 800388c:	10a4      	asrs	r4, r4, #2
 800388e:	2600      	movs	r6, #0
 8003890:	42a6      	cmp	r6, r4
 8003892:	d109      	bne.n	80038a8 <__libc_init_array+0x24>
 8003894:	4d0b      	ldr	r5, [pc, #44]	; (80038c4 <__libc_init_array+0x40>)
 8003896:	4c0c      	ldr	r4, [pc, #48]	; (80038c8 <__libc_init_array+0x44>)
 8003898:	f000 fc8e 	bl	80041b8 <_init>
 800389c:	1b64      	subs	r4, r4, r5
 800389e:	10a4      	asrs	r4, r4, #2
 80038a0:	2600      	movs	r6, #0
 80038a2:	42a6      	cmp	r6, r4
 80038a4:	d105      	bne.n	80038b2 <__libc_init_array+0x2e>
 80038a6:	bd70      	pop	{r4, r5, r6, pc}
 80038a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ac:	4798      	blx	r3
 80038ae:	3601      	adds	r6, #1
 80038b0:	e7ee      	b.n	8003890 <__libc_init_array+0xc>
 80038b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80038b6:	4798      	blx	r3
 80038b8:	3601      	adds	r6, #1
 80038ba:	e7f2      	b.n	80038a2 <__libc_init_array+0x1e>
 80038bc:	080042d8 	.word	0x080042d8
 80038c0:	080042d8 	.word	0x080042d8
 80038c4:	080042d8 	.word	0x080042d8
 80038c8:	080042dc 	.word	0x080042dc

080038cc <memset>:
 80038cc:	4402      	add	r2, r0
 80038ce:	4603      	mov	r3, r0
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d100      	bne.n	80038d6 <memset+0xa>
 80038d4:	4770      	bx	lr
 80038d6:	f803 1b01 	strb.w	r1, [r3], #1
 80038da:	e7f9      	b.n	80038d0 <memset+0x4>

080038dc <siprintf>:
 80038dc:	b40e      	push	{r1, r2, r3}
 80038de:	b500      	push	{lr}
 80038e0:	b09c      	sub	sp, #112	; 0x70
 80038e2:	ab1d      	add	r3, sp, #116	; 0x74
 80038e4:	9002      	str	r0, [sp, #8]
 80038e6:	9006      	str	r0, [sp, #24]
 80038e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80038ec:	4809      	ldr	r0, [pc, #36]	; (8003914 <siprintf+0x38>)
 80038ee:	9107      	str	r1, [sp, #28]
 80038f0:	9104      	str	r1, [sp, #16]
 80038f2:	4909      	ldr	r1, [pc, #36]	; (8003918 <siprintf+0x3c>)
 80038f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80038f8:	9105      	str	r1, [sp, #20]
 80038fa:	6800      	ldr	r0, [r0, #0]
 80038fc:	9301      	str	r3, [sp, #4]
 80038fe:	a902      	add	r1, sp, #8
 8003900:	f000 f868 	bl	80039d4 <_svfiprintf_r>
 8003904:	9b02      	ldr	r3, [sp, #8]
 8003906:	2200      	movs	r2, #0
 8003908:	701a      	strb	r2, [r3, #0]
 800390a:	b01c      	add	sp, #112	; 0x70
 800390c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003910:	b003      	add	sp, #12
 8003912:	4770      	bx	lr
 8003914:	2000000c 	.word	0x2000000c
 8003918:	ffff0208 	.word	0xffff0208

0800391c <__ssputs_r>:
 800391c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003920:	688e      	ldr	r6, [r1, #8]
 8003922:	429e      	cmp	r6, r3
 8003924:	4682      	mov	sl, r0
 8003926:	460c      	mov	r4, r1
 8003928:	4690      	mov	r8, r2
 800392a:	461f      	mov	r7, r3
 800392c:	d838      	bhi.n	80039a0 <__ssputs_r+0x84>
 800392e:	898a      	ldrh	r2, [r1, #12]
 8003930:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003934:	d032      	beq.n	800399c <__ssputs_r+0x80>
 8003936:	6825      	ldr	r5, [r4, #0]
 8003938:	6909      	ldr	r1, [r1, #16]
 800393a:	eba5 0901 	sub.w	r9, r5, r1
 800393e:	6965      	ldr	r5, [r4, #20]
 8003940:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003944:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003948:	3301      	adds	r3, #1
 800394a:	444b      	add	r3, r9
 800394c:	106d      	asrs	r5, r5, #1
 800394e:	429d      	cmp	r5, r3
 8003950:	bf38      	it	cc
 8003952:	461d      	movcc	r5, r3
 8003954:	0553      	lsls	r3, r2, #21
 8003956:	d531      	bpl.n	80039bc <__ssputs_r+0xa0>
 8003958:	4629      	mov	r1, r5
 800395a:	f000 fb63 	bl	8004024 <_malloc_r>
 800395e:	4606      	mov	r6, r0
 8003960:	b950      	cbnz	r0, 8003978 <__ssputs_r+0x5c>
 8003962:	230c      	movs	r3, #12
 8003964:	f8ca 3000 	str.w	r3, [sl]
 8003968:	89a3      	ldrh	r3, [r4, #12]
 800396a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800396e:	81a3      	strh	r3, [r4, #12]
 8003970:	f04f 30ff 	mov.w	r0, #4294967295
 8003974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003978:	6921      	ldr	r1, [r4, #16]
 800397a:	464a      	mov	r2, r9
 800397c:	f000 fabe 	bl	8003efc <memcpy>
 8003980:	89a3      	ldrh	r3, [r4, #12]
 8003982:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800398a:	81a3      	strh	r3, [r4, #12]
 800398c:	6126      	str	r6, [r4, #16]
 800398e:	6165      	str	r5, [r4, #20]
 8003990:	444e      	add	r6, r9
 8003992:	eba5 0509 	sub.w	r5, r5, r9
 8003996:	6026      	str	r6, [r4, #0]
 8003998:	60a5      	str	r5, [r4, #8]
 800399a:	463e      	mov	r6, r7
 800399c:	42be      	cmp	r6, r7
 800399e:	d900      	bls.n	80039a2 <__ssputs_r+0x86>
 80039a0:	463e      	mov	r6, r7
 80039a2:	6820      	ldr	r0, [r4, #0]
 80039a4:	4632      	mov	r2, r6
 80039a6:	4641      	mov	r1, r8
 80039a8:	f000 fab6 	bl	8003f18 <memmove>
 80039ac:	68a3      	ldr	r3, [r4, #8]
 80039ae:	1b9b      	subs	r3, r3, r6
 80039b0:	60a3      	str	r3, [r4, #8]
 80039b2:	6823      	ldr	r3, [r4, #0]
 80039b4:	4433      	add	r3, r6
 80039b6:	6023      	str	r3, [r4, #0]
 80039b8:	2000      	movs	r0, #0
 80039ba:	e7db      	b.n	8003974 <__ssputs_r+0x58>
 80039bc:	462a      	mov	r2, r5
 80039be:	f000 fba5 	bl	800410c <_realloc_r>
 80039c2:	4606      	mov	r6, r0
 80039c4:	2800      	cmp	r0, #0
 80039c6:	d1e1      	bne.n	800398c <__ssputs_r+0x70>
 80039c8:	6921      	ldr	r1, [r4, #16]
 80039ca:	4650      	mov	r0, sl
 80039cc:	f000 fabe 	bl	8003f4c <_free_r>
 80039d0:	e7c7      	b.n	8003962 <__ssputs_r+0x46>
	...

080039d4 <_svfiprintf_r>:
 80039d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039d8:	4698      	mov	r8, r3
 80039da:	898b      	ldrh	r3, [r1, #12]
 80039dc:	061b      	lsls	r3, r3, #24
 80039de:	b09d      	sub	sp, #116	; 0x74
 80039e0:	4607      	mov	r7, r0
 80039e2:	460d      	mov	r5, r1
 80039e4:	4614      	mov	r4, r2
 80039e6:	d50e      	bpl.n	8003a06 <_svfiprintf_r+0x32>
 80039e8:	690b      	ldr	r3, [r1, #16]
 80039ea:	b963      	cbnz	r3, 8003a06 <_svfiprintf_r+0x32>
 80039ec:	2140      	movs	r1, #64	; 0x40
 80039ee:	f000 fb19 	bl	8004024 <_malloc_r>
 80039f2:	6028      	str	r0, [r5, #0]
 80039f4:	6128      	str	r0, [r5, #16]
 80039f6:	b920      	cbnz	r0, 8003a02 <_svfiprintf_r+0x2e>
 80039f8:	230c      	movs	r3, #12
 80039fa:	603b      	str	r3, [r7, #0]
 80039fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003a00:	e0d1      	b.n	8003ba6 <_svfiprintf_r+0x1d2>
 8003a02:	2340      	movs	r3, #64	; 0x40
 8003a04:	616b      	str	r3, [r5, #20]
 8003a06:	2300      	movs	r3, #0
 8003a08:	9309      	str	r3, [sp, #36]	; 0x24
 8003a0a:	2320      	movs	r3, #32
 8003a0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a10:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a14:	2330      	movs	r3, #48	; 0x30
 8003a16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003bc0 <_svfiprintf_r+0x1ec>
 8003a1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a1e:	f04f 0901 	mov.w	r9, #1
 8003a22:	4623      	mov	r3, r4
 8003a24:	469a      	mov	sl, r3
 8003a26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a2a:	b10a      	cbz	r2, 8003a30 <_svfiprintf_r+0x5c>
 8003a2c:	2a25      	cmp	r2, #37	; 0x25
 8003a2e:	d1f9      	bne.n	8003a24 <_svfiprintf_r+0x50>
 8003a30:	ebba 0b04 	subs.w	fp, sl, r4
 8003a34:	d00b      	beq.n	8003a4e <_svfiprintf_r+0x7a>
 8003a36:	465b      	mov	r3, fp
 8003a38:	4622      	mov	r2, r4
 8003a3a:	4629      	mov	r1, r5
 8003a3c:	4638      	mov	r0, r7
 8003a3e:	f7ff ff6d 	bl	800391c <__ssputs_r>
 8003a42:	3001      	adds	r0, #1
 8003a44:	f000 80aa 	beq.w	8003b9c <_svfiprintf_r+0x1c8>
 8003a48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a4a:	445a      	add	r2, fp
 8003a4c:	9209      	str	r2, [sp, #36]	; 0x24
 8003a4e:	f89a 3000 	ldrb.w	r3, [sl]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f000 80a2 	beq.w	8003b9c <_svfiprintf_r+0x1c8>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a62:	f10a 0a01 	add.w	sl, sl, #1
 8003a66:	9304      	str	r3, [sp, #16]
 8003a68:	9307      	str	r3, [sp, #28]
 8003a6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a6e:	931a      	str	r3, [sp, #104]	; 0x68
 8003a70:	4654      	mov	r4, sl
 8003a72:	2205      	movs	r2, #5
 8003a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a78:	4851      	ldr	r0, [pc, #324]	; (8003bc0 <_svfiprintf_r+0x1ec>)
 8003a7a:	f7fc fbb1 	bl	80001e0 <memchr>
 8003a7e:	9a04      	ldr	r2, [sp, #16]
 8003a80:	b9d8      	cbnz	r0, 8003aba <_svfiprintf_r+0xe6>
 8003a82:	06d0      	lsls	r0, r2, #27
 8003a84:	bf44      	itt	mi
 8003a86:	2320      	movmi	r3, #32
 8003a88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a8c:	0711      	lsls	r1, r2, #28
 8003a8e:	bf44      	itt	mi
 8003a90:	232b      	movmi	r3, #43	; 0x2b
 8003a92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a96:	f89a 3000 	ldrb.w	r3, [sl]
 8003a9a:	2b2a      	cmp	r3, #42	; 0x2a
 8003a9c:	d015      	beq.n	8003aca <_svfiprintf_r+0xf6>
 8003a9e:	9a07      	ldr	r2, [sp, #28]
 8003aa0:	4654      	mov	r4, sl
 8003aa2:	2000      	movs	r0, #0
 8003aa4:	f04f 0c0a 	mov.w	ip, #10
 8003aa8:	4621      	mov	r1, r4
 8003aaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003aae:	3b30      	subs	r3, #48	; 0x30
 8003ab0:	2b09      	cmp	r3, #9
 8003ab2:	d94e      	bls.n	8003b52 <_svfiprintf_r+0x17e>
 8003ab4:	b1b0      	cbz	r0, 8003ae4 <_svfiprintf_r+0x110>
 8003ab6:	9207      	str	r2, [sp, #28]
 8003ab8:	e014      	b.n	8003ae4 <_svfiprintf_r+0x110>
 8003aba:	eba0 0308 	sub.w	r3, r0, r8
 8003abe:	fa09 f303 	lsl.w	r3, r9, r3
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	9304      	str	r3, [sp, #16]
 8003ac6:	46a2      	mov	sl, r4
 8003ac8:	e7d2      	b.n	8003a70 <_svfiprintf_r+0x9c>
 8003aca:	9b03      	ldr	r3, [sp, #12]
 8003acc:	1d19      	adds	r1, r3, #4
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	9103      	str	r1, [sp, #12]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	bfbb      	ittet	lt
 8003ad6:	425b      	neglt	r3, r3
 8003ad8:	f042 0202 	orrlt.w	r2, r2, #2
 8003adc:	9307      	strge	r3, [sp, #28]
 8003ade:	9307      	strlt	r3, [sp, #28]
 8003ae0:	bfb8      	it	lt
 8003ae2:	9204      	strlt	r2, [sp, #16]
 8003ae4:	7823      	ldrb	r3, [r4, #0]
 8003ae6:	2b2e      	cmp	r3, #46	; 0x2e
 8003ae8:	d10c      	bne.n	8003b04 <_svfiprintf_r+0x130>
 8003aea:	7863      	ldrb	r3, [r4, #1]
 8003aec:	2b2a      	cmp	r3, #42	; 0x2a
 8003aee:	d135      	bne.n	8003b5c <_svfiprintf_r+0x188>
 8003af0:	9b03      	ldr	r3, [sp, #12]
 8003af2:	1d1a      	adds	r2, r3, #4
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	9203      	str	r2, [sp, #12]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	bfb8      	it	lt
 8003afc:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b00:	3402      	adds	r4, #2
 8003b02:	9305      	str	r3, [sp, #20]
 8003b04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003bd0 <_svfiprintf_r+0x1fc>
 8003b08:	7821      	ldrb	r1, [r4, #0]
 8003b0a:	2203      	movs	r2, #3
 8003b0c:	4650      	mov	r0, sl
 8003b0e:	f7fc fb67 	bl	80001e0 <memchr>
 8003b12:	b140      	cbz	r0, 8003b26 <_svfiprintf_r+0x152>
 8003b14:	2340      	movs	r3, #64	; 0x40
 8003b16:	eba0 000a 	sub.w	r0, r0, sl
 8003b1a:	fa03 f000 	lsl.w	r0, r3, r0
 8003b1e:	9b04      	ldr	r3, [sp, #16]
 8003b20:	4303      	orrs	r3, r0
 8003b22:	3401      	adds	r4, #1
 8003b24:	9304      	str	r3, [sp, #16]
 8003b26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b2a:	4826      	ldr	r0, [pc, #152]	; (8003bc4 <_svfiprintf_r+0x1f0>)
 8003b2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b30:	2206      	movs	r2, #6
 8003b32:	f7fc fb55 	bl	80001e0 <memchr>
 8003b36:	2800      	cmp	r0, #0
 8003b38:	d038      	beq.n	8003bac <_svfiprintf_r+0x1d8>
 8003b3a:	4b23      	ldr	r3, [pc, #140]	; (8003bc8 <_svfiprintf_r+0x1f4>)
 8003b3c:	bb1b      	cbnz	r3, 8003b86 <_svfiprintf_r+0x1b2>
 8003b3e:	9b03      	ldr	r3, [sp, #12]
 8003b40:	3307      	adds	r3, #7
 8003b42:	f023 0307 	bic.w	r3, r3, #7
 8003b46:	3308      	adds	r3, #8
 8003b48:	9303      	str	r3, [sp, #12]
 8003b4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b4c:	4433      	add	r3, r6
 8003b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8003b50:	e767      	b.n	8003a22 <_svfiprintf_r+0x4e>
 8003b52:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b56:	460c      	mov	r4, r1
 8003b58:	2001      	movs	r0, #1
 8003b5a:	e7a5      	b.n	8003aa8 <_svfiprintf_r+0xd4>
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	3401      	adds	r4, #1
 8003b60:	9305      	str	r3, [sp, #20]
 8003b62:	4619      	mov	r1, r3
 8003b64:	f04f 0c0a 	mov.w	ip, #10
 8003b68:	4620      	mov	r0, r4
 8003b6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b6e:	3a30      	subs	r2, #48	; 0x30
 8003b70:	2a09      	cmp	r2, #9
 8003b72:	d903      	bls.n	8003b7c <_svfiprintf_r+0x1a8>
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0c5      	beq.n	8003b04 <_svfiprintf_r+0x130>
 8003b78:	9105      	str	r1, [sp, #20]
 8003b7a:	e7c3      	b.n	8003b04 <_svfiprintf_r+0x130>
 8003b7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b80:	4604      	mov	r4, r0
 8003b82:	2301      	movs	r3, #1
 8003b84:	e7f0      	b.n	8003b68 <_svfiprintf_r+0x194>
 8003b86:	ab03      	add	r3, sp, #12
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	462a      	mov	r2, r5
 8003b8c:	4b0f      	ldr	r3, [pc, #60]	; (8003bcc <_svfiprintf_r+0x1f8>)
 8003b8e:	a904      	add	r1, sp, #16
 8003b90:	4638      	mov	r0, r7
 8003b92:	f3af 8000 	nop.w
 8003b96:	1c42      	adds	r2, r0, #1
 8003b98:	4606      	mov	r6, r0
 8003b9a:	d1d6      	bne.n	8003b4a <_svfiprintf_r+0x176>
 8003b9c:	89ab      	ldrh	r3, [r5, #12]
 8003b9e:	065b      	lsls	r3, r3, #25
 8003ba0:	f53f af2c 	bmi.w	80039fc <_svfiprintf_r+0x28>
 8003ba4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ba6:	b01d      	add	sp, #116	; 0x74
 8003ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bac:	ab03      	add	r3, sp, #12
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	462a      	mov	r2, r5
 8003bb2:	4b06      	ldr	r3, [pc, #24]	; (8003bcc <_svfiprintf_r+0x1f8>)
 8003bb4:	a904      	add	r1, sp, #16
 8003bb6:	4638      	mov	r0, r7
 8003bb8:	f000 f87a 	bl	8003cb0 <_printf_i>
 8003bbc:	e7eb      	b.n	8003b96 <_svfiprintf_r+0x1c2>
 8003bbe:	bf00      	nop
 8003bc0:	0800429c 	.word	0x0800429c
 8003bc4:	080042a6 	.word	0x080042a6
 8003bc8:	00000000 	.word	0x00000000
 8003bcc:	0800391d 	.word	0x0800391d
 8003bd0:	080042a2 	.word	0x080042a2

08003bd4 <_printf_common>:
 8003bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bd8:	4616      	mov	r6, r2
 8003bda:	4699      	mov	r9, r3
 8003bdc:	688a      	ldr	r2, [r1, #8]
 8003bde:	690b      	ldr	r3, [r1, #16]
 8003be0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003be4:	4293      	cmp	r3, r2
 8003be6:	bfb8      	it	lt
 8003be8:	4613      	movlt	r3, r2
 8003bea:	6033      	str	r3, [r6, #0]
 8003bec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003bf0:	4607      	mov	r7, r0
 8003bf2:	460c      	mov	r4, r1
 8003bf4:	b10a      	cbz	r2, 8003bfa <_printf_common+0x26>
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	6033      	str	r3, [r6, #0]
 8003bfa:	6823      	ldr	r3, [r4, #0]
 8003bfc:	0699      	lsls	r1, r3, #26
 8003bfe:	bf42      	ittt	mi
 8003c00:	6833      	ldrmi	r3, [r6, #0]
 8003c02:	3302      	addmi	r3, #2
 8003c04:	6033      	strmi	r3, [r6, #0]
 8003c06:	6825      	ldr	r5, [r4, #0]
 8003c08:	f015 0506 	ands.w	r5, r5, #6
 8003c0c:	d106      	bne.n	8003c1c <_printf_common+0x48>
 8003c0e:	f104 0a19 	add.w	sl, r4, #25
 8003c12:	68e3      	ldr	r3, [r4, #12]
 8003c14:	6832      	ldr	r2, [r6, #0]
 8003c16:	1a9b      	subs	r3, r3, r2
 8003c18:	42ab      	cmp	r3, r5
 8003c1a:	dc26      	bgt.n	8003c6a <_printf_common+0x96>
 8003c1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c20:	1e13      	subs	r3, r2, #0
 8003c22:	6822      	ldr	r2, [r4, #0]
 8003c24:	bf18      	it	ne
 8003c26:	2301      	movne	r3, #1
 8003c28:	0692      	lsls	r2, r2, #26
 8003c2a:	d42b      	bmi.n	8003c84 <_printf_common+0xb0>
 8003c2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c30:	4649      	mov	r1, r9
 8003c32:	4638      	mov	r0, r7
 8003c34:	47c0      	blx	r8
 8003c36:	3001      	adds	r0, #1
 8003c38:	d01e      	beq.n	8003c78 <_printf_common+0xa4>
 8003c3a:	6823      	ldr	r3, [r4, #0]
 8003c3c:	68e5      	ldr	r5, [r4, #12]
 8003c3e:	6832      	ldr	r2, [r6, #0]
 8003c40:	f003 0306 	and.w	r3, r3, #6
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	bf08      	it	eq
 8003c48:	1aad      	subeq	r5, r5, r2
 8003c4a:	68a3      	ldr	r3, [r4, #8]
 8003c4c:	6922      	ldr	r2, [r4, #16]
 8003c4e:	bf0c      	ite	eq
 8003c50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c54:	2500      	movne	r5, #0
 8003c56:	4293      	cmp	r3, r2
 8003c58:	bfc4      	itt	gt
 8003c5a:	1a9b      	subgt	r3, r3, r2
 8003c5c:	18ed      	addgt	r5, r5, r3
 8003c5e:	2600      	movs	r6, #0
 8003c60:	341a      	adds	r4, #26
 8003c62:	42b5      	cmp	r5, r6
 8003c64:	d11a      	bne.n	8003c9c <_printf_common+0xc8>
 8003c66:	2000      	movs	r0, #0
 8003c68:	e008      	b.n	8003c7c <_printf_common+0xa8>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	4652      	mov	r2, sl
 8003c6e:	4649      	mov	r1, r9
 8003c70:	4638      	mov	r0, r7
 8003c72:	47c0      	blx	r8
 8003c74:	3001      	adds	r0, #1
 8003c76:	d103      	bne.n	8003c80 <_printf_common+0xac>
 8003c78:	f04f 30ff 	mov.w	r0, #4294967295
 8003c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c80:	3501      	adds	r5, #1
 8003c82:	e7c6      	b.n	8003c12 <_printf_common+0x3e>
 8003c84:	18e1      	adds	r1, r4, r3
 8003c86:	1c5a      	adds	r2, r3, #1
 8003c88:	2030      	movs	r0, #48	; 0x30
 8003c8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c8e:	4422      	add	r2, r4
 8003c90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c98:	3302      	adds	r3, #2
 8003c9a:	e7c7      	b.n	8003c2c <_printf_common+0x58>
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	4622      	mov	r2, r4
 8003ca0:	4649      	mov	r1, r9
 8003ca2:	4638      	mov	r0, r7
 8003ca4:	47c0      	blx	r8
 8003ca6:	3001      	adds	r0, #1
 8003ca8:	d0e6      	beq.n	8003c78 <_printf_common+0xa4>
 8003caa:	3601      	adds	r6, #1
 8003cac:	e7d9      	b.n	8003c62 <_printf_common+0x8e>
	...

08003cb0 <_printf_i>:
 8003cb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cb4:	7e0f      	ldrb	r7, [r1, #24]
 8003cb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003cb8:	2f78      	cmp	r7, #120	; 0x78
 8003cba:	4691      	mov	r9, r2
 8003cbc:	4680      	mov	r8, r0
 8003cbe:	460c      	mov	r4, r1
 8003cc0:	469a      	mov	sl, r3
 8003cc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003cc6:	d807      	bhi.n	8003cd8 <_printf_i+0x28>
 8003cc8:	2f62      	cmp	r7, #98	; 0x62
 8003cca:	d80a      	bhi.n	8003ce2 <_printf_i+0x32>
 8003ccc:	2f00      	cmp	r7, #0
 8003cce:	f000 80d8 	beq.w	8003e82 <_printf_i+0x1d2>
 8003cd2:	2f58      	cmp	r7, #88	; 0x58
 8003cd4:	f000 80a3 	beq.w	8003e1e <_printf_i+0x16e>
 8003cd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ce0:	e03a      	b.n	8003d58 <_printf_i+0xa8>
 8003ce2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ce6:	2b15      	cmp	r3, #21
 8003ce8:	d8f6      	bhi.n	8003cd8 <_printf_i+0x28>
 8003cea:	a101      	add	r1, pc, #4	; (adr r1, 8003cf0 <_printf_i+0x40>)
 8003cec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003cf0:	08003d49 	.word	0x08003d49
 8003cf4:	08003d5d 	.word	0x08003d5d
 8003cf8:	08003cd9 	.word	0x08003cd9
 8003cfc:	08003cd9 	.word	0x08003cd9
 8003d00:	08003cd9 	.word	0x08003cd9
 8003d04:	08003cd9 	.word	0x08003cd9
 8003d08:	08003d5d 	.word	0x08003d5d
 8003d0c:	08003cd9 	.word	0x08003cd9
 8003d10:	08003cd9 	.word	0x08003cd9
 8003d14:	08003cd9 	.word	0x08003cd9
 8003d18:	08003cd9 	.word	0x08003cd9
 8003d1c:	08003e69 	.word	0x08003e69
 8003d20:	08003d8d 	.word	0x08003d8d
 8003d24:	08003e4b 	.word	0x08003e4b
 8003d28:	08003cd9 	.word	0x08003cd9
 8003d2c:	08003cd9 	.word	0x08003cd9
 8003d30:	08003e8b 	.word	0x08003e8b
 8003d34:	08003cd9 	.word	0x08003cd9
 8003d38:	08003d8d 	.word	0x08003d8d
 8003d3c:	08003cd9 	.word	0x08003cd9
 8003d40:	08003cd9 	.word	0x08003cd9
 8003d44:	08003e53 	.word	0x08003e53
 8003d48:	682b      	ldr	r3, [r5, #0]
 8003d4a:	1d1a      	adds	r2, r3, #4
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	602a      	str	r2, [r5, #0]
 8003d50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e0a3      	b.n	8003ea4 <_printf_i+0x1f4>
 8003d5c:	6820      	ldr	r0, [r4, #0]
 8003d5e:	6829      	ldr	r1, [r5, #0]
 8003d60:	0606      	lsls	r6, r0, #24
 8003d62:	f101 0304 	add.w	r3, r1, #4
 8003d66:	d50a      	bpl.n	8003d7e <_printf_i+0xce>
 8003d68:	680e      	ldr	r6, [r1, #0]
 8003d6a:	602b      	str	r3, [r5, #0]
 8003d6c:	2e00      	cmp	r6, #0
 8003d6e:	da03      	bge.n	8003d78 <_printf_i+0xc8>
 8003d70:	232d      	movs	r3, #45	; 0x2d
 8003d72:	4276      	negs	r6, r6
 8003d74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d78:	485e      	ldr	r0, [pc, #376]	; (8003ef4 <_printf_i+0x244>)
 8003d7a:	230a      	movs	r3, #10
 8003d7c:	e019      	b.n	8003db2 <_printf_i+0x102>
 8003d7e:	680e      	ldr	r6, [r1, #0]
 8003d80:	602b      	str	r3, [r5, #0]
 8003d82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d86:	bf18      	it	ne
 8003d88:	b236      	sxthne	r6, r6
 8003d8a:	e7ef      	b.n	8003d6c <_printf_i+0xbc>
 8003d8c:	682b      	ldr	r3, [r5, #0]
 8003d8e:	6820      	ldr	r0, [r4, #0]
 8003d90:	1d19      	adds	r1, r3, #4
 8003d92:	6029      	str	r1, [r5, #0]
 8003d94:	0601      	lsls	r1, r0, #24
 8003d96:	d501      	bpl.n	8003d9c <_printf_i+0xec>
 8003d98:	681e      	ldr	r6, [r3, #0]
 8003d9a:	e002      	b.n	8003da2 <_printf_i+0xf2>
 8003d9c:	0646      	lsls	r6, r0, #25
 8003d9e:	d5fb      	bpl.n	8003d98 <_printf_i+0xe8>
 8003da0:	881e      	ldrh	r6, [r3, #0]
 8003da2:	4854      	ldr	r0, [pc, #336]	; (8003ef4 <_printf_i+0x244>)
 8003da4:	2f6f      	cmp	r7, #111	; 0x6f
 8003da6:	bf0c      	ite	eq
 8003da8:	2308      	moveq	r3, #8
 8003daa:	230a      	movne	r3, #10
 8003dac:	2100      	movs	r1, #0
 8003dae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003db2:	6865      	ldr	r5, [r4, #4]
 8003db4:	60a5      	str	r5, [r4, #8]
 8003db6:	2d00      	cmp	r5, #0
 8003db8:	bfa2      	ittt	ge
 8003dba:	6821      	ldrge	r1, [r4, #0]
 8003dbc:	f021 0104 	bicge.w	r1, r1, #4
 8003dc0:	6021      	strge	r1, [r4, #0]
 8003dc2:	b90e      	cbnz	r6, 8003dc8 <_printf_i+0x118>
 8003dc4:	2d00      	cmp	r5, #0
 8003dc6:	d04d      	beq.n	8003e64 <_printf_i+0x1b4>
 8003dc8:	4615      	mov	r5, r2
 8003dca:	fbb6 f1f3 	udiv	r1, r6, r3
 8003dce:	fb03 6711 	mls	r7, r3, r1, r6
 8003dd2:	5dc7      	ldrb	r7, [r0, r7]
 8003dd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003dd8:	4637      	mov	r7, r6
 8003dda:	42bb      	cmp	r3, r7
 8003ddc:	460e      	mov	r6, r1
 8003dde:	d9f4      	bls.n	8003dca <_printf_i+0x11a>
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d10b      	bne.n	8003dfc <_printf_i+0x14c>
 8003de4:	6823      	ldr	r3, [r4, #0]
 8003de6:	07de      	lsls	r6, r3, #31
 8003de8:	d508      	bpl.n	8003dfc <_printf_i+0x14c>
 8003dea:	6923      	ldr	r3, [r4, #16]
 8003dec:	6861      	ldr	r1, [r4, #4]
 8003dee:	4299      	cmp	r1, r3
 8003df0:	bfde      	ittt	le
 8003df2:	2330      	movle	r3, #48	; 0x30
 8003df4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003df8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003dfc:	1b52      	subs	r2, r2, r5
 8003dfe:	6122      	str	r2, [r4, #16]
 8003e00:	f8cd a000 	str.w	sl, [sp]
 8003e04:	464b      	mov	r3, r9
 8003e06:	aa03      	add	r2, sp, #12
 8003e08:	4621      	mov	r1, r4
 8003e0a:	4640      	mov	r0, r8
 8003e0c:	f7ff fee2 	bl	8003bd4 <_printf_common>
 8003e10:	3001      	adds	r0, #1
 8003e12:	d14c      	bne.n	8003eae <_printf_i+0x1fe>
 8003e14:	f04f 30ff 	mov.w	r0, #4294967295
 8003e18:	b004      	add	sp, #16
 8003e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e1e:	4835      	ldr	r0, [pc, #212]	; (8003ef4 <_printf_i+0x244>)
 8003e20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003e24:	6829      	ldr	r1, [r5, #0]
 8003e26:	6823      	ldr	r3, [r4, #0]
 8003e28:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e2c:	6029      	str	r1, [r5, #0]
 8003e2e:	061d      	lsls	r5, r3, #24
 8003e30:	d514      	bpl.n	8003e5c <_printf_i+0x1ac>
 8003e32:	07df      	lsls	r7, r3, #31
 8003e34:	bf44      	itt	mi
 8003e36:	f043 0320 	orrmi.w	r3, r3, #32
 8003e3a:	6023      	strmi	r3, [r4, #0]
 8003e3c:	b91e      	cbnz	r6, 8003e46 <_printf_i+0x196>
 8003e3e:	6823      	ldr	r3, [r4, #0]
 8003e40:	f023 0320 	bic.w	r3, r3, #32
 8003e44:	6023      	str	r3, [r4, #0]
 8003e46:	2310      	movs	r3, #16
 8003e48:	e7b0      	b.n	8003dac <_printf_i+0xfc>
 8003e4a:	6823      	ldr	r3, [r4, #0]
 8003e4c:	f043 0320 	orr.w	r3, r3, #32
 8003e50:	6023      	str	r3, [r4, #0]
 8003e52:	2378      	movs	r3, #120	; 0x78
 8003e54:	4828      	ldr	r0, [pc, #160]	; (8003ef8 <_printf_i+0x248>)
 8003e56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e5a:	e7e3      	b.n	8003e24 <_printf_i+0x174>
 8003e5c:	0659      	lsls	r1, r3, #25
 8003e5e:	bf48      	it	mi
 8003e60:	b2b6      	uxthmi	r6, r6
 8003e62:	e7e6      	b.n	8003e32 <_printf_i+0x182>
 8003e64:	4615      	mov	r5, r2
 8003e66:	e7bb      	b.n	8003de0 <_printf_i+0x130>
 8003e68:	682b      	ldr	r3, [r5, #0]
 8003e6a:	6826      	ldr	r6, [r4, #0]
 8003e6c:	6961      	ldr	r1, [r4, #20]
 8003e6e:	1d18      	adds	r0, r3, #4
 8003e70:	6028      	str	r0, [r5, #0]
 8003e72:	0635      	lsls	r5, r6, #24
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	d501      	bpl.n	8003e7c <_printf_i+0x1cc>
 8003e78:	6019      	str	r1, [r3, #0]
 8003e7a:	e002      	b.n	8003e82 <_printf_i+0x1d2>
 8003e7c:	0670      	lsls	r0, r6, #25
 8003e7e:	d5fb      	bpl.n	8003e78 <_printf_i+0x1c8>
 8003e80:	8019      	strh	r1, [r3, #0]
 8003e82:	2300      	movs	r3, #0
 8003e84:	6123      	str	r3, [r4, #16]
 8003e86:	4615      	mov	r5, r2
 8003e88:	e7ba      	b.n	8003e00 <_printf_i+0x150>
 8003e8a:	682b      	ldr	r3, [r5, #0]
 8003e8c:	1d1a      	adds	r2, r3, #4
 8003e8e:	602a      	str	r2, [r5, #0]
 8003e90:	681d      	ldr	r5, [r3, #0]
 8003e92:	6862      	ldr	r2, [r4, #4]
 8003e94:	2100      	movs	r1, #0
 8003e96:	4628      	mov	r0, r5
 8003e98:	f7fc f9a2 	bl	80001e0 <memchr>
 8003e9c:	b108      	cbz	r0, 8003ea2 <_printf_i+0x1f2>
 8003e9e:	1b40      	subs	r0, r0, r5
 8003ea0:	6060      	str	r0, [r4, #4]
 8003ea2:	6863      	ldr	r3, [r4, #4]
 8003ea4:	6123      	str	r3, [r4, #16]
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003eac:	e7a8      	b.n	8003e00 <_printf_i+0x150>
 8003eae:	6923      	ldr	r3, [r4, #16]
 8003eb0:	462a      	mov	r2, r5
 8003eb2:	4649      	mov	r1, r9
 8003eb4:	4640      	mov	r0, r8
 8003eb6:	47d0      	blx	sl
 8003eb8:	3001      	adds	r0, #1
 8003eba:	d0ab      	beq.n	8003e14 <_printf_i+0x164>
 8003ebc:	6823      	ldr	r3, [r4, #0]
 8003ebe:	079b      	lsls	r3, r3, #30
 8003ec0:	d413      	bmi.n	8003eea <_printf_i+0x23a>
 8003ec2:	68e0      	ldr	r0, [r4, #12]
 8003ec4:	9b03      	ldr	r3, [sp, #12]
 8003ec6:	4298      	cmp	r0, r3
 8003ec8:	bfb8      	it	lt
 8003eca:	4618      	movlt	r0, r3
 8003ecc:	e7a4      	b.n	8003e18 <_printf_i+0x168>
 8003ece:	2301      	movs	r3, #1
 8003ed0:	4632      	mov	r2, r6
 8003ed2:	4649      	mov	r1, r9
 8003ed4:	4640      	mov	r0, r8
 8003ed6:	47d0      	blx	sl
 8003ed8:	3001      	adds	r0, #1
 8003eda:	d09b      	beq.n	8003e14 <_printf_i+0x164>
 8003edc:	3501      	adds	r5, #1
 8003ede:	68e3      	ldr	r3, [r4, #12]
 8003ee0:	9903      	ldr	r1, [sp, #12]
 8003ee2:	1a5b      	subs	r3, r3, r1
 8003ee4:	42ab      	cmp	r3, r5
 8003ee6:	dcf2      	bgt.n	8003ece <_printf_i+0x21e>
 8003ee8:	e7eb      	b.n	8003ec2 <_printf_i+0x212>
 8003eea:	2500      	movs	r5, #0
 8003eec:	f104 0619 	add.w	r6, r4, #25
 8003ef0:	e7f5      	b.n	8003ede <_printf_i+0x22e>
 8003ef2:	bf00      	nop
 8003ef4:	080042ad 	.word	0x080042ad
 8003ef8:	080042be 	.word	0x080042be

08003efc <memcpy>:
 8003efc:	440a      	add	r2, r1
 8003efe:	4291      	cmp	r1, r2
 8003f00:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f04:	d100      	bne.n	8003f08 <memcpy+0xc>
 8003f06:	4770      	bx	lr
 8003f08:	b510      	push	{r4, lr}
 8003f0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f12:	4291      	cmp	r1, r2
 8003f14:	d1f9      	bne.n	8003f0a <memcpy+0xe>
 8003f16:	bd10      	pop	{r4, pc}

08003f18 <memmove>:
 8003f18:	4288      	cmp	r0, r1
 8003f1a:	b510      	push	{r4, lr}
 8003f1c:	eb01 0402 	add.w	r4, r1, r2
 8003f20:	d902      	bls.n	8003f28 <memmove+0x10>
 8003f22:	4284      	cmp	r4, r0
 8003f24:	4623      	mov	r3, r4
 8003f26:	d807      	bhi.n	8003f38 <memmove+0x20>
 8003f28:	1e43      	subs	r3, r0, #1
 8003f2a:	42a1      	cmp	r1, r4
 8003f2c:	d008      	beq.n	8003f40 <memmove+0x28>
 8003f2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f36:	e7f8      	b.n	8003f2a <memmove+0x12>
 8003f38:	4402      	add	r2, r0
 8003f3a:	4601      	mov	r1, r0
 8003f3c:	428a      	cmp	r2, r1
 8003f3e:	d100      	bne.n	8003f42 <memmove+0x2a>
 8003f40:	bd10      	pop	{r4, pc}
 8003f42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f4a:	e7f7      	b.n	8003f3c <memmove+0x24>

08003f4c <_free_r>:
 8003f4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f4e:	2900      	cmp	r1, #0
 8003f50:	d044      	beq.n	8003fdc <_free_r+0x90>
 8003f52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f56:	9001      	str	r0, [sp, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f1a1 0404 	sub.w	r4, r1, #4
 8003f5e:	bfb8      	it	lt
 8003f60:	18e4      	addlt	r4, r4, r3
 8003f62:	f000 f913 	bl	800418c <__malloc_lock>
 8003f66:	4a1e      	ldr	r2, [pc, #120]	; (8003fe0 <_free_r+0x94>)
 8003f68:	9801      	ldr	r0, [sp, #4]
 8003f6a:	6813      	ldr	r3, [r2, #0]
 8003f6c:	b933      	cbnz	r3, 8003f7c <_free_r+0x30>
 8003f6e:	6063      	str	r3, [r4, #4]
 8003f70:	6014      	str	r4, [r2, #0]
 8003f72:	b003      	add	sp, #12
 8003f74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f78:	f000 b90e 	b.w	8004198 <__malloc_unlock>
 8003f7c:	42a3      	cmp	r3, r4
 8003f7e:	d908      	bls.n	8003f92 <_free_r+0x46>
 8003f80:	6825      	ldr	r5, [r4, #0]
 8003f82:	1961      	adds	r1, r4, r5
 8003f84:	428b      	cmp	r3, r1
 8003f86:	bf01      	itttt	eq
 8003f88:	6819      	ldreq	r1, [r3, #0]
 8003f8a:	685b      	ldreq	r3, [r3, #4]
 8003f8c:	1949      	addeq	r1, r1, r5
 8003f8e:	6021      	streq	r1, [r4, #0]
 8003f90:	e7ed      	b.n	8003f6e <_free_r+0x22>
 8003f92:	461a      	mov	r2, r3
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	b10b      	cbz	r3, 8003f9c <_free_r+0x50>
 8003f98:	42a3      	cmp	r3, r4
 8003f9a:	d9fa      	bls.n	8003f92 <_free_r+0x46>
 8003f9c:	6811      	ldr	r1, [r2, #0]
 8003f9e:	1855      	adds	r5, r2, r1
 8003fa0:	42a5      	cmp	r5, r4
 8003fa2:	d10b      	bne.n	8003fbc <_free_r+0x70>
 8003fa4:	6824      	ldr	r4, [r4, #0]
 8003fa6:	4421      	add	r1, r4
 8003fa8:	1854      	adds	r4, r2, r1
 8003faa:	42a3      	cmp	r3, r4
 8003fac:	6011      	str	r1, [r2, #0]
 8003fae:	d1e0      	bne.n	8003f72 <_free_r+0x26>
 8003fb0:	681c      	ldr	r4, [r3, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	6053      	str	r3, [r2, #4]
 8003fb6:	4421      	add	r1, r4
 8003fb8:	6011      	str	r1, [r2, #0]
 8003fba:	e7da      	b.n	8003f72 <_free_r+0x26>
 8003fbc:	d902      	bls.n	8003fc4 <_free_r+0x78>
 8003fbe:	230c      	movs	r3, #12
 8003fc0:	6003      	str	r3, [r0, #0]
 8003fc2:	e7d6      	b.n	8003f72 <_free_r+0x26>
 8003fc4:	6825      	ldr	r5, [r4, #0]
 8003fc6:	1961      	adds	r1, r4, r5
 8003fc8:	428b      	cmp	r3, r1
 8003fca:	bf04      	itt	eq
 8003fcc:	6819      	ldreq	r1, [r3, #0]
 8003fce:	685b      	ldreq	r3, [r3, #4]
 8003fd0:	6063      	str	r3, [r4, #4]
 8003fd2:	bf04      	itt	eq
 8003fd4:	1949      	addeq	r1, r1, r5
 8003fd6:	6021      	streq	r1, [r4, #0]
 8003fd8:	6054      	str	r4, [r2, #4]
 8003fda:	e7ca      	b.n	8003f72 <_free_r+0x26>
 8003fdc:	b003      	add	sp, #12
 8003fde:	bd30      	pop	{r4, r5, pc}
 8003fe0:	20000124 	.word	0x20000124

08003fe4 <sbrk_aligned>:
 8003fe4:	b570      	push	{r4, r5, r6, lr}
 8003fe6:	4e0e      	ldr	r6, [pc, #56]	; (8004020 <sbrk_aligned+0x3c>)
 8003fe8:	460c      	mov	r4, r1
 8003fea:	6831      	ldr	r1, [r6, #0]
 8003fec:	4605      	mov	r5, r0
 8003fee:	b911      	cbnz	r1, 8003ff6 <sbrk_aligned+0x12>
 8003ff0:	f000 f8bc 	bl	800416c <_sbrk_r>
 8003ff4:	6030      	str	r0, [r6, #0]
 8003ff6:	4621      	mov	r1, r4
 8003ff8:	4628      	mov	r0, r5
 8003ffa:	f000 f8b7 	bl	800416c <_sbrk_r>
 8003ffe:	1c43      	adds	r3, r0, #1
 8004000:	d00a      	beq.n	8004018 <sbrk_aligned+0x34>
 8004002:	1cc4      	adds	r4, r0, #3
 8004004:	f024 0403 	bic.w	r4, r4, #3
 8004008:	42a0      	cmp	r0, r4
 800400a:	d007      	beq.n	800401c <sbrk_aligned+0x38>
 800400c:	1a21      	subs	r1, r4, r0
 800400e:	4628      	mov	r0, r5
 8004010:	f000 f8ac 	bl	800416c <_sbrk_r>
 8004014:	3001      	adds	r0, #1
 8004016:	d101      	bne.n	800401c <sbrk_aligned+0x38>
 8004018:	f04f 34ff 	mov.w	r4, #4294967295
 800401c:	4620      	mov	r0, r4
 800401e:	bd70      	pop	{r4, r5, r6, pc}
 8004020:	20000128 	.word	0x20000128

08004024 <_malloc_r>:
 8004024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004028:	1ccd      	adds	r5, r1, #3
 800402a:	f025 0503 	bic.w	r5, r5, #3
 800402e:	3508      	adds	r5, #8
 8004030:	2d0c      	cmp	r5, #12
 8004032:	bf38      	it	cc
 8004034:	250c      	movcc	r5, #12
 8004036:	2d00      	cmp	r5, #0
 8004038:	4607      	mov	r7, r0
 800403a:	db01      	blt.n	8004040 <_malloc_r+0x1c>
 800403c:	42a9      	cmp	r1, r5
 800403e:	d905      	bls.n	800404c <_malloc_r+0x28>
 8004040:	230c      	movs	r3, #12
 8004042:	603b      	str	r3, [r7, #0]
 8004044:	2600      	movs	r6, #0
 8004046:	4630      	mov	r0, r6
 8004048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800404c:	4e2e      	ldr	r6, [pc, #184]	; (8004108 <_malloc_r+0xe4>)
 800404e:	f000 f89d 	bl	800418c <__malloc_lock>
 8004052:	6833      	ldr	r3, [r6, #0]
 8004054:	461c      	mov	r4, r3
 8004056:	bb34      	cbnz	r4, 80040a6 <_malloc_r+0x82>
 8004058:	4629      	mov	r1, r5
 800405a:	4638      	mov	r0, r7
 800405c:	f7ff ffc2 	bl	8003fe4 <sbrk_aligned>
 8004060:	1c43      	adds	r3, r0, #1
 8004062:	4604      	mov	r4, r0
 8004064:	d14d      	bne.n	8004102 <_malloc_r+0xde>
 8004066:	6834      	ldr	r4, [r6, #0]
 8004068:	4626      	mov	r6, r4
 800406a:	2e00      	cmp	r6, #0
 800406c:	d140      	bne.n	80040f0 <_malloc_r+0xcc>
 800406e:	6823      	ldr	r3, [r4, #0]
 8004070:	4631      	mov	r1, r6
 8004072:	4638      	mov	r0, r7
 8004074:	eb04 0803 	add.w	r8, r4, r3
 8004078:	f000 f878 	bl	800416c <_sbrk_r>
 800407c:	4580      	cmp	r8, r0
 800407e:	d13a      	bne.n	80040f6 <_malloc_r+0xd2>
 8004080:	6821      	ldr	r1, [r4, #0]
 8004082:	3503      	adds	r5, #3
 8004084:	1a6d      	subs	r5, r5, r1
 8004086:	f025 0503 	bic.w	r5, r5, #3
 800408a:	3508      	adds	r5, #8
 800408c:	2d0c      	cmp	r5, #12
 800408e:	bf38      	it	cc
 8004090:	250c      	movcc	r5, #12
 8004092:	4629      	mov	r1, r5
 8004094:	4638      	mov	r0, r7
 8004096:	f7ff ffa5 	bl	8003fe4 <sbrk_aligned>
 800409a:	3001      	adds	r0, #1
 800409c:	d02b      	beq.n	80040f6 <_malloc_r+0xd2>
 800409e:	6823      	ldr	r3, [r4, #0]
 80040a0:	442b      	add	r3, r5
 80040a2:	6023      	str	r3, [r4, #0]
 80040a4:	e00e      	b.n	80040c4 <_malloc_r+0xa0>
 80040a6:	6822      	ldr	r2, [r4, #0]
 80040a8:	1b52      	subs	r2, r2, r5
 80040aa:	d41e      	bmi.n	80040ea <_malloc_r+0xc6>
 80040ac:	2a0b      	cmp	r2, #11
 80040ae:	d916      	bls.n	80040de <_malloc_r+0xba>
 80040b0:	1961      	adds	r1, r4, r5
 80040b2:	42a3      	cmp	r3, r4
 80040b4:	6025      	str	r5, [r4, #0]
 80040b6:	bf18      	it	ne
 80040b8:	6059      	strne	r1, [r3, #4]
 80040ba:	6863      	ldr	r3, [r4, #4]
 80040bc:	bf08      	it	eq
 80040be:	6031      	streq	r1, [r6, #0]
 80040c0:	5162      	str	r2, [r4, r5]
 80040c2:	604b      	str	r3, [r1, #4]
 80040c4:	4638      	mov	r0, r7
 80040c6:	f104 060b 	add.w	r6, r4, #11
 80040ca:	f000 f865 	bl	8004198 <__malloc_unlock>
 80040ce:	f026 0607 	bic.w	r6, r6, #7
 80040d2:	1d23      	adds	r3, r4, #4
 80040d4:	1af2      	subs	r2, r6, r3
 80040d6:	d0b6      	beq.n	8004046 <_malloc_r+0x22>
 80040d8:	1b9b      	subs	r3, r3, r6
 80040da:	50a3      	str	r3, [r4, r2]
 80040dc:	e7b3      	b.n	8004046 <_malloc_r+0x22>
 80040de:	6862      	ldr	r2, [r4, #4]
 80040e0:	42a3      	cmp	r3, r4
 80040e2:	bf0c      	ite	eq
 80040e4:	6032      	streq	r2, [r6, #0]
 80040e6:	605a      	strne	r2, [r3, #4]
 80040e8:	e7ec      	b.n	80040c4 <_malloc_r+0xa0>
 80040ea:	4623      	mov	r3, r4
 80040ec:	6864      	ldr	r4, [r4, #4]
 80040ee:	e7b2      	b.n	8004056 <_malloc_r+0x32>
 80040f0:	4634      	mov	r4, r6
 80040f2:	6876      	ldr	r6, [r6, #4]
 80040f4:	e7b9      	b.n	800406a <_malloc_r+0x46>
 80040f6:	230c      	movs	r3, #12
 80040f8:	603b      	str	r3, [r7, #0]
 80040fa:	4638      	mov	r0, r7
 80040fc:	f000 f84c 	bl	8004198 <__malloc_unlock>
 8004100:	e7a1      	b.n	8004046 <_malloc_r+0x22>
 8004102:	6025      	str	r5, [r4, #0]
 8004104:	e7de      	b.n	80040c4 <_malloc_r+0xa0>
 8004106:	bf00      	nop
 8004108:	20000124 	.word	0x20000124

0800410c <_realloc_r>:
 800410c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004110:	4680      	mov	r8, r0
 8004112:	4614      	mov	r4, r2
 8004114:	460e      	mov	r6, r1
 8004116:	b921      	cbnz	r1, 8004122 <_realloc_r+0x16>
 8004118:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800411c:	4611      	mov	r1, r2
 800411e:	f7ff bf81 	b.w	8004024 <_malloc_r>
 8004122:	b92a      	cbnz	r2, 8004130 <_realloc_r+0x24>
 8004124:	f7ff ff12 	bl	8003f4c <_free_r>
 8004128:	4625      	mov	r5, r4
 800412a:	4628      	mov	r0, r5
 800412c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004130:	f000 f838 	bl	80041a4 <_malloc_usable_size_r>
 8004134:	4284      	cmp	r4, r0
 8004136:	4607      	mov	r7, r0
 8004138:	d802      	bhi.n	8004140 <_realloc_r+0x34>
 800413a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800413e:	d812      	bhi.n	8004166 <_realloc_r+0x5a>
 8004140:	4621      	mov	r1, r4
 8004142:	4640      	mov	r0, r8
 8004144:	f7ff ff6e 	bl	8004024 <_malloc_r>
 8004148:	4605      	mov	r5, r0
 800414a:	2800      	cmp	r0, #0
 800414c:	d0ed      	beq.n	800412a <_realloc_r+0x1e>
 800414e:	42bc      	cmp	r4, r7
 8004150:	4622      	mov	r2, r4
 8004152:	4631      	mov	r1, r6
 8004154:	bf28      	it	cs
 8004156:	463a      	movcs	r2, r7
 8004158:	f7ff fed0 	bl	8003efc <memcpy>
 800415c:	4631      	mov	r1, r6
 800415e:	4640      	mov	r0, r8
 8004160:	f7ff fef4 	bl	8003f4c <_free_r>
 8004164:	e7e1      	b.n	800412a <_realloc_r+0x1e>
 8004166:	4635      	mov	r5, r6
 8004168:	e7df      	b.n	800412a <_realloc_r+0x1e>
	...

0800416c <_sbrk_r>:
 800416c:	b538      	push	{r3, r4, r5, lr}
 800416e:	4d06      	ldr	r5, [pc, #24]	; (8004188 <_sbrk_r+0x1c>)
 8004170:	2300      	movs	r3, #0
 8004172:	4604      	mov	r4, r0
 8004174:	4608      	mov	r0, r1
 8004176:	602b      	str	r3, [r5, #0]
 8004178:	f7fd fa4e 	bl	8001618 <_sbrk>
 800417c:	1c43      	adds	r3, r0, #1
 800417e:	d102      	bne.n	8004186 <_sbrk_r+0x1a>
 8004180:	682b      	ldr	r3, [r5, #0]
 8004182:	b103      	cbz	r3, 8004186 <_sbrk_r+0x1a>
 8004184:	6023      	str	r3, [r4, #0]
 8004186:	bd38      	pop	{r3, r4, r5, pc}
 8004188:	2000012c 	.word	0x2000012c

0800418c <__malloc_lock>:
 800418c:	4801      	ldr	r0, [pc, #4]	; (8004194 <__malloc_lock+0x8>)
 800418e:	f000 b811 	b.w	80041b4 <__retarget_lock_acquire_recursive>
 8004192:	bf00      	nop
 8004194:	20000130 	.word	0x20000130

08004198 <__malloc_unlock>:
 8004198:	4801      	ldr	r0, [pc, #4]	; (80041a0 <__malloc_unlock+0x8>)
 800419a:	f000 b80c 	b.w	80041b6 <__retarget_lock_release_recursive>
 800419e:	bf00      	nop
 80041a0:	20000130 	.word	0x20000130

080041a4 <_malloc_usable_size_r>:
 80041a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041a8:	1f18      	subs	r0, r3, #4
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	bfbc      	itt	lt
 80041ae:	580b      	ldrlt	r3, [r1, r0]
 80041b0:	18c0      	addlt	r0, r0, r3
 80041b2:	4770      	bx	lr

080041b4 <__retarget_lock_acquire_recursive>:
 80041b4:	4770      	bx	lr

080041b6 <__retarget_lock_release_recursive>:
 80041b6:	4770      	bx	lr

080041b8 <_init>:
 80041b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ba:	bf00      	nop
 80041bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041be:	bc08      	pop	{r3}
 80041c0:	469e      	mov	lr, r3
 80041c2:	4770      	bx	lr

080041c4 <_fini>:
 80041c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c6:	bf00      	nop
 80041c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ca:	bc08      	pop	{r3}
 80041cc:	469e      	mov	lr, r3
 80041ce:	4770      	bx	lr
